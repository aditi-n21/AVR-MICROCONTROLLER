C51 COMPILER V9.51   DBFSBAFS                                                              11/22/2013 05:01:25 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE DBFSBAFS
OBJECT MODULE PLACED IN dbfsbafs.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE dbfsbafs.c BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include<reg51.h>
   2          
   3          void _nop_(void);
   4          
   5          #define delay_us _nop_(); //generates 1 microsecond
   6          #define LCD P2
   7          #define ADC_OUT P1
   8          sbit RS=P3^4; //connect p3.0 to rs pin of lcd
   9          sbit EN=P3^6; //connect p3.2 to en pin of lcd
  10          sbit RW=P3^5; //connect p3.1 to en pin of lcd
  11          
  12          sbit intr = P3^3;
  13          sbit wr = P3^2;
  14          sbit rd = P3^1;
  15          sbit fan=P3^0;
  16          sbit led1=P0^3;
  17          sbit led2=P0^4;
  18          sbit led3=P0^5;
  19          sbit led4=P0^6;
  20          
  21          
  22          void init_lcd(void);
  23          void cmd_lcd(unsigned char);
  24          void write_lcd(unsigned char);
  25          void display_lcd(unsigned char *);
  26          void delay_ms(unsigned int);
  27          void temp();                 //for temperature 
  28          void convertAndDisplay(unsigned char value);
  29          void timer(unsigned char);
  30          void temp_check(unsigned char);
  31          unsigned char pwm_width;
  32          bit pwm_flag = 0;
  33          
  34          
  35          void timer0() interrupt 1 {
  36   1              if(!pwm_flag) { //Start of High level
  37   2                      pwm_flag = 1;   //Set flag
  38   2                      fan = 1;     //Set PWM o/p pin
  39   2                      TH0 = pwm_width;        //Load timer
  40   2                      TF0 = 0;                //Clear interrupt flag
  41   2                      return;         //Return
  42   2              }
  43   1              else {  //Start of Low level
  44   2                      pwm_flag = 0;   //Clear flag
  45   2                      fan = 0;     //Clear PWM o/p pin
  46   2                      TH0 = 255 - pwm_width;  //Load timer
  47   2                      TF0 = 0;        //Clear Interrupt flag
  48   2                      return;         //return
  49   2              }
  50   1      }
  51          void main()
  52          {
  53   1                pwm_width = 160;
  54   1              EA = 1;  //Enable Interrupt
  55   1              ET0 = 1;  // enable Timer interrupt
C51 COMPILER V9.51   DBFSBAFS                                                              11/22/2013 05:01:25 PAGE 2   

  56   1              TR0 = 1;    //Start Timer 
  57   1          TMOD=0x02;
  58   1        //TH1=0xd2;
  59   1        init_lcd();
  60   1        cmd_lcd(0x82);
  61   1        display_lcd("TEMP:");
  62   1         while(1)
  63   1         {
  64   2          temp();  
  65   2         }
  66   1      }
  67          
  68          void temp() 
  69          {   unsigned char value;
  70   1               delay_ms(1);
  71   1             wr = 0;
  72   1            delay_ms(1);
  73   1            wr = 1;
  74   1              while(intr==1);
  75   1            rd=0;
  76   1            value = ADC_OUT;
  77   1            value=value*2;
  78   1            convertAndDisplay(value);
  79   1            rd=1;
  80   1      }
  81            
  82          void convertAndDisplay(unsigned char value)
  83             
  84             {
  85   1            unsigned char x,d1,d2;
  86   1          x=value/10;
  87   1          d1=value%10;
  88   1          d2=x%10;
  89   1        //  d3=x%10;
  90   1              cmd_lcd(0x88);
  91   1          //cmd_lcd(0x06);
  92   1          //cmd_lcd(0x0E);
  93   1          write_lcd(d2+48);   
  94   1          write_lcd(d1+48);
  95   1          write_lcd('`');
  96   1            write_lcd('C');
  97   1          delay_ms(10);
  98   1          temp_check(value);
  99   1          
 100   1      }
 101          void temp_check(unsigned char value)
 102          {
 103   1        
 104   1        if(value<=25)
 105   1         {   led1=0;led2=1;led3=1;led4=1;
 106   2               pwm_width=250;
 107   2           //cmd_lcd(0x01);
 108   2           cmd_lcd(0xc4);
 109   2           display_lcd("MODE 1");
 110   2           delay_ms(10);
 111   2         }
 112   1        else if((value>25)&&(value<=30))
 113   1         {
 114   2         led1=1;led2=0;led3=1;led4=1;
 115   2          // fan=1;
 116   2          // timer(50);
 117   2           //delay_ms(10);
C51 COMPILER V9.51   DBFSBAFS                                                              11/22/2013 05:01:25 PAGE 3   

 118   2           //fan=0;
 119   2           //timer(50);
 120   2            pwm_width=190;
 121   2          // cmd_lcd(0x01);
 122   2            cmd_lcd(0xc4);
 123   2           display_lcd("MODE 2");
 124   2          
 125   2           delay_ms(10);
 126   2         }
 127   1         else if((value>30)&&(value<=35))
 128   1         {
 129   2           led1=1;led2=1;led3=0;led4=1;
 130   2          // fan=1;
 131   2           //timer(75);
 132   2           //delay_ms(10);
 133   2           //fan=0;
 134   2          // timer(25);
 135   2           pwm_width=130;
 136   2        //   cmd_lcd(0x01);
 137   2           cmd_lcd(0xc4);
 138   2           display_lcd("MODE 3");
 139   2          
 140   2           delay_ms(10);
 141   2         }
 142   1         else if((value>35)&&(value<=40))
 143   1         {
 144   2           led1=1;led2=1;led3=1;led4=0;
 145   2          // fan=1;
 146   2           //timer(75);
 147   2           //delay_ms(10);
 148   2           //fan=0;
 149   2          // timer(25);
 150   2           pwm_width=70;
 151   2        //   cmd_lcd(0x01);
 152   2           cmd_lcd(0xc4);
 153   2           display_lcd("MODE 4");
 154   2          
 155   2           delay_ms(10);
 156   2         }
 157   1         else
 158   1         {
 159   2           led1=0;led2=0;led3=0;led4=0;
 160   2          // fan=1;
 161   2          // timer(100);
 162   2           pwm_width=10;
 163   2        //   cmd_lcd(0x01);
 164   2          cmd_lcd(0xc4);
 165   2           display_lcd("MODE 5");
 166   2           delay_ms(10);
 167   2        }
 168   1         
 169   1      } 
 170          //initialize lcd
 171          void init_lcd(void)
 172          {                           
 173   1      delay_ms(10); //delay 10 milliseconds
 174   1      cmd_lcd(0x0e); //lcd on, cursor on
 175   1      delay_ms(10);
 176   1      cmd_lcd(0x38); //8 bit initialize, 5x7 character font, 16x2 display
 177   1      delay_ms(10);
 178   1      cmd_lcd(0x06); //right shift cursor automatically after each character is displayed
 179   1      delay_ms(10);
C51 COMPILER V9.51   DBFSBAFS                                                              11/22/2013 05:01:25 PAGE 4   

 180   1      cmd_lcd(0x01); //clear lcd
 181   1      delay_ms(10);
 182   1      cmd_lcd (0x80);
 183   1      }
 184          //transmit command or instruction to lcd
 185          void cmd_lcd(unsigned char c)
 186          {
 187   1      EN=1;
 188   1      RW=0;//set enable pin
 189   1      RS=0; //clear register select pin
 190   1      LCD=c; //load 8 bit data
 191   1      EN=0; //clear enable pin
 192   1      delay_ms(2); //delay 2 milliseconds
 193   1      }
 194          //transmit a character to be displayed on lcd
 195          void write_lcd(unsigned char c)
 196          {
 197   1      EN=1; //set enable pin
 198   1      RW=0;
 199   1      RS=1; //set register select pin
 200   1      LCD=c;  //load 8 bit data
 201   1      EN=0; //clear enable pin
 202   1      delay_ms(2); //delay 2 milliseconds
 203   1      }
 204          //transmit a string to be displayed on lcd
 205          void display_lcd(unsigned char *s)
 206          {
 207   1      while(*s)
 208   1      write_lcd(*s++);
 209   1      }
 210          //generates delay in milli seconds
 211          void delay_ms(unsigned int i)
 212          {
 213   1      unsigned int j;
 214   1                  while(i-->0)
 215   1                  {
 216   2                              for(j=0;j<500;j++)
 217   2                              {
 218   3                                          ;
 219   3                              }
 220   2                  }
 221   1      }           


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    497    ----
   CONSTANT SIZE    =     41    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
