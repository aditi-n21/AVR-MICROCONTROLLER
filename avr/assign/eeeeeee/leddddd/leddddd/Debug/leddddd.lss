
leddddd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000176  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00000176  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00000978  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000613  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ba  00000000  00000000  0000104b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a2  00000000  00000000  00001205  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000016a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000ea  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a4  00000000  00000000  000017b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000185a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e7       	ldi	r30, 0x76	; 118
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e9       	ldi	r26, 0x94	; 148
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 39       	cpi	r26, 0x94	; 148
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <util/delay.h>
unsigned int arr[]={0xcf88, 0x3f2a, 0xf300, 0x3f22, 0xf388, 0xc380, 0xa1e2, 0xcc88, 0x3322, 0x2322, 0xc094, 0x1022, 0xcc05, 0xcc11, 0xff00, 0xc788, 0x8f88, 0xc798, 0xbb88, 0x0322, 0xfc00, 0x0005, 0xcc50, 0x0055, 0x0023, 0x3344};
int main(void)
{
	int count=0;
	DDRA=DDRB=0xff;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	87 bb       	out	0x17, r24	; 23
  96:	8a bb       	out	0x1a, r24	; 26
    while(1)
    {
		int j,k;
		for(j=0; j<26; j++)
  98:	c0 e0       	ldi	r28, 0x00	; 0
  9a:	d0 e0       	ldi	r29, 0x00	; 0
#include <avr/io.h>
#include <util/delay.h>
unsigned int arr[]={0xcf88, 0x3f2a, 0xf300, 0x3f22, 0xf388, 0xc380, 0xa1e2, 0xcc88, 0x3322, 0x2322, 0xc094, 0x1022, 0xcc05, 0xcc11, 0xff00, 0xc788, 0x8f88, 0xc798, 0xbb88, 0x0322, 0xfc00, 0x0005, 0xcc50, 0x0055, 0x0023, 0x3344};
int main(void)
{
	int count=0;
  9c:	20 e0       	ldi	r18, 0x00	; 0
  9e:	30 e0       	ldi	r19, 0x00	; 0
    while(1)
    {
		int j,k;
		for(j=0; j<26; j++)
		{
		count=count%26;
  a0:	0a e1       	ldi	r16, 0x1A	; 26
  a2:	10 e0       	ldi	r17, 0x00	; 0
		PORTB=arr[count];
  a4:	0f 2e       	mov	r0, r31
  a6:	f0 e6       	ldi	r31, 0x60	; 96
  a8:	cf 2e       	mov	r12, r31
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	df 2e       	mov	r13, r31
  ae:	f0 2d       	mov	r31, r0
	int count=0;
	DDRA=DDRB=0xff;
    while(1)
    {
		int j,k;
		for(j=0; j<26; j++)
  b0:	ee 24       	eor	r14, r14
  b2:	ff 24       	eor	r15, r15
  b4:	1a c0       	rjmp	.+52     	; 0xea <main+0x58>
		{
		count=count%26;
  b6:	c9 01       	movw	r24, r18
  b8:	b8 01       	movw	r22, r16
  ba:	0e 94 92 00 	call	0x124	; 0x124 <__divmodhi4>
		PORTB=arr[count];
  be:	fc 01       	movw	r30, r24
  c0:	ee 0f       	add	r30, r30
  c2:	ff 1f       	adc	r31, r31
  c4:	ec 0d       	add	r30, r12
  c6:	fd 1d       	adc	r31, r13
  c8:	20 81       	ld	r18, Z
  ca:	28 bb       	out	0x18, r18	; 24
		PORTA=arr[count]>>8;
  cc:	21 81       	ldd	r18, Z+1	; 0x01
  ce:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	2f e3       	ldi	r18, 0x3F	; 63
  d2:	3d e0       	ldi	r19, 0x0D	; 13
  d4:	43 e0       	ldi	r20, 0x03	; 3
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	30 40       	sbci	r19, 0x00	; 0
  da:	40 40       	sbci	r20, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x44>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x4e>
  e0:	00 00       	nop
		_delay_ms(1000);
		count=count+1;
  e2:	9c 01       	movw	r18, r24
  e4:	2f 5f       	subi	r18, 0xFF	; 255
  e6:	3f 4f       	sbci	r19, 0xFF	; 255
	int count=0;
	DDRA=DDRB=0xff;
    while(1)
    {
		int j,k;
		for(j=0; j<26; j++)
  e8:	21 96       	adiw	r28, 0x01	; 1
  ea:	ca 31       	cpi	r28, 0x1A	; 26
  ec:	d1 05       	cpc	r29, r1
  ee:	1c f3       	brlt	.-58     	; 0xb6 <main+0x24>
#include <avr/io.h>
#include <util/delay.h>
unsigned int arr[]={0xcf88, 0x3f2a, 0xf300, 0x3f22, 0xf388, 0xc380, 0xa1e2, 0xcc88, 0x3322, 0x2322, 0xc094, 0x1022, 0xcc05, 0xcc11, 0xff00, 0xc788, 0x8f88, 0xc798, 0xbb88, 0x0322, 0xfc00, 0x0005, 0xcc50, 0x0055, 0x0023, 0x3344};
int main(void)
  f0:	f9 01       	movw	r30, r18
  f2:	ee 0f       	add	r30, r30
  f4:	ff 1f       	adc	r31, r31
  f6:	ee 59       	subi	r30, 0x9E	; 158
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	c8 01       	movw	r24, r16
	int count=0;
	DDRA=DDRB=0xff;
    while(1)
    {
		int j,k;
		for(j=0; j<26; j++)
  fc:	32 97       	sbiw	r30, 0x02	; 2
		count=count+1;
		}
		for(k=0; k<26; k++)		
       {
		   count=count/1;
		   PORTB=arr[count];
  fe:	40 81       	ld	r20, Z
 100:	48 bb       	out	0x18, r20	; 24
		   PORTA=arr[count]>>8;
 102:	41 81       	ldd	r20, Z+1	; 0x01
 104:	4b bb       	out	0x1b, r20	; 27
 106:	4f e3       	ldi	r20, 0x3F	; 63
 108:	5d e0       	ldi	r21, 0x0D	; 13
 10a:	63 e0       	ldi	r22, 0x03	; 3
 10c:	41 50       	subi	r20, 0x01	; 1
 10e:	50 40       	sbci	r21, 0x00	; 0
 110:	60 40       	sbci	r22, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x7a>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x84>
 116:	00 00       	nop
 118:	01 97       	sbiw	r24, 0x01	; 1
		PORTB=arr[count];
		PORTA=arr[count]>>8;
		_delay_ms(1000);
		count=count+1;
		}
		for(k=0; k<26; k++)		
 11a:	81 f7       	brne	.-32     	; 0xfc <main+0x6a>
 11c:	2a 51       	subi	r18, 0x1A	; 26
 11e:	30 40       	sbci	r19, 0x00	; 0
	int count=0;
	DDRA=DDRB=0xff;
    while(1)
    {
		int j,k;
		for(j=0; j<26; j++)
 120:	e7 01       	movw	r28, r14
 122:	e3 cf       	rjmp	.-58     	; 0xea <main+0x58>

00000124 <__divmodhi4>:
 124:	97 fb       	bst	r25, 7
 126:	09 2e       	mov	r0, r25
 128:	07 26       	eor	r0, r23
 12a:	0a d0       	rcall	.+20     	; 0x140 <__divmodhi4_neg1>
 12c:	77 fd       	sbrc	r23, 7
 12e:	04 d0       	rcall	.+8      	; 0x138 <__divmodhi4_neg2>
 130:	0c d0       	rcall	.+24     	; 0x14a <__udivmodhi4>
 132:	06 d0       	rcall	.+12     	; 0x140 <__divmodhi4_neg1>
 134:	00 20       	and	r0, r0
 136:	1a f4       	brpl	.+6      	; 0x13e <__divmodhi4_exit>

00000138 <__divmodhi4_neg2>:
 138:	70 95       	com	r23
 13a:	61 95       	neg	r22
 13c:	7f 4f       	sbci	r23, 0xFF	; 255

0000013e <__divmodhi4_exit>:
 13e:	08 95       	ret

00000140 <__divmodhi4_neg1>:
 140:	f6 f7       	brtc	.-4      	; 0x13e <__divmodhi4_exit>
 142:	90 95       	com	r25
 144:	81 95       	neg	r24
 146:	9f 4f       	sbci	r25, 0xFF	; 255
 148:	08 95       	ret

0000014a <__udivmodhi4>:
 14a:	aa 1b       	sub	r26, r26
 14c:	bb 1b       	sub	r27, r27
 14e:	51 e1       	ldi	r21, 0x11	; 17
 150:	07 c0       	rjmp	.+14     	; 0x160 <__udivmodhi4_ep>

00000152 <__udivmodhi4_loop>:
 152:	aa 1f       	adc	r26, r26
 154:	bb 1f       	adc	r27, r27
 156:	a6 17       	cp	r26, r22
 158:	b7 07       	cpc	r27, r23
 15a:	10 f0       	brcs	.+4      	; 0x160 <__udivmodhi4_ep>
 15c:	a6 1b       	sub	r26, r22
 15e:	b7 0b       	sbc	r27, r23

00000160 <__udivmodhi4_ep>:
 160:	88 1f       	adc	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	5a 95       	dec	r21
 166:	a9 f7       	brne	.-22     	; 0x152 <__udivmodhi4_loop>
 168:	80 95       	com	r24
 16a:	90 95       	com	r25
 16c:	bc 01       	movw	r22, r24
 16e:	cd 01       	movw	r24, r26
 170:	08 95       	ret

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
