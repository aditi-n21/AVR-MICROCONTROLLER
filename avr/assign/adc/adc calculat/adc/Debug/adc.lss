
adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000274  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000274  000002e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00000a48  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008aa  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ec  00000000  00000000  00001392  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000489  00000000  00000000  0000157e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00001a08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000153  00000000  00000000  00001afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002ef  00000000  00000000  00001c4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e7       	ldi	r30, 0x74	; 116
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 11 01 	call	0x222	; 0x222 <main>
  8a:	0c 94 38 01 	jmp	0x270	; 0x270 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:
	//	}		
	}
}		
void ADC_init(void)		// Initialization of ADC
{
	ADMUX|=(1<<REFS0)|(1<<REFS1);	// AVcc with external capacitor at AREF
  92:	87 b1       	in	r24, 0x07	; 7
  94:	80 6c       	ori	r24, 0xC0	; 192
  96:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);	
  98:	86 b1       	in	r24, 0x06	; 6
  9a:	87 68       	ori	r24, 0x87	; 135
  9c:	86 b9       	out	0x06, r24	; 6
						// Enable ADC and set Prescaler division factor as 128
}
  9e:	08 95       	ret

000000a0 <ADC_read>:
 
unsigned int ADC_read(unsigned char ch)
{
	ch= ch & 0b00000111;		// channel must be b/w 0 to 7
	ADMUX |= ch;				// selecting channel
  a0:	97 b1       	in	r25, 0x07	; 7
						// Enable ADC and set Prescaler division factor as 128
}
 
unsigned int ADC_read(unsigned char ch)
{
	ch= ch & 0b00000111;		// channel must be b/w 0 to 7
  a2:	87 70       	andi	r24, 0x07	; 7
	ADMUX |= ch;				// selecting channel
  a4:	98 2b       	or	r25, r24
  a6:	97 b9       	out	0x07, r25	; 7
 
	ADCSRA|=(1<<ADSC);			// start conversion
  a8:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA & (1<<ADIF))==0);	// waiting for ADIF, conversion complete
  aa:	34 9b       	sbis	0x06, 4	; 6
  ac:	fe cf       	rjmp	.-4      	; 0xaa <ADC_read+0xa>
	ADCSRA|=(1<<ADIF);			// clearing of ADIF, it is done by writing 1 to it
  ae:	34 9a       	sbi	0x06, 4	; 6
   	   return (ADC);
  b0:	84 b1       	in	r24, 0x04	; 4
  b2:	95 b1       	in	r25, 0x05	; 5
}
  b4:	08 95       	ret

000000b6 <lcd_cmd>:
	lcd_cmd1(0x80);
	_delay_ms(10);
}
void lcd_cmd(unsigned char value)
{
	LCD=value;
  b6:	85 bb       	out	0x15, r24	; 21
	LCD&=~(1<<rs);
  b8:	a8 98       	cbi	0x15, 0	; 21
	LCD&=~(1<<rw);
  ba:	a9 98       	cbi	0x15, 1	; 21
	LCD|=(1<<en);
  bc:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	83 ec       	ldi	r24, 0xC3	; 195
  c0:	99 e0       	ldi	r25, 0x09	; 9
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_cmd+0xc>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <lcd_cmd+0x12>
  c8:	00 00       	nop
	_delay_ms(10);
	LCD&=~(1<<en);
  ca:	aa 98       	cbi	0x15, 2	; 21
  cc:	83 ec       	ldi	r24, 0xC3	; 195
  ce:	99 e0       	ldi	r25, 0x09	; 9
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_cmd+0x1a>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <lcd_cmd+0x20>
  d6:	00 00       	nop
	_delay_ms(10);
}
  d8:	08 95       	ret

000000da <lcd_cmd1>:
void lcd_cmd1(unsigned char value)
{
  da:	cf 93       	push	r28
  dc:	c8 2f       	mov	r28, r24
	unsigned char cd1;
	cd1=value & 0xf0;
	lcd_cmd(cd1);
  de:	80 7f       	andi	r24, 0xF0	; 240
  e0:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_cmd>
	cd1=(value<<4) & 0xf0;
	lcd_cmd(cd1);
  e4:	8c 2f       	mov	r24, r28
  e6:	82 95       	swap	r24
  e8:	80 7f       	andi	r24, 0xF0	; 240
  ea:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_cmd>
}
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <lcd_init>:
	}
}

void lcd_init(void)
{
	lcd_cmd1(0x02);
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	0e 94 6d 00 	call	0xda	; 0xda <lcd_cmd1>
  f8:	83 ec       	ldi	r24, 0xC3	; 195
  fa:	99 e0       	ldi	r25, 0x09	; 9
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_init+0xa>
 100:	00 c0       	rjmp	.+0      	; 0x102 <lcd_init+0x10>
 102:	00 00       	nop
	_delay_ms(10);
	lcd_cmd1(0x28);
 104:	88 e2       	ldi	r24, 0x28	; 40
 106:	0e 94 6d 00 	call	0xda	; 0xda <lcd_cmd1>
 10a:	83 ec       	ldi	r24, 0xC3	; 195
 10c:	99 e0       	ldi	r25, 0x09	; 9
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <lcd_init+0x1c>
 112:	00 c0       	rjmp	.+0      	; 0x114 <lcd_init+0x22>
 114:	00 00       	nop
	_delay_ms(10);
	lcd_cmd1(0x01);
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	0e 94 6d 00 	call	0xda	; 0xda <lcd_cmd1>
 11c:	83 ec       	ldi	r24, 0xC3	; 195
 11e:	99 e0       	ldi	r25, 0x09	; 9
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <lcd_init+0x2e>
 124:	00 c0       	rjmp	.+0      	; 0x126 <lcd_init+0x34>
 126:	00 00       	nop
	_delay_ms(10);
	lcd_cmd1(0x06);
 128:	86 e0       	ldi	r24, 0x06	; 6
 12a:	0e 94 6d 00 	call	0xda	; 0xda <lcd_cmd1>
 12e:	83 ec       	ldi	r24, 0xC3	; 195
 130:	99 e0       	ldi	r25, 0x09	; 9
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <lcd_init+0x40>
 136:	00 c0       	rjmp	.+0      	; 0x138 <lcd_init+0x46>
 138:	00 00       	nop
	_delay_ms(10);
	lcd_cmd1(0x0e);
 13a:	8e e0       	ldi	r24, 0x0E	; 14
 13c:	0e 94 6d 00 	call	0xda	; 0xda <lcd_cmd1>
 140:	83 ec       	ldi	r24, 0xC3	; 195
 142:	99 e0       	ldi	r25, 0x09	; 9
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_init+0x52>
 148:	00 c0       	rjmp	.+0      	; 0x14a <lcd_init+0x58>
 14a:	00 00       	nop
	_delay_ms(10);
	lcd_cmd1(0x80);
 14c:	80 e8       	ldi	r24, 0x80	; 128
 14e:	0e 94 6d 00 	call	0xda	; 0xda <lcd_cmd1>
 152:	83 ec       	ldi	r24, 0xC3	; 195
 154:	99 e0       	ldi	r25, 0x09	; 9
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <lcd_init+0x64>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <lcd_init+0x6a>
 15c:	00 00       	nop
	_delay_ms(10);
}
 15e:	08 95       	ret

00000160 <lcd_data>:
	lcd_cmd(cd1);
}

void lcd_data(unsigned char value)
{
	LCD=value;
 160:	85 bb       	out	0x15, r24	; 21
	LCD|=(1<<rs);
 162:	a8 9a       	sbi	0x15, 0	; 21
	LCD&=~(1<<rw);
 164:	a9 98       	cbi	0x15, 1	; 21
	LCD|=(1<<en);
 166:	aa 9a       	sbi	0x15, 2	; 21
 168:	83 ec       	ldi	r24, 0xC3	; 195
 16a:	99 e0       	ldi	r25, 0x09	; 9
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_data+0xc>
 170:	00 c0       	rjmp	.+0      	; 0x172 <lcd_data+0x12>
 172:	00 00       	nop
	_delay_ms(10);
	LCD&=~(1<<en);
 174:	aa 98       	cbi	0x15, 2	; 21
 176:	83 ec       	ldi	r24, 0xC3	; 195
 178:	99 e0       	ldi	r25, 0x09	; 9
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <lcd_data+0x1a>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <lcd_data+0x20>
 180:	00 00       	nop
	_delay_ms(10);

}
 182:	08 95       	ret

00000184 <lcd_data1>:
void lcd_data1(unsigned char value)
{
 184:	cf 93       	push	r28
 186:	c8 2f       	mov	r28, r24
	unsigned char cd1;
	cd1=value & 0xf0;
	lcd_data(cd1);
 188:	80 7f       	andi	r24, 0xF0	; 240
 18a:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_data>
	
	cd1=(value<<4) & 0xf0;
	lcd_data(cd1);
 18e:	8c 2f       	mov	r24, r28
 190:	82 95       	swap	r24
 192:	80 7f       	andi	r24, 0xF0	; 240
 194:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_data>
}
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <adc_conversion>:
   	   return (ADC);
}

/* this function is written to convert integer value to their corresponding ASCII value*/
void adc_conversion(unsigned int adc_out,unsigned char position)  
{
 19c:	cf 92       	push	r12
 19e:	df 92       	push	r13
 1a0:	ff 92       	push	r15
 1a2:	0f 93       	push	r16
 1a4:	1f 93       	push	r17
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	18 2f       	mov	r17, r24
 1ac:	d9 2f       	mov	r29, r25
 1ae:	c6 2f       	mov	r28, r22
	ADCSRA|=(1<<ADIF);			// clearing of ADIF, it is done by writing 1 to it
   	   return (ADC);
}

/* this function is written to convert integer value to their corresponding ASCII value*/
void adc_conversion(unsigned int adc_out,unsigned char position)  
 1b0:	0f 2e       	mov	r0, r31
 1b2:	fa ef       	ldi	r31, 0xFA	; 250
 1b4:	ff 2e       	mov	r15, r31
 1b6:	f0 2d       	mov	r31, r0
 1b8:	f6 0e       	add	r15, r22
	unsigned int adc_out1;
	int i=0;
	//unsigned char position=0xC3;
	for(i=0;i<=5;i++)
	{
		adc_out1=adc_out%10;
 1ba:	0f 2e       	mov	r0, r31
 1bc:	fa e0       	ldi	r31, 0x0A	; 10
 1be:	cf 2e       	mov	r12, r31
 1c0:	dd 24       	eor	r13, r13
 1c2:	f0 2d       	mov	r31, r0
 1c4:	81 2f       	mov	r24, r17
 1c6:	9d 2f       	mov	r25, r29
 1c8:	b6 01       	movw	r22, r12
 1ca:	0e 94 24 01 	call	0x248	; 0x248 <__udivmodhi4>
 1ce:	08 2f       	mov	r16, r24
		adc_out=adc_out/10;
 1d0:	16 2f       	mov	r17, r22
 1d2:	d7 2f       	mov	r29, r23
		lcd_cmd1(position);
 1d4:	8c 2f       	mov	r24, r28
 1d6:	0e 94 6d 00 	call	0xda	; 0xda <lcd_cmd1>
		lcd_data1(48+adc_out1);
 1da:	80 2f       	mov	r24, r16
 1dc:	80 5d       	subi	r24, 0xD0	; 208
 1de:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_data1>
		position--;
 1e2:	c1 50       	subi	r28, 0x01	; 1
void adc_conversion(unsigned int adc_out,unsigned char position)  
{
	unsigned int adc_out1;
	int i=0;
	//unsigned char position=0xC3;
	for(i=0;i<=5;i++)
 1e4:	cf 15       	cp	r28, r15
 1e6:	71 f7       	brne	.-36     	; 0x1c4 <adc_conversion+0x28>
		adc_out=adc_out/10;
		lcd_cmd1(position);
		lcd_data1(48+adc_out1);
		position--;
	}
}
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	1f 91       	pop	r17
 1ee:	0f 91       	pop	r16
 1f0:	ff 90       	pop	r15
 1f2:	df 90       	pop	r13
 1f4:	cf 90       	pop	r12
 1f6:	08 95       	ret

000001f8 <lcd_str>:
	cd1=(value<<4) & 0xf0;
	lcd_data(cd1);
}

void lcd_str(unsigned char *s)
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	ec 01       	movw	r28, r24
	while(*s)
 1fe:	88 81       	ld	r24, Y
 200:	88 23       	and	r24, r24
 202:	61 f0       	breq	.+24     	; 0x21c <lcd_str+0x24>
	
	cd1=(value<<4) & 0xf0;
	lcd_data(cd1);
}

void lcd_str(unsigned char *s)
 204:	21 96       	adiw	r28, 0x01	; 1
{
	while(*s)
	{
		lcd_data1(*s);
 206:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_data1>
 20a:	87 ea       	ldi	r24, 0xA7	; 167
 20c:	91 e6       	ldi	r25, 0x61	; 97
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <lcd_str+0x16>
 212:	00 c0       	rjmp	.+0      	; 0x214 <lcd_str+0x1c>
 214:	00 00       	nop
	lcd_data(cd1);
}

void lcd_str(unsigned char *s)
{
	while(*s)
 216:	89 91       	ld	r24, Y+
 218:	88 23       	and	r24, r24
 21a:	a9 f7       	brne	.-22     	; 0x206 <lcd_str+0xe>
	{
		lcd_data1(*s);
		s++;
		_delay_ms(100);
	}
}
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <main>:

int main(void)
{
   	unsigned int value;
	   unsigned char i;
	DDRC=0xFF;
 222:	8f ef       	ldi	r24, 0xFF	; 255
 224:	84 bb       	out	0x14, r24	; 20
	DDRD=0x07;
 226:	87 e0       	ldi	r24, 0x07	; 7
 228:	81 bb       	out	0x11, r24	; 17
	
	lcd_init();
 22a:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_init>
	ADC_init();	// Initialization of ADC
 22e:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>
	lcd_str("ADC OUTPUT");
 232:	80 e6       	ldi	r24, 0x60	; 96
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_str>
		}
		for(i=0;i<24;i++)
		{
					
		lcdcmd(0x18);*/
		value=ADC_read(2);
 23a:	82 e0       	ldi	r24, 0x02	; 2
 23c:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC_read>
		adc_conversion(value,0xc8);
 240:	68 ec       	ldi	r22, 0xC8	; 200
 242:	0e 94 ce 00 	call	0x19c	; 0x19c <adc_conversion>
 246:	f9 cf       	rjmp	.-14     	; 0x23a <main+0x18>

00000248 <__udivmodhi4>:
 248:	aa 1b       	sub	r26, r26
 24a:	bb 1b       	sub	r27, r27
 24c:	51 e1       	ldi	r21, 0x11	; 17
 24e:	07 c0       	rjmp	.+14     	; 0x25e <__udivmodhi4_ep>

00000250 <__udivmodhi4_loop>:
 250:	aa 1f       	adc	r26, r26
 252:	bb 1f       	adc	r27, r27
 254:	a6 17       	cp	r26, r22
 256:	b7 07       	cpc	r27, r23
 258:	10 f0       	brcs	.+4      	; 0x25e <__udivmodhi4_ep>
 25a:	a6 1b       	sub	r26, r22
 25c:	b7 0b       	sbc	r27, r23

0000025e <__udivmodhi4_ep>:
 25e:	88 1f       	adc	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	5a 95       	dec	r21
 264:	a9 f7       	brne	.-22     	; 0x250 <__udivmodhi4_loop>
 266:	80 95       	com	r24
 268:	90 95       	com	r25
 26a:	bc 01       	movw	r22, r24
 26c:	cd 01       	movw	r24, r26
 26e:	08 95       	ret

00000270 <_exit>:
 270:	f8 94       	cli

00000272 <__stop_program>:
 272:	ff cf       	rjmp	.-2      	; 0x272 <__stop_program>
