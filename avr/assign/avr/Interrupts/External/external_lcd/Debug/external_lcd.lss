
external_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000252  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000252  000002e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006a  0080006a  000002f0  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000009bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000a48  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000617  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001eb  00000000  00000000  000010ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000425  00000000  00000000  000012ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001710  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000014a  00000000  00000000  000017ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e8  00000000  00000000  00001936  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e5       	ldi	r30, 0x52	; 82
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 03 01 	call	0x206	; 0x206 <main>
  8a:	0c 94 27 01 	jmp	0x24e	; 0x24e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_interrupts>:
void display(void);
unsigned int pulse;

void init_interrupts()
{
	cli();
  92:	f8 94       	cli
	GICR=(1<<INT1);
  94:	80 e8       	ldi	r24, 0x80	; 128
  96:	8b bf       	out	0x3b, r24	; 59
	MCUCR=(3<<ISC10);
  98:	8c e0       	ldi	r24, 0x0C	; 12
  9a:	85 bf       	out	0x35, r24	; 53
	sei();
  9c:	78 94       	sei
}
  9e:	08 95       	ret

000000a0 <__vector_2>:
					lcdcmd(0xc7);
					lcddata(d0);
					lcdcmd(0xcc);
}
ISR(INT1_vect)
{
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	8f 93       	push	r24
  ac:	9f 93       	push	r25
	//PORTA=~PORTA;
	pulse++;
  ae:	80 91 6a 00 	lds	r24, 0x006A
  b2:	90 91 6b 00 	lds	r25, 0x006B
  b6:	01 96       	adiw	r24, 0x01	; 1
  b8:	90 93 6b 00 	sts	0x006B, r25
  bc:	80 93 6a 00 	sts	0x006A, r24
//	_delay_ms(100);
}
  c0:	9f 91       	pop	r25
  c2:	8f 91       	pop	r24
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <lcdcmd>:
	lcdcmd(0x82);
}

void lcdcmd(unsigned char cmdout)
{
	lcd=cmdout;
  ce:	88 bb       	out	0x18, r24	; 24
	PORTD=(0<<rs)|(0<<rw)|(1<<en);
  d0:	84 e0       	ldi	r24, 0x04	; 4
  d2:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	81 ee       	ldi	r24, 0xE1	; 225
  d6:	94 e0       	ldi	r25, 0x04	; 4
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcdcmd+0xa>
  dc:	00 c0       	rjmp	.+0      	; 0xde <lcdcmd+0x10>
  de:	00 00       	nop
	_delay_ms(5);
	PORTD=(0<<rs)|(0<<rw)|(0<<en);
  e0:	12 ba       	out	0x12, r1	; 18
	
}
  e2:	08 95       	ret

000000e4 <lcd_init>:
    
}

void lcd_init()	 		// function for LCD initialization
{
	lcdcmd(0x38);
  e4:	88 e3       	ldi	r24, 0x38	; 56
  e6:	0e 94 67 00 	call	0xce	; 0xce <lcdcmd>
	lcdcmd(0x0C);
  ea:	8c e0       	ldi	r24, 0x0C	; 12
  ec:	0e 94 67 00 	call	0xce	; 0xce <lcdcmd>
	lcdcmd(0x01);
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	0e 94 67 00 	call	0xce	; 0xce <lcdcmd>
	lcdcmd(0x06);
  f6:	86 e0       	ldi	r24, 0x06	; 6
  f8:	0e 94 67 00 	call	0xce	; 0xce <lcdcmd>
	lcdcmd(0x82);
  fc:	82 e8       	ldi	r24, 0x82	; 130
  fe:	0e 94 67 00 	call	0xce	; 0xce <lcdcmd>
}
 102:	08 95       	ret

00000104 <lcddata>:
}


void lcddata(unsigned char dataout)
{
	lcd=dataout;
 104:	88 bb       	out	0x18, r24	; 24
	PORTD=(1<<rs)|(0<<rw)|(1<<en);
 106:	85 e0       	ldi	r24, 0x05	; 5
 108:	82 bb       	out	0x12, r24	; 18
 10a:	81 ee       	ldi	r24, 0xE1	; 225
 10c:	94 e0       	ldi	r25, 0x04	; 4
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <lcddata+0xa>
 112:	00 c0       	rjmp	.+0      	; 0x114 <lcddata+0x10>
 114:	00 00       	nop
	_delay_ms(5);
	PORTD=(1<<rs)|(0<<rw)|(0<<en);
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	82 bb       	out	0x12, r24	; 18
}
 11a:	08 95       	ret

0000011c <display>:
	GICR=(1<<INT1);
	MCUCR=(3<<ISC10);
	sei();
}
void display(void)
{
 11c:	ef 92       	push	r14
 11e:	ff 92       	push	r15
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
	unsigned int d0,d1,d2,d3,d4;
	d0=(pulse/10000)+48;
 128:	00 91 6a 00 	lds	r16, 0x006A
 12c:	10 91 6b 00 	lds	r17, 0x006B
	d1=(pulse/1000)%10+48;
	d2=(pulse/100)%10+48;
	d3=(pulse/10)%10+48;
	d4=(pulse%10)+48;
	lcdcmd(0xcb);
 130:	8b ec       	ldi	r24, 0xCB	; 203
 132:	0e 94 67 00 	call	0xce	; 0xce <lcdcmd>
	unsigned int d0,d1,d2,d3,d4;
	d0=(pulse/10000)+48;
	d1=(pulse/1000)%10+48;
	d2=(pulse/100)%10+48;
	d3=(pulse/10)%10+48;
	d4=(pulse%10)+48;
 136:	ca e0       	ldi	r28, 0x0A	; 10
 138:	d0 e0       	ldi	r29, 0x00	; 0
 13a:	c8 01       	movw	r24, r16
 13c:	be 01       	movw	r22, r28
 13e:	0e 94 13 01 	call	0x226	; 0x226 <__udivmodhi4>
 142:	7b 01       	movw	r14, r22
	lcdcmd(0xcb);
	lcddata(d4);
 144:	80 5d       	subi	r24, 0xD0	; 208
 146:	0e 94 82 00 	call	0x104	; 0x104 <lcddata>
		lcdcmd(0xca);
 14a:	8a ec       	ldi	r24, 0xCA	; 202
 14c:	0e 94 67 00 	call	0xce	; 0xce <lcdcmd>
{
	unsigned int d0,d1,d2,d3,d4;
	d0=(pulse/10000)+48;
	d1=(pulse/1000)%10+48;
	d2=(pulse/100)%10+48;
	d3=(pulse/10)%10+48;
 150:	c7 01       	movw	r24, r14
 152:	be 01       	movw	r22, r28
 154:	0e 94 13 01 	call	0x226	; 0x226 <__udivmodhi4>
	d4=(pulse%10)+48;
	lcdcmd(0xcb);
	lcddata(d4);
		lcdcmd(0xca);
		lcddata(d3);
 158:	80 5d       	subi	r24, 0xD0	; 208
 15a:	0e 94 82 00 	call	0x104	; 0x104 <lcddata>
			lcdcmd(0xc9);
 15e:	89 ec       	ldi	r24, 0xC9	; 201
 160:	0e 94 67 00 	call	0xce	; 0xce <lcdcmd>
void display(void)
{
	unsigned int d0,d1,d2,d3,d4;
	d0=(pulse/10000)+48;
	d1=(pulse/1000)%10+48;
	d2=(pulse/100)%10+48;
 164:	c8 01       	movw	r24, r16
 166:	64 e6       	ldi	r22, 0x64	; 100
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	0e 94 13 01 	call	0x226	; 0x226 <__udivmodhi4>
 16e:	cb 01       	movw	r24, r22
 170:	be 01       	movw	r22, r28
 172:	0e 94 13 01 	call	0x226	; 0x226 <__udivmodhi4>
	lcdcmd(0xcb);
	lcddata(d4);
		lcdcmd(0xca);
		lcddata(d3);
			lcdcmd(0xc9);
			lcddata(d2);
 176:	80 5d       	subi	r24, 0xD0	; 208
 178:	0e 94 82 00 	call	0x104	; 0x104 <lcddata>
				lcdcmd(0xc8);
 17c:	88 ec       	ldi	r24, 0xC8	; 200
 17e:	0e 94 67 00 	call	0xce	; 0xce <lcdcmd>
}
void display(void)
{
	unsigned int d0,d1,d2,d3,d4;
	d0=(pulse/10000)+48;
	d1=(pulse/1000)%10+48;
 182:	c8 01       	movw	r24, r16
 184:	68 ee       	ldi	r22, 0xE8	; 232
 186:	73 e0       	ldi	r23, 0x03	; 3
 188:	0e 94 13 01 	call	0x226	; 0x226 <__udivmodhi4>
 18c:	cb 01       	movw	r24, r22
 18e:	be 01       	movw	r22, r28
 190:	0e 94 13 01 	call	0x226	; 0x226 <__udivmodhi4>
		lcdcmd(0xca);
		lcddata(d3);
			lcdcmd(0xc9);
			lcddata(d2);
				lcdcmd(0xc8);
				lcddata(d1);
 194:	80 5d       	subi	r24, 0xD0	; 208
 196:	0e 94 82 00 	call	0x104	; 0x104 <lcddata>
					lcdcmd(0xc7);
 19a:	87 ec       	ldi	r24, 0xC7	; 199
 19c:	0e 94 67 00 	call	0xce	; 0xce <lcdcmd>
	sei();
}
void display(void)
{
	unsigned int d0,d1,d2,d3,d4;
	d0=(pulse/10000)+48;
 1a0:	c8 01       	movw	r24, r16
 1a2:	60 e1       	ldi	r22, 0x10	; 16
 1a4:	77 e2       	ldi	r23, 0x27	; 39
 1a6:	0e 94 13 01 	call	0x226	; 0x226 <__udivmodhi4>
			lcdcmd(0xc9);
			lcddata(d2);
				lcdcmd(0xc8);
				lcddata(d1);
					lcdcmd(0xc7);
					lcddata(d0);
 1aa:	86 2f       	mov	r24, r22
 1ac:	80 5d       	subi	r24, 0xD0	; 208
 1ae:	0e 94 82 00 	call	0x104	; 0x104 <lcddata>
					lcdcmd(0xcc);
 1b2:	8c ec       	ldi	r24, 0xCC	; 204
 1b4:	0e 94 67 00 	call	0xce	; 0xce <lcdcmd>
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	ff 90       	pop	r15
 1c2:	ef 90       	pop	r14
 1c4:	08 95       	ret

000001c6 <lcdstr>:
	_delay_ms(5);
	PORTD=(1<<rs)|(0<<rw)|(0<<en);
}

void lcdstr(unsigned char *s)
{
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	8c 01       	movw	r16, r24
	unsigned char l,i;
	l=strlen(s);
 1d0:	e8 2f       	mov	r30, r24
 1d2:	f1 2f       	mov	r31, r17
 1d4:	df 01       	movw	r26, r30
 1d6:	0d 90       	ld	r0, X+
 1d8:	00 20       	and	r0, r0
 1da:	e9 f7       	brne	.-6      	; 0x1d6 <lcdstr+0x10>
 1dc:	11 97       	sbiw	r26, 0x01	; 1
 1de:	a8 1b       	sub	r26, r24
	for(i=0;i<l;i++)
 1e0:	69 f0       	breq	.+26     	; 0x1fc <lcdstr+0x36>
	PORTD=(1<<rs)|(0<<rw)|(1<<en);
	_delay_ms(5);
	PORTD=(1<<rs)|(0<<rw)|(0<<en);
}

void lcdstr(unsigned char *s)
 1e2:	ec 01       	movw	r28, r24
 1e4:	21 96       	adiw	r28, 0x01	; 1
 1e6:	a1 50       	subi	r26, 0x01	; 1
 1e8:	ca 0f       	add	r28, r26
 1ea:	d1 1d       	adc	r29, r1
{
	unsigned char l,i;
	l=strlen(s);
	for(i=0;i<l;i++)
	{
		lcddata(*s);
 1ec:	f8 01       	movw	r30, r16
 1ee:	81 91       	ld	r24, Z+
 1f0:	8f 01       	movw	r16, r30
 1f2:	0e 94 82 00 	call	0x104	; 0x104 <lcddata>

void lcdstr(unsigned char *s)
{
	unsigned char l,i;
	l=strlen(s);
	for(i=0;i<l;i++)
 1f6:	0c 17       	cp	r16, r28
 1f8:	1d 07       	cpc	r17, r29
 1fa:	c1 f7       	brne	.-16     	; 0x1ec <lcdstr+0x26>
	{
		lcddata(*s);
		s++;
	}
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	1f 91       	pop	r17
 202:	0f 91       	pop	r16
 204:	08 95       	ret

00000206 <main>:
	pulse++;
//	_delay_ms(100);
}
int main(void)
{
	DDRB=0xff;
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	87 bb       	out	0x17, r24	; 23
	DDRD=0x07;
 20a:	87 e0       	ldi	r24, 0x07	; 7
 20c:	81 bb       	out	0x11, r24	; 17
	PORTD|=(1<<PD3);
 20e:	93 9a       	sbi	0x12, 3	; 18
	lcd_init();
 210:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_init>
	lcdstr("OUTPUT:-");
 214:	80 e6       	ldi	r24, 0x60	; 96
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcdstr>
	//init_ports();
    while(1)
    {
		init_interrupts();
 21c:	0e 94 49 00 	call	0x92	; 0x92 <init_interrupts>
		display();
 220:	0e 94 8e 00 	call	0x11c	; 0x11c <display>
 224:	fb cf       	rjmp	.-10     	; 0x21c <main+0x16>

00000226 <__udivmodhi4>:
 226:	aa 1b       	sub	r26, r26
 228:	bb 1b       	sub	r27, r27
 22a:	51 e1       	ldi	r21, 0x11	; 17
 22c:	07 c0       	rjmp	.+14     	; 0x23c <__udivmodhi4_ep>

0000022e <__udivmodhi4_loop>:
 22e:	aa 1f       	adc	r26, r26
 230:	bb 1f       	adc	r27, r27
 232:	a6 17       	cp	r26, r22
 234:	b7 07       	cpc	r27, r23
 236:	10 f0       	brcs	.+4      	; 0x23c <__udivmodhi4_ep>
 238:	a6 1b       	sub	r26, r22
 23a:	b7 0b       	sbc	r27, r23

0000023c <__udivmodhi4_ep>:
 23c:	88 1f       	adc	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	5a 95       	dec	r21
 242:	a9 f7       	brne	.-22     	; 0x22e <__udivmodhi4_loop>
 244:	80 95       	com	r24
 246:	90 95       	com	r25
 248:	bc 01       	movw	r22, r24
 24a:	cd 01       	movw	r24, r26
 24c:	08 95       	ret

0000024e <_exit>:
 24e:	f8 94       	cli

00000250 <__stop_program>:
 250:	ff cf       	rjmp	.-2      	; 0x250 <__stop_program>
