
fast pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000178  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  0000091d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000005e  00000000  00000000  0000093d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000d5  00000000  00000000  0000099b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000061  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000016a  00000000  00000000  00000ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00000c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000ab  00000000  00000000  00000c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000001e  00000000  00000000  00000d47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_19>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 ba 00 	jmp	0x174	; 0x174 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 
void t0_pwm_init(void);
void t2_fastpwm_init(void);
 
int main()
{			
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	t0_pwm_init();	 
  74:	0e 94 40 00 	call	0x80	; 0x80 <t0_pwm_init>
	t2_fastpwm_init();
  78:	0e 94 5e 00 	call	0xbc	; 0xbc <t2_fastpwm_init>
	sei();
  7c:	78 94       	sei
	while(1);
  7e:	ff cf       	rjmp	.-2      	; 0x7e <main+0x12>

00000080 <t0_pwm_init>:
}
 
void t0_pwm_init()		// initialization for Phase Correct PWM signal using timer 0
{
  80:	df 93       	push	r29
  82:	cf 93       	push	r28
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
	// WGM0[1:0]= 01, for Phase Correct PWM mode
	// COM0[1:0]= 10, to select non inveting mode
	// CS0[2:0] =010. for prescaler=8
		 
	TCCR0=(1<<WGM00)|(2<<COM00)|(2<<CS00);
  88:	83 e5       	ldi	r24, 0x53	; 83
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	22 e6       	ldi	r18, 0x62	; 98
  8e:	fc 01       	movw	r30, r24
  90:	20 83       	st	Z, r18
	DDRB|=(1<<PB3);		// selcet OC0 as output pin
  92:	87 e3       	ldi	r24, 0x37	; 55
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	27 e3       	ldi	r18, 0x37	; 55
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	f9 01       	movw	r30, r18
  9c:	20 81       	ld	r18, Z
  9e:	28 60       	ori	r18, 0x08	; 8
  a0:	fc 01       	movw	r30, r24
  a2:	20 83       	st	Z, r18
	TIMSK|=(1<<OCIE0);	//enable Output compare interrupt
  a4:	89 e5       	ldi	r24, 0x59	; 89
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	29 e5       	ldi	r18, 0x59	; 89
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	f9 01       	movw	r30, r18
  ae:	20 81       	ld	r18, Z
  b0:	22 60       	ori	r18, 0x02	; 2
  b2:	fc 01       	movw	r30, r24
  b4:	20 83       	st	Z, r18
}
  b6:	cf 91       	pop	r28
  b8:	df 91       	pop	r29
  ba:	08 95       	ret

000000bc <t2_fastpwm_init>:
 
void t2_fastpwm_init()	// initialization for Phase Correct PWM signal using timer 2
{		
  bc:	df 93       	push	r29
  be:	cf 93       	push	r28
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
	// WGM2[1:0]= 11, for Fast PWM mode
	// COM2[1:0]= 10, to select non inveting mode
	// CS2[2:0] =010. for prescaler=8
 
	TCCR2=(1<<WGM20)|(1<<WGM21)|(2<<COM20)|(2<<CS20);
  c4:	85 e4       	ldi	r24, 0x45	; 69
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	2a e6       	ldi	r18, 0x6A	; 106
  ca:	fc 01       	movw	r30, r24
  cc:	20 83       	st	Z, r18
	DDRD|=(1<<PD7);		// selcet OC2 as output pin
  ce:	81 e3       	ldi	r24, 0x31	; 49
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	21 e3       	ldi	r18, 0x31	; 49
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	f9 01       	movw	r30, r18
  d8:	20 81       	ld	r18, Z
  da:	20 68       	ori	r18, 0x80	; 128
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
	TIMSK|=(1<<OCIE2);	//enable Output compare interrupt
  e0:	89 e5       	ldi	r24, 0x59	; 89
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	29 e5       	ldi	r18, 0x59	; 89
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	f9 01       	movw	r30, r18
  ea:	20 81       	ld	r18, Z
  ec:	20 68       	ori	r18, 0x80	; 128
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
}
  f2:	cf 91       	pop	r28
  f4:	df 91       	pop	r29
  f6:	08 95       	ret

000000f8 <__vector_19>:
 
ISR(TIMER0_COMP_vect)			// interrupt subroutine
{
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	2f 93       	push	r18
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	ef 93       	push	r30
 10a:	ff 93       	push	r31
 10c:	df 93       	push	r29
 10e:	cf 93       	push	r28
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
	OCR0=OCR_value;			// put OCR value
 114:	8c e5       	ldi	r24, 0x5C	; 92
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	20 e8       	ldi	r18, 0x80	; 128
 11a:	fc 01       	movw	r30, r24
 11c:	20 83       	st	Z, r18
}
 11e:	cf 91       	pop	r28
 120:	df 91       	pop	r29
 122:	ff 91       	pop	r31
 124:	ef 91       	pop	r30
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	2f 91       	pop	r18
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <__vector_3>:
 
ISR(TIMER2_COMP_vect)			// interrupt subroutine
{
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	2f 93       	push	r18
 142:	8f 93       	push	r24
 144:	9f 93       	push	r25
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
 14a:	df 93       	push	r29
 14c:	cf 93       	push	r28
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
	OCR2=OCR_value;			// put OCR value
 152:	83 e4       	ldi	r24, 0x43	; 67
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	20 e8       	ldi	r18, 0x80	; 128
 158:	fc 01       	movw	r30, r24
 15a:	20 83       	st	Z, r18
}
 15c:	cf 91       	pop	r28
 15e:	df 91       	pop	r29
 160:	ff 91       	pop	r31
 162:	ef 91       	pop	r30
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	2f 91       	pop	r18
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
