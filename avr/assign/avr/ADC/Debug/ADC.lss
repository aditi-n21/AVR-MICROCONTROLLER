
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000480  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00001638  00000000  00000000  000004d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000057e  00000000  00000000  00001b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00002090  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000428  00000000  00000000  00002110  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000013c  00000000  00000000  00002538  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000036e  00000000  00000000  00002674  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000007c  00000000  00000000  000029e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000cc  00000000  00000000  00002a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000d8  00000000  00000000  00002b2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e8       	ldi	r30, 0x80	; 128
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 3e 02 	jmp	0x47c	; 0x47c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
void ADC_init(void);
unsigned int ADC_read(unsigned char);
 
// ------------------------------------------------
int main(void)
{
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	60 97       	sbiw	r28, 0x10	; 16
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	unsigned int value;
	DDRC=0xFF;
  aa:	84 e3       	ldi	r24, 0x34	; 52
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	fc 01       	movw	r30, r24
  b2:	20 83       	st	Z, r18
	ADC_init();	// Initialization of ADC
  b4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <ADC_init>
	while(1)
	{
		value=ADC_read(1);
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <ADC_read>
  be:	9a 83       	std	Y+2, r25	; 0x02
  c0:	89 83       	std	Y+1, r24	; 0x01
		PORTC=value;
  c2:	85 e3       	ldi	r24, 0x35	; 53
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	29 81       	ldd	r18, Y+1	; 0x01
  c8:	fc 01       	movw	r30, r24
  ca:	20 83       	st	Z, r18
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	aa ef       	ldi	r26, 0xFA	; 250
  d2:	b3 e4       	ldi	r27, 0x43	; 67
  d4:	8b 83       	std	Y+3, r24	; 0x03
  d6:	9c 83       	std	Y+4, r25	; 0x04
  d8:	ad 83       	std	Y+5, r26	; 0x05
  da:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
  dc:	6b 81       	ldd	r22, Y+3	; 0x03
  de:	7c 81       	ldd	r23, Y+4	; 0x04
  e0:	8d 81       	ldd	r24, Y+5	; 0x05
  e2:	9e 81       	ldd	r25, Y+6	; 0x06
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	4a e7       	ldi	r20, 0x7A	; 122
  ea:	53 e4       	ldi	r21, 0x43	; 67
  ec:	0e 94 b3 01 	call	0x366	; 0x366 <__mulsf3>
  f0:	dc 01       	movw	r26, r24
  f2:	cb 01       	movw	r24, r22
  f4:	8f 83       	std	Y+7, r24	; 0x07
  f6:	98 87       	std	Y+8, r25	; 0x08
  f8:	a9 87       	std	Y+9, r26	; 0x09
  fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
  fc:	11 e0       	ldi	r17, 0x01	; 1
  fe:	6f 81       	ldd	r22, Y+7	; 0x07
 100:	78 85       	ldd	r23, Y+8	; 0x08
 102:	89 85       	ldd	r24, Y+9	; 0x09
 104:	9a 85       	ldd	r25, Y+10	; 0x0a
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	40 e8       	ldi	r20, 0x80	; 128
 10c:	5f e3       	ldi	r21, 0x3F	; 63
 10e:	0e 94 32 01 	call	0x264	; 0x264 <__cmpsf2>
 112:	88 23       	and	r24, r24
 114:	0c f0       	brlt	.+2      	; 0x118 <main+0x86>
 116:	10 e0       	ldi	r17, 0x00	; 0
 118:	11 23       	and	r17, r17
 11a:	29 f0       	breq	.+10     	; 0x126 <main+0x94>
		__ticks = 1;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	9c 87       	std	Y+12, r25	; 0x0c
 122:	8b 87       	std	Y+11, r24	; 0x0b
 124:	46 c0       	rjmp	.+140    	; 0x1b2 <main+0x120>
	else if (__tmp > 65535)
 126:	11 e0       	ldi	r17, 0x01	; 1
 128:	6f 81       	ldd	r22, Y+7	; 0x07
 12a:	78 85       	ldd	r23, Y+8	; 0x08
 12c:	89 85       	ldd	r24, Y+9	; 0x09
 12e:	9a 85       	ldd	r25, Y+10	; 0x0a
 130:	20 e0       	ldi	r18, 0x00	; 0
 132:	3f ef       	ldi	r19, 0xFF	; 255
 134:	4f e7       	ldi	r20, 0x7F	; 127
 136:	57 e4       	ldi	r21, 0x47	; 71
 138:	0e 94 af 01 	call	0x35e	; 0x35e <__gesf2>
 13c:	18 16       	cp	r1, r24
 13e:	0c f0       	brlt	.+2      	; 0x142 <main+0xb0>
 140:	10 e0       	ldi	r17, 0x00	; 0
 142:	11 23       	and	r17, r17
 144:	61 f1       	breq	.+88     	; 0x19e <main+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 146:	6b 81       	ldd	r22, Y+3	; 0x03
 148:	7c 81       	ldd	r23, Y+4	; 0x04
 14a:	8d 81       	ldd	r24, Y+5	; 0x05
 14c:	9e 81       	ldd	r25, Y+6	; 0x06
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	40 e2       	ldi	r20, 0x20	; 32
 154:	51 e4       	ldi	r21, 0x41	; 65
 156:	0e 94 b3 01 	call	0x366	; 0x366 <__mulsf3>
 15a:	dc 01       	movw	r26, r24
 15c:	cb 01       	movw	r24, r22
 15e:	bc 01       	movw	r22, r24
 160:	cd 01       	movw	r24, r26
 162:	0e 94 36 01 	call	0x26c	; 0x26c <__fixunssfsi>
 166:	dc 01       	movw	r26, r24
 168:	cb 01       	movw	r24, r22
 16a:	9c 87       	std	Y+12, r25	; 0x0c
 16c:	8b 87       	std	Y+11, r24	; 0x0b
 16e:	12 c0       	rjmp	.+36     	; 0x194 <main+0x102>
 170:	89 e1       	ldi	r24, 0x19	; 25
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	9e 87       	std	Y+14, r25	; 0x0e
 176:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 178:	8d 85       	ldd	r24, Y+13	; 0x0d
 17a:	9e 85       	ldd	r25, Y+14	; 0x0e
 17c:	8c 01       	movw	r16, r24
 17e:	c8 01       	movw	r24, r16
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <main+0xee>
 184:	8c 01       	movw	r16, r24
 186:	1e 87       	std	Y+14, r17	; 0x0e
 188:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 18a:	8b 85       	ldd	r24, Y+11	; 0x0b
 18c:	9c 85       	ldd	r25, Y+12	; 0x0c
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	9c 87       	std	Y+12, r25	; 0x0c
 192:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 194:	8b 85       	ldd	r24, Y+11	; 0x0b
 196:	9c 85       	ldd	r25, Y+12	; 0x0c
 198:	00 97       	sbiw	r24, 0x00	; 0
 19a:	51 f7       	brne	.-44     	; 0x170 <main+0xde>
 19c:	18 c0       	rjmp	.+48     	; 0x1ce <main+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 19e:	6f 81       	ldd	r22, Y+7	; 0x07
 1a0:	78 85       	ldd	r23, Y+8	; 0x08
 1a2:	89 85       	ldd	r24, Y+9	; 0x09
 1a4:	9a 85       	ldd	r25, Y+10	; 0x0a
 1a6:	0e 94 36 01 	call	0x26c	; 0x26c <__fixunssfsi>
 1aa:	dc 01       	movw	r26, r24
 1ac:	cb 01       	movw	r24, r22
 1ae:	9c 87       	std	Y+12, r25	; 0x0c
 1b0:	8b 87       	std	Y+11, r24	; 0x0b
 1b2:	8b 85       	ldd	r24, Y+11	; 0x0b
 1b4:	9c 85       	ldd	r25, Y+12	; 0x0c
 1b6:	98 8b       	std	Y+16, r25	; 0x10
 1b8:	8f 87       	std	Y+15, r24	; 0x0f
 1ba:	8f 85       	ldd	r24, Y+15	; 0x0f
 1bc:	98 89       	ldd	r25, Y+16	; 0x10
 1be:	8c 01       	movw	r16, r24
 1c0:	f8 01       	movw	r30, r16
 1c2:	31 97       	sbiw	r30, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <main+0x130>
 1c6:	8f 01       	movw	r16, r30
 1c8:	18 8b       	std	Y+16, r17	; 0x10
 1ca:	0f 87       	std	Y+15, r16	; 0x0f
		_delay_ms(500);
	} 
 1cc:	75 cf       	rjmp	.-278    	; 0xb8 <main+0x26>
 1ce:	74 cf       	rjmp	.-280    	; 0xb8 <main+0x26>

000001d0 <ADC_init>:
}
//------------------------------------------------
 
void ADC_init(void)		// Initialization of ADC
{
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	cd b7       	in	r28, 0x3d	; 61
 1d6:	de b7       	in	r29, 0x3e	; 62
	ADMUX=(1<<REFS0);	// AVcc with external capacitor at AREF
 1d8:	87 e2       	ldi	r24, 0x27	; 39
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	20 e4       	ldi	r18, 0x40	; 64
 1de:	fc 01       	movw	r30, r24
 1e0:	20 83       	st	Z, r18
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);	
 1e2:	86 e2       	ldi	r24, 0x26	; 38
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	27 e8       	ldi	r18, 0x87	; 135
 1e8:	fc 01       	movw	r30, r24
 1ea:	20 83       	st	Z, r18
						// Enable ADC and set Pre-scaler division factor as 128
}
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <ADC_read>:
 
unsigned int ADC_read(unsigned char ch)
{
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	0f 92       	push	r0
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
 1fc:	89 83       	std	Y+1, r24	; 0x01
	ch= ch & 0b00000111;		// channel must be b/w 0 to 7
 1fe:	89 81       	ldd	r24, Y+1	; 0x01
 200:	87 70       	andi	r24, 0x07	; 7
 202:	89 83       	std	Y+1, r24	; 0x01
	ADMUX |= ch;				// selecting channel
 204:	87 e2       	ldi	r24, 0x27	; 39
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	27 e2       	ldi	r18, 0x27	; 39
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	f9 01       	movw	r30, r18
 20e:	30 81       	ld	r19, Z
 210:	29 81       	ldd	r18, Y+1	; 0x01
 212:	23 2b       	or	r18, r19
 214:	fc 01       	movw	r30, r24
 216:	20 83       	st	Z, r18
 	ADCSRA|=(1<<ADSC);			// start conversion
 218:	86 e2       	ldi	r24, 0x26	; 38
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	26 e2       	ldi	r18, 0x26	; 38
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	f9 01       	movw	r30, r18
 222:	20 81       	ld	r18, Z
 224:	20 64       	ori	r18, 0x40	; 64
 226:	fc 01       	movw	r30, r24
 228:	20 83       	st	Z, r18
	while(!(ADCSRA & (1<<ADIF)));	// waiting for ADIF, conversion complete
 22a:	00 00       	nop
 22c:	86 e2       	ldi	r24, 0x26	; 38
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	fc 01       	movw	r30, r24
 232:	80 81       	ld	r24, Z
 234:	88 2f       	mov	r24, r24
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	80 71       	andi	r24, 0x10	; 16
 23a:	90 70       	andi	r25, 0x00	; 0
 23c:	00 97       	sbiw	r24, 0x00	; 0
 23e:	b1 f3       	breq	.-20     	; 0x22c <ADC_read+0x3a>
	ADCSRA|=(1<<ADIF);			// clearing of ADIF, it is done by writing 1 to it
 240:	86 e2       	ldi	r24, 0x26	; 38
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	26 e2       	ldi	r18, 0x26	; 38
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	f9 01       	movw	r30, r18
 24a:	20 81       	ld	r18, Z
 24c:	20 61       	ori	r18, 0x10	; 16
 24e:	fc 01       	movw	r30, r24
 250:	20 83       	st	Z, r18
 	return (ADC);
 252:	84 e2       	ldi	r24, 0x24	; 36
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	fc 01       	movw	r30, r24
 258:	80 81       	ld	r24, Z
 25a:	91 81       	ldd	r25, Z+1	; 0x01
}
 25c:	0f 90       	pop	r0
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <__cmpsf2>:
 264:	2f d0       	rcall	.+94     	; 0x2c4 <__fp_cmp>
 266:	08 f4       	brcc	.+2      	; 0x26a <__cmpsf2+0x6>
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	08 95       	ret

0000026c <__fixunssfsi>:
 26c:	57 d0       	rcall	.+174    	; 0x31c <__fp_splitA>
 26e:	88 f0       	brcs	.+34     	; 0x292 <__fixunssfsi+0x26>
 270:	9f 57       	subi	r25, 0x7F	; 127
 272:	90 f0       	brcs	.+36     	; 0x298 <__fixunssfsi+0x2c>
 274:	b9 2f       	mov	r27, r25
 276:	99 27       	eor	r25, r25
 278:	b7 51       	subi	r27, 0x17	; 23
 27a:	a0 f0       	brcs	.+40     	; 0x2a4 <__fixunssfsi+0x38>
 27c:	d1 f0       	breq	.+52     	; 0x2b2 <__fixunssfsi+0x46>
 27e:	66 0f       	add	r22, r22
 280:	77 1f       	adc	r23, r23
 282:	88 1f       	adc	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	1a f0       	brmi	.+6      	; 0x28e <__fixunssfsi+0x22>
 288:	ba 95       	dec	r27
 28a:	c9 f7       	brne	.-14     	; 0x27e <__fixunssfsi+0x12>
 28c:	12 c0       	rjmp	.+36     	; 0x2b2 <__fixunssfsi+0x46>
 28e:	b1 30       	cpi	r27, 0x01	; 1
 290:	81 f0       	breq	.+32     	; 0x2b2 <__fixunssfsi+0x46>
 292:	5e d0       	rcall	.+188    	; 0x350 <__fp_zero>
 294:	b1 e0       	ldi	r27, 0x01	; 1
 296:	08 95       	ret
 298:	5b c0       	rjmp	.+182    	; 0x350 <__fp_zero>
 29a:	67 2f       	mov	r22, r23
 29c:	78 2f       	mov	r23, r24
 29e:	88 27       	eor	r24, r24
 2a0:	b8 5f       	subi	r27, 0xF8	; 248
 2a2:	39 f0       	breq	.+14     	; 0x2b2 <__fixunssfsi+0x46>
 2a4:	b9 3f       	cpi	r27, 0xF9	; 249
 2a6:	cc f3       	brlt	.-14     	; 0x29a <__fixunssfsi+0x2e>
 2a8:	86 95       	lsr	r24
 2aa:	77 95       	ror	r23
 2ac:	67 95       	ror	r22
 2ae:	b3 95       	inc	r27
 2b0:	d9 f7       	brne	.-10     	; 0x2a8 <__fixunssfsi+0x3c>
 2b2:	3e f4       	brtc	.+14     	; 0x2c2 <__fixunssfsi+0x56>
 2b4:	90 95       	com	r25
 2b6:	80 95       	com	r24
 2b8:	70 95       	com	r23
 2ba:	61 95       	neg	r22
 2bc:	7f 4f       	sbci	r23, 0xFF	; 255
 2be:	8f 4f       	sbci	r24, 0xFF	; 255
 2c0:	9f 4f       	sbci	r25, 0xFF	; 255
 2c2:	08 95       	ret

000002c4 <__fp_cmp>:
 2c4:	99 0f       	add	r25, r25
 2c6:	00 08       	sbc	r0, r0
 2c8:	55 0f       	add	r21, r21
 2ca:	aa 0b       	sbc	r26, r26
 2cc:	e0 e8       	ldi	r30, 0x80	; 128
 2ce:	fe ef       	ldi	r31, 0xFE	; 254
 2d0:	16 16       	cp	r1, r22
 2d2:	17 06       	cpc	r1, r23
 2d4:	e8 07       	cpc	r30, r24
 2d6:	f9 07       	cpc	r31, r25
 2d8:	c0 f0       	brcs	.+48     	; 0x30a <__fp_cmp+0x46>
 2da:	12 16       	cp	r1, r18
 2dc:	13 06       	cpc	r1, r19
 2de:	e4 07       	cpc	r30, r20
 2e0:	f5 07       	cpc	r31, r21
 2e2:	98 f0       	brcs	.+38     	; 0x30a <__fp_cmp+0x46>
 2e4:	62 1b       	sub	r22, r18
 2e6:	73 0b       	sbc	r23, r19
 2e8:	84 0b       	sbc	r24, r20
 2ea:	95 0b       	sbc	r25, r21
 2ec:	39 f4       	brne	.+14     	; 0x2fc <__fp_cmp+0x38>
 2ee:	0a 26       	eor	r0, r26
 2f0:	61 f0       	breq	.+24     	; 0x30a <__fp_cmp+0x46>
 2f2:	23 2b       	or	r18, r19
 2f4:	24 2b       	or	r18, r20
 2f6:	25 2b       	or	r18, r21
 2f8:	21 f4       	brne	.+8      	; 0x302 <__fp_cmp+0x3e>
 2fa:	08 95       	ret
 2fc:	0a 26       	eor	r0, r26
 2fe:	09 f4       	brne	.+2      	; 0x302 <__fp_cmp+0x3e>
 300:	a1 40       	sbci	r26, 0x01	; 1
 302:	a6 95       	lsr	r26
 304:	8f ef       	ldi	r24, 0xFF	; 255
 306:	81 1d       	adc	r24, r1
 308:	81 1d       	adc	r24, r1
 30a:	08 95       	ret

0000030c <__fp_split3>:
 30c:	57 fd       	sbrc	r21, 7
 30e:	90 58       	subi	r25, 0x80	; 128
 310:	44 0f       	add	r20, r20
 312:	55 1f       	adc	r21, r21
 314:	59 f0       	breq	.+22     	; 0x32c <__fp_splitA+0x10>
 316:	5f 3f       	cpi	r21, 0xFF	; 255
 318:	71 f0       	breq	.+28     	; 0x336 <__fp_splitA+0x1a>
 31a:	47 95       	ror	r20

0000031c <__fp_splitA>:
 31c:	88 0f       	add	r24, r24
 31e:	97 fb       	bst	r25, 7
 320:	99 1f       	adc	r25, r25
 322:	61 f0       	breq	.+24     	; 0x33c <__fp_splitA+0x20>
 324:	9f 3f       	cpi	r25, 0xFF	; 255
 326:	79 f0       	breq	.+30     	; 0x346 <__fp_splitA+0x2a>
 328:	87 95       	ror	r24
 32a:	08 95       	ret
 32c:	12 16       	cp	r1, r18
 32e:	13 06       	cpc	r1, r19
 330:	14 06       	cpc	r1, r20
 332:	55 1f       	adc	r21, r21
 334:	f2 cf       	rjmp	.-28     	; 0x31a <__fp_split3+0xe>
 336:	46 95       	lsr	r20
 338:	f1 df       	rcall	.-30     	; 0x31c <__fp_splitA>
 33a:	08 c0       	rjmp	.+16     	; 0x34c <__fp_splitA+0x30>
 33c:	16 16       	cp	r1, r22
 33e:	17 06       	cpc	r1, r23
 340:	18 06       	cpc	r1, r24
 342:	99 1f       	adc	r25, r25
 344:	f1 cf       	rjmp	.-30     	; 0x328 <__fp_splitA+0xc>
 346:	86 95       	lsr	r24
 348:	71 05       	cpc	r23, r1
 34a:	61 05       	cpc	r22, r1
 34c:	08 94       	sec
 34e:	08 95       	ret

00000350 <__fp_zero>:
 350:	e8 94       	clt

00000352 <__fp_szero>:
 352:	bb 27       	eor	r27, r27
 354:	66 27       	eor	r22, r22
 356:	77 27       	eor	r23, r23
 358:	cb 01       	movw	r24, r22
 35a:	97 f9       	bld	r25, 7
 35c:	08 95       	ret

0000035e <__gesf2>:
 35e:	b2 df       	rcall	.-156    	; 0x2c4 <__fp_cmp>
 360:	08 f4       	brcc	.+2      	; 0x364 <__gesf2+0x6>
 362:	8f ef       	ldi	r24, 0xFF	; 255
 364:	08 95       	ret

00000366 <__mulsf3>:
 366:	0b d0       	rcall	.+22     	; 0x37e <__mulsf3x>
 368:	78 c0       	rjmp	.+240    	; 0x45a <__fp_round>
 36a:	69 d0       	rcall	.+210    	; 0x43e <__fp_pscA>
 36c:	28 f0       	brcs	.+10     	; 0x378 <__mulsf3+0x12>
 36e:	6e d0       	rcall	.+220    	; 0x44c <__fp_pscB>
 370:	18 f0       	brcs	.+6      	; 0x378 <__mulsf3+0x12>
 372:	95 23       	and	r25, r21
 374:	09 f0       	breq	.+2      	; 0x378 <__mulsf3+0x12>
 376:	5a c0       	rjmp	.+180    	; 0x42c <__fp_inf>
 378:	5f c0       	rjmp	.+190    	; 0x438 <__fp_nan>
 37a:	11 24       	eor	r1, r1
 37c:	ea cf       	rjmp	.-44     	; 0x352 <__fp_szero>

0000037e <__mulsf3x>:
 37e:	c6 df       	rcall	.-116    	; 0x30c <__fp_split3>
 380:	a0 f3       	brcs	.-24     	; 0x36a <__mulsf3+0x4>

00000382 <__mulsf3_pse>:
 382:	95 9f       	mul	r25, r21
 384:	d1 f3       	breq	.-12     	; 0x37a <__mulsf3+0x14>
 386:	95 0f       	add	r25, r21
 388:	50 e0       	ldi	r21, 0x00	; 0
 38a:	55 1f       	adc	r21, r21
 38c:	62 9f       	mul	r22, r18
 38e:	f0 01       	movw	r30, r0
 390:	72 9f       	mul	r23, r18
 392:	bb 27       	eor	r27, r27
 394:	f0 0d       	add	r31, r0
 396:	b1 1d       	adc	r27, r1
 398:	63 9f       	mul	r22, r19
 39a:	aa 27       	eor	r26, r26
 39c:	f0 0d       	add	r31, r0
 39e:	b1 1d       	adc	r27, r1
 3a0:	aa 1f       	adc	r26, r26
 3a2:	64 9f       	mul	r22, r20
 3a4:	66 27       	eor	r22, r22
 3a6:	b0 0d       	add	r27, r0
 3a8:	a1 1d       	adc	r26, r1
 3aa:	66 1f       	adc	r22, r22
 3ac:	82 9f       	mul	r24, r18
 3ae:	22 27       	eor	r18, r18
 3b0:	b0 0d       	add	r27, r0
 3b2:	a1 1d       	adc	r26, r1
 3b4:	62 1f       	adc	r22, r18
 3b6:	73 9f       	mul	r23, r19
 3b8:	b0 0d       	add	r27, r0
 3ba:	a1 1d       	adc	r26, r1
 3bc:	62 1f       	adc	r22, r18
 3be:	83 9f       	mul	r24, r19
 3c0:	a0 0d       	add	r26, r0
 3c2:	61 1d       	adc	r22, r1
 3c4:	22 1f       	adc	r18, r18
 3c6:	74 9f       	mul	r23, r20
 3c8:	33 27       	eor	r19, r19
 3ca:	a0 0d       	add	r26, r0
 3cc:	61 1d       	adc	r22, r1
 3ce:	23 1f       	adc	r18, r19
 3d0:	84 9f       	mul	r24, r20
 3d2:	60 0d       	add	r22, r0
 3d4:	21 1d       	adc	r18, r1
 3d6:	82 2f       	mov	r24, r18
 3d8:	76 2f       	mov	r23, r22
 3da:	6a 2f       	mov	r22, r26
 3dc:	11 24       	eor	r1, r1
 3de:	9f 57       	subi	r25, 0x7F	; 127
 3e0:	50 40       	sbci	r21, 0x00	; 0
 3e2:	8a f0       	brmi	.+34     	; 0x406 <__mulsf3_pse+0x84>
 3e4:	e1 f0       	breq	.+56     	; 0x41e <__mulsf3_pse+0x9c>
 3e6:	88 23       	and	r24, r24
 3e8:	4a f0       	brmi	.+18     	; 0x3fc <__mulsf3_pse+0x7a>
 3ea:	ee 0f       	add	r30, r30
 3ec:	ff 1f       	adc	r31, r31
 3ee:	bb 1f       	adc	r27, r27
 3f0:	66 1f       	adc	r22, r22
 3f2:	77 1f       	adc	r23, r23
 3f4:	88 1f       	adc	r24, r24
 3f6:	91 50       	subi	r25, 0x01	; 1
 3f8:	50 40       	sbci	r21, 0x00	; 0
 3fa:	a9 f7       	brne	.-22     	; 0x3e6 <__mulsf3_pse+0x64>
 3fc:	9e 3f       	cpi	r25, 0xFE	; 254
 3fe:	51 05       	cpc	r21, r1
 400:	70 f0       	brcs	.+28     	; 0x41e <__mulsf3_pse+0x9c>
 402:	14 c0       	rjmp	.+40     	; 0x42c <__fp_inf>
 404:	a6 cf       	rjmp	.-180    	; 0x352 <__fp_szero>
 406:	5f 3f       	cpi	r21, 0xFF	; 255
 408:	ec f3       	brlt	.-6      	; 0x404 <__mulsf3_pse+0x82>
 40a:	98 3e       	cpi	r25, 0xE8	; 232
 40c:	dc f3       	brlt	.-10     	; 0x404 <__mulsf3_pse+0x82>
 40e:	86 95       	lsr	r24
 410:	77 95       	ror	r23
 412:	67 95       	ror	r22
 414:	b7 95       	ror	r27
 416:	f7 95       	ror	r31
 418:	e7 95       	ror	r30
 41a:	9f 5f       	subi	r25, 0xFF	; 255
 41c:	c1 f7       	brne	.-16     	; 0x40e <__mulsf3_pse+0x8c>
 41e:	fe 2b       	or	r31, r30
 420:	88 0f       	add	r24, r24
 422:	91 1d       	adc	r25, r1
 424:	96 95       	lsr	r25
 426:	87 95       	ror	r24
 428:	97 f9       	bld	r25, 7
 42a:	08 95       	ret

0000042c <__fp_inf>:
 42c:	97 f9       	bld	r25, 7
 42e:	9f 67       	ori	r25, 0x7F	; 127
 430:	80 e8       	ldi	r24, 0x80	; 128
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	08 95       	ret

00000438 <__fp_nan>:
 438:	9f ef       	ldi	r25, 0xFF	; 255
 43a:	80 ec       	ldi	r24, 0xC0	; 192
 43c:	08 95       	ret

0000043e <__fp_pscA>:
 43e:	00 24       	eor	r0, r0
 440:	0a 94       	dec	r0
 442:	16 16       	cp	r1, r22
 444:	17 06       	cpc	r1, r23
 446:	18 06       	cpc	r1, r24
 448:	09 06       	cpc	r0, r25
 44a:	08 95       	ret

0000044c <__fp_pscB>:
 44c:	00 24       	eor	r0, r0
 44e:	0a 94       	dec	r0
 450:	12 16       	cp	r1, r18
 452:	13 06       	cpc	r1, r19
 454:	14 06       	cpc	r1, r20
 456:	05 06       	cpc	r0, r21
 458:	08 95       	ret

0000045a <__fp_round>:
 45a:	09 2e       	mov	r0, r25
 45c:	03 94       	inc	r0
 45e:	00 0c       	add	r0, r0
 460:	11 f4       	brne	.+4      	; 0x466 <__stack+0x7>
 462:	88 23       	and	r24, r24
 464:	52 f0       	brmi	.+20     	; 0x47a <__stack+0x1b>
 466:	bb 0f       	add	r27, r27
 468:	40 f4       	brcc	.+16     	; 0x47a <__stack+0x1b>
 46a:	bf 2b       	or	r27, r31
 46c:	11 f4       	brne	.+4      	; 0x472 <__stack+0x13>
 46e:	60 ff       	sbrs	r22, 0
 470:	04 c0       	rjmp	.+8      	; 0x47a <__stack+0x1b>
 472:	6f 5f       	subi	r22, 0xFF	; 255
 474:	7f 4f       	sbci	r23, 0xFF	; 255
 476:	8f 4f       	sbci	r24, 0xFF	; 255
 478:	9f 4f       	sbci	r25, 0xFF	; 255
 47a:	08 95       	ret

0000047c <_exit>:
 47c:	f8 94       	cli

0000047e <__stop_program>:
 47e:	ff cf       	rjmp	.-2      	; 0x47e <__stop_program>
