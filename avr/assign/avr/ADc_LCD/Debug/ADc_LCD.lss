
ADc_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001296  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00001296  0000130a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001638  00000000  00000000  00001318  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000057e  00000000  00000000  00002950  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00002ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a84  00000000  00000000  00002f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000184  00000000  00000000  000039f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005c9  00000000  00000000  00003b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  00004144  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000132  00000000  00000000  000042b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002eb  00000000  00000000  000043ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 36       	cpi	r26, 0x6C	; 108
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 49 09 	jmp	0x1292	; 0x1292 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
void lcd_data1(unsigned char);
void lcd_str(unsigned char *);
void character(void);

int main(void)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	00 d0       	rcall	.+0      	; 0x98 <main+0x6>
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
   	unsigned int value;
	   unsigned char i;
	DDRC=0xFF;
      9c:	84 e3       	ldi	r24, 0x34	; 52
      9e:	90 e0       	ldi	r25, 0x00	; 0
      a0:	2f ef       	ldi	r18, 0xFF	; 255
      a2:	fc 01       	movw	r30, r24
      a4:	20 83       	st	Z, r18
	DDRD=0x07;
      a6:	81 e3       	ldi	r24, 0x31	; 49
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	27 e0       	ldi	r18, 0x07	; 7
      ac:	fc 01       	movw	r30, r24
      ae:	20 83       	st	Z, r18
	
	lcd_init();
      b0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_init>
	ADC_init();	// Initialization of ADC
      b4:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_init>
	lcd_str("ADC OUTPUT");
      b8:	80 e6       	ldi	r24, 0x60	; 96
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	0e 94 7d 07 	call	0xefa	; 0xefa <lcd_str>
		}
		for(i=0;i<24;i++)
		{
					
		lcdcmd(0x18);*/
		value=ADC_read(0);
      c0:	80 e0       	ldi	r24, 0x00	; 0
      c2:	0e 94 84 00 	call	0x108	; 0x108 <ADC_read>
      c6:	9a 83       	std	Y+2, r25	; 0x02
      c8:	89 83       	std	Y+1, r24	; 0x01
		adc_conversion(value,0xc9);
      ca:	89 81       	ldd	r24, Y+1	; 0x01
      cc:	9a 81       	ldd	r25, Y+2	; 0x02
      ce:	69 ec       	ldi	r22, 0xC9	; 201
      d0:	0e 94 bd 00 	call	0x17a	; 0x17a <adc_conversion>
			//_delay_ms(100);
	//	}		
	}
      d4:	f5 cf       	rjmp	.-22     	; 0xc0 <main+0x2e>

000000d6 <ADC_init>:
}		
void ADC_init(void)		// Initialization of ADC
{
      d6:	cf 93       	push	r28
      d8:	df 93       	push	r29
      da:	cd b7       	in	r28, 0x3d	; 61
      dc:	de b7       	in	r29, 0x3e	; 62
	ADMUX|=(1<<REFS0)|(1<<REFS1);	// AVcc with external capacitor at AREF
      de:	87 e2       	ldi	r24, 0x27	; 39
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	27 e2       	ldi	r18, 0x27	; 39
      e4:	30 e0       	ldi	r19, 0x00	; 0
      e6:	f9 01       	movw	r30, r18
      e8:	20 81       	ld	r18, Z
      ea:	20 6c       	ori	r18, 0xC0	; 192
      ec:	fc 01       	movw	r30, r24
      ee:	20 83       	st	Z, r18
	ADCSRA|=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);	
      f0:	86 e2       	ldi	r24, 0x26	; 38
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	26 e2       	ldi	r18, 0x26	; 38
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	f9 01       	movw	r30, r18
      fa:	20 81       	ld	r18, Z
      fc:	27 68       	ori	r18, 0x87	; 135
      fe:	fc 01       	movw	r30, r24
     100:	20 83       	st	Z, r18
						// Enable ADC and set Prescaler division factor as 128
}
     102:	df 91       	pop	r29
     104:	cf 91       	pop	r28
     106:	08 95       	ret

00000108 <ADC_read>:
 
unsigned int ADC_read(unsigned char ch)
{
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	0f 92       	push	r0
     10e:	cd b7       	in	r28, 0x3d	; 61
     110:	de b7       	in	r29, 0x3e	; 62
     112:	89 83       	std	Y+1, r24	; 0x01
	ch= ch & 0b00000111;		// channel must be b/w 0 to 7
     114:	89 81       	ldd	r24, Y+1	; 0x01
     116:	87 70       	andi	r24, 0x07	; 7
     118:	89 83       	std	Y+1, r24	; 0x01
	ADMUX |= ch;				// selecting channel
     11a:	87 e2       	ldi	r24, 0x27	; 39
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	27 e2       	ldi	r18, 0x27	; 39
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	f9 01       	movw	r30, r18
     124:	30 81       	ld	r19, Z
     126:	29 81       	ldd	r18, Y+1	; 0x01
     128:	23 2b       	or	r18, r19
     12a:	fc 01       	movw	r30, r24
     12c:	20 83       	st	Z, r18
 
	ADCSRA|=(1<<ADSC);			// start conversion
     12e:	86 e2       	ldi	r24, 0x26	; 38
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	26 e2       	ldi	r18, 0x26	; 38
     134:	30 e0       	ldi	r19, 0x00	; 0
     136:	f9 01       	movw	r30, r18
     138:	20 81       	ld	r18, Z
     13a:	20 64       	ori	r18, 0x40	; 64
     13c:	fc 01       	movw	r30, r24
     13e:	20 83       	st	Z, r18
	while((ADCSRA & (1<<ADIF))==0);	// waiting for ADIF, conversion complete
     140:	00 00       	nop
     142:	86 e2       	ldi	r24, 0x26	; 38
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	fc 01       	movw	r30, r24
     148:	80 81       	ld	r24, Z
     14a:	88 2f       	mov	r24, r24
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	80 71       	andi	r24, 0x10	; 16
     150:	90 70       	andi	r25, 0x00	; 0
     152:	00 97       	sbiw	r24, 0x00	; 0
     154:	b1 f3       	breq	.-20     	; 0x142 <ADC_read+0x3a>
	ADCSRA|=(1<<ADIF);			// clearing of ADIF, it is done by writing 1 to it
     156:	86 e2       	ldi	r24, 0x26	; 38
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	26 e2       	ldi	r18, 0x26	; 38
     15c:	30 e0       	ldi	r19, 0x00	; 0
     15e:	f9 01       	movw	r30, r18
     160:	20 81       	ld	r18, Z
     162:	20 61       	ori	r18, 0x10	; 16
     164:	fc 01       	movw	r30, r24
     166:	20 83       	st	Z, r18
   	   return (ADC);
     168:	84 e2       	ldi	r24, 0x24	; 36
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	fc 01       	movw	r30, r24
     16e:	80 81       	ld	r24, Z
     170:	91 81       	ldd	r25, Z+1	; 0x01
}
     172:	0f 90       	pop	r0
     174:	df 91       	pop	r29
     176:	cf 91       	pop	r28
     178:	08 95       	ret

0000017a <adc_conversion>:

/* this function is written to convert integer value to their corresponding ASCII value*/
void adc_conversion(unsigned int adc_out,unsigned char position)  
{
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	cd b7       	in	r28, 0x3d	; 61
     180:	de b7       	in	r29, 0x3e	; 62
     182:	27 97       	sbiw	r28, 0x07	; 7
     184:	0f b6       	in	r0, 0x3f	; 63
     186:	f8 94       	cli
     188:	de bf       	out	0x3e, r29	; 62
     18a:	0f be       	out	0x3f, r0	; 63
     18c:	cd bf       	out	0x3d, r28	; 61
     18e:	9e 83       	std	Y+6, r25	; 0x06
     190:	8d 83       	std	Y+5, r24	; 0x05
     192:	6f 83       	std	Y+7, r22	; 0x07
	unsigned int adc_out1;
	int i=0;
     194:	1a 82       	std	Y+2, r1	; 0x02
     196:	19 82       	std	Y+1, r1	; 0x01
	//unsigned char position=0xC3;
	for(i=0;i<=3;i++)
     198:	1a 82       	std	Y+2, r1	; 0x02
     19a:	19 82       	std	Y+1, r1	; 0x01
     19c:	22 c0       	rjmp	.+68     	; 0x1e2 <adc_conversion+0x68>
	{
		adc_out1=adc_out%10;
     19e:	8d 81       	ldd	r24, Y+5	; 0x05
     1a0:	9e 81       	ldd	r25, Y+6	; 0x06
     1a2:	2a e0       	ldi	r18, 0x0A	; 10
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	b9 01       	movw	r22, r18
     1a8:	0e 94 35 09 	call	0x126a	; 0x126a <__udivmodhi4>
     1ac:	9c 83       	std	Y+4, r25	; 0x04
     1ae:	8b 83       	std	Y+3, r24	; 0x03
		adc_out=adc_out/10;
     1b0:	8d 81       	ldd	r24, Y+5	; 0x05
     1b2:	9e 81       	ldd	r25, Y+6	; 0x06
     1b4:	2a e0       	ldi	r18, 0x0A	; 10
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	b9 01       	movw	r22, r18
     1ba:	0e 94 35 09 	call	0x126a	; 0x126a <__udivmodhi4>
     1be:	9b 01       	movw	r18, r22
     1c0:	3e 83       	std	Y+6, r19	; 0x06
     1c2:	2d 83       	std	Y+5, r18	; 0x05
		lcd_cmd1(position);
     1c4:	8f 81       	ldd	r24, Y+7	; 0x07
     1c6:	0e 94 00 06 	call	0xc00	; 0xc00 <lcd_cmd1>
		lcd_data1(48+adc_out1);
     1ca:	8b 81       	ldd	r24, Y+3	; 0x03
     1cc:	80 5d       	subi	r24, 0xD0	; 208
     1ce:	0e 94 5f 07 	call	0xebe	; 0xebe <lcd_data1>
		position--;
     1d2:	8f 81       	ldd	r24, Y+7	; 0x07
     1d4:	81 50       	subi	r24, 0x01	; 1
     1d6:	8f 83       	std	Y+7, r24	; 0x07
void adc_conversion(unsigned int adc_out,unsigned char position)  
{
	unsigned int adc_out1;
	int i=0;
	//unsigned char position=0xC3;
	for(i=0;i<=3;i++)
     1d8:	89 81       	ldd	r24, Y+1	; 0x01
     1da:	9a 81       	ldd	r25, Y+2	; 0x02
     1dc:	01 96       	adiw	r24, 0x01	; 1
     1de:	9a 83       	std	Y+2, r25	; 0x02
     1e0:	89 83       	std	Y+1, r24	; 0x01
     1e2:	89 81       	ldd	r24, Y+1	; 0x01
     1e4:	9a 81       	ldd	r25, Y+2	; 0x02
     1e6:	84 30       	cpi	r24, 0x04	; 4
     1e8:	91 05       	cpc	r25, r1
     1ea:	cc f2       	brlt	.-78     	; 0x19e <adc_conversion+0x24>
		adc_out=adc_out/10;
		lcd_cmd1(position);
		lcd_data1(48+adc_out1);
		position--;
	}
}
     1ec:	27 96       	adiw	r28, 0x07	; 7
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	f8 94       	cli
     1f2:	de bf       	out	0x3e, r29	; 62
     1f4:	0f be       	out	0x3f, r0	; 63
     1f6:	cd bf       	out	0x3d, r28	; 61
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	08 95       	ret

000001fe <lcd_init>:

void lcd_init(void)
{
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	cd b7       	in	r28, 0x3d	; 61
     208:	de b7       	in	r29, 0x3e	; 62
     20a:	c4 55       	subi	r28, 0x54	; 84
     20c:	d0 40       	sbci	r29, 0x00	; 0
     20e:	0f b6       	in	r0, 0x3f	; 63
     210:	f8 94       	cli
     212:	de bf       	out	0x3e, r29	; 62
     214:	0f be       	out	0x3f, r0	; 63
     216:	cd bf       	out	0x3d, r28	; 61
	lcd_cmd1(0x02);
     218:	82 e0       	ldi	r24, 0x02	; 2
     21a:	0e 94 00 06 	call	0xc00	; 0xc00 <lcd_cmd1>
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	a0 e2       	ldi	r26, 0x20	; 32
     224:	b1 e4       	ldi	r27, 0x41	; 65
     226:	89 83       	std	Y+1, r24	; 0x01
     228:	9a 83       	std	Y+2, r25	; 0x02
     22a:	ab 83       	std	Y+3, r26	; 0x03
     22c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     22e:	69 81       	ldd	r22, Y+1	; 0x01
     230:	7a 81       	ldd	r23, Y+2	; 0x02
     232:	8b 81       	ldd	r24, Y+3	; 0x03
     234:	9c 81       	ldd	r25, Y+4	; 0x04
     236:	20 e0       	ldi	r18, 0x00	; 0
     238:	30 e0       	ldi	r19, 0x00	; 0
     23a:	4a e7       	ldi	r20, 0x7A	; 122
     23c:	53 e4       	ldi	r21, 0x43	; 67
     23e:	0e 94 aa 08 	call	0x1154	; 0x1154 <__mulsf3>
     242:	dc 01       	movw	r26, r24
     244:	cb 01       	movw	r24, r22
     246:	8d 83       	std	Y+5, r24	; 0x05
     248:	9e 83       	std	Y+6, r25	; 0x06
     24a:	af 83       	std	Y+7, r26	; 0x07
     24c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     24e:	11 e0       	ldi	r17, 0x01	; 1
     250:	6d 81       	ldd	r22, Y+5	; 0x05
     252:	7e 81       	ldd	r23, Y+6	; 0x06
     254:	8f 81       	ldd	r24, Y+7	; 0x07
     256:	98 85       	ldd	r25, Y+8	; 0x08
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	40 e8       	ldi	r20, 0x80	; 128
     25e:	5f e3       	ldi	r21, 0x3F	; 63
     260:	0e 94 29 08 	call	0x1052	; 0x1052 <__cmpsf2>
     264:	88 23       	and	r24, r24
     266:	0c f0       	brlt	.+2      	; 0x26a <lcd_init+0x6c>
     268:	10 e0       	ldi	r17, 0x00	; 0
     26a:	11 23       	and	r17, r17
     26c:	29 f0       	breq	.+10     	; 0x278 <lcd_init+0x7a>
		__ticks = 1;
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	9a 87       	std	Y+10, r25	; 0x0a
     274:	89 87       	std	Y+9, r24	; 0x09
     276:	46 c0       	rjmp	.+140    	; 0x304 <lcd_init+0x106>
	else if (__tmp > 65535)
     278:	11 e0       	ldi	r17, 0x01	; 1
     27a:	6d 81       	ldd	r22, Y+5	; 0x05
     27c:	7e 81       	ldd	r23, Y+6	; 0x06
     27e:	8f 81       	ldd	r24, Y+7	; 0x07
     280:	98 85       	ldd	r25, Y+8	; 0x08
     282:	20 e0       	ldi	r18, 0x00	; 0
     284:	3f ef       	ldi	r19, 0xFF	; 255
     286:	4f e7       	ldi	r20, 0x7F	; 127
     288:	57 e4       	ldi	r21, 0x47	; 71
     28a:	0e 94 a6 08 	call	0x114c	; 0x114c <__gesf2>
     28e:	18 16       	cp	r1, r24
     290:	0c f0       	brlt	.+2      	; 0x294 <lcd_init+0x96>
     292:	10 e0       	ldi	r17, 0x00	; 0
     294:	11 23       	and	r17, r17
     296:	61 f1       	breq	.+88     	; 0x2f0 <lcd_init+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     298:	69 81       	ldd	r22, Y+1	; 0x01
     29a:	7a 81       	ldd	r23, Y+2	; 0x02
     29c:	8b 81       	ldd	r24, Y+3	; 0x03
     29e:	9c 81       	ldd	r25, Y+4	; 0x04
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	40 e2       	ldi	r20, 0x20	; 32
     2a6:	51 e4       	ldi	r21, 0x41	; 65
     2a8:	0e 94 aa 08 	call	0x1154	; 0x1154 <__mulsf3>
     2ac:	dc 01       	movw	r26, r24
     2ae:	cb 01       	movw	r24, r22
     2b0:	bc 01       	movw	r22, r24
     2b2:	cd 01       	movw	r24, r26
     2b4:	0e 94 2d 08 	call	0x105a	; 0x105a <__fixunssfsi>
     2b8:	dc 01       	movw	r26, r24
     2ba:	cb 01       	movw	r24, r22
     2bc:	9a 87       	std	Y+10, r25	; 0x0a
     2be:	89 87       	std	Y+9, r24	; 0x09
     2c0:	12 c0       	rjmp	.+36     	; 0x2e6 <lcd_init+0xe8>
     2c2:	89 e1       	ldi	r24, 0x19	; 25
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	9c 87       	std	Y+12, r25	; 0x0c
     2c8:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2ca:	8b 85       	ldd	r24, Y+11	; 0x0b
     2cc:	9c 85       	ldd	r25, Y+12	; 0x0c
     2ce:	8c 01       	movw	r16, r24
     2d0:	c8 01       	movw	r24, r16
     2d2:	01 97       	sbiw	r24, 0x01	; 1
     2d4:	f1 f7       	brne	.-4      	; 0x2d2 <lcd_init+0xd4>
     2d6:	8c 01       	movw	r16, r24
     2d8:	1c 87       	std	Y+12, r17	; 0x0c
     2da:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2dc:	89 85       	ldd	r24, Y+9	; 0x09
     2de:	9a 85       	ldd	r25, Y+10	; 0x0a
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	9a 87       	std	Y+10, r25	; 0x0a
     2e4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2e6:	89 85       	ldd	r24, Y+9	; 0x09
     2e8:	9a 85       	ldd	r25, Y+10	; 0x0a
     2ea:	00 97       	sbiw	r24, 0x00	; 0
     2ec:	51 f7       	brne	.-44     	; 0x2c2 <lcd_init+0xc4>
     2ee:	17 c0       	rjmp	.+46     	; 0x31e <lcd_init+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2f0:	6d 81       	ldd	r22, Y+5	; 0x05
     2f2:	7e 81       	ldd	r23, Y+6	; 0x06
     2f4:	8f 81       	ldd	r24, Y+7	; 0x07
     2f6:	98 85       	ldd	r25, Y+8	; 0x08
     2f8:	0e 94 2d 08 	call	0x105a	; 0x105a <__fixunssfsi>
     2fc:	dc 01       	movw	r26, r24
     2fe:	cb 01       	movw	r24, r22
     300:	9a 87       	std	Y+10, r25	; 0x0a
     302:	89 87       	std	Y+9, r24	; 0x09
     304:	89 85       	ldd	r24, Y+9	; 0x09
     306:	9a 85       	ldd	r25, Y+10	; 0x0a
     308:	9e 87       	std	Y+14, r25	; 0x0e
     30a:	8d 87       	std	Y+13, r24	; 0x0d
     30c:	8d 85       	ldd	r24, Y+13	; 0x0d
     30e:	9e 85       	ldd	r25, Y+14	; 0x0e
     310:	8c 01       	movw	r16, r24
     312:	f8 01       	movw	r30, r16
     314:	31 97       	sbiw	r30, 0x01	; 1
     316:	f1 f7       	brne	.-4      	; 0x314 <lcd_init+0x116>
     318:	8f 01       	movw	r16, r30
     31a:	1e 87       	std	Y+14, r17	; 0x0e
     31c:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(10);
	lcd_cmd1(0x28);
     31e:	88 e2       	ldi	r24, 0x28	; 40
     320:	0e 94 00 06 	call	0xc00	; 0xc00 <lcd_cmd1>
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	a0 e2       	ldi	r26, 0x20	; 32
     32a:	b1 e4       	ldi	r27, 0x41	; 65
     32c:	8f 87       	std	Y+15, r24	; 0x0f
     32e:	98 8b       	std	Y+16, r25	; 0x10
     330:	a9 8b       	std	Y+17, r26	; 0x11
     332:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     334:	6f 85       	ldd	r22, Y+15	; 0x0f
     336:	78 89       	ldd	r23, Y+16	; 0x10
     338:	89 89       	ldd	r24, Y+17	; 0x11
     33a:	9a 89       	ldd	r25, Y+18	; 0x12
     33c:	20 e0       	ldi	r18, 0x00	; 0
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	4a e7       	ldi	r20, 0x7A	; 122
     342:	53 e4       	ldi	r21, 0x43	; 67
     344:	0e 94 aa 08 	call	0x1154	; 0x1154 <__mulsf3>
     348:	dc 01       	movw	r26, r24
     34a:	cb 01       	movw	r24, r22
     34c:	8b 8b       	std	Y+19, r24	; 0x13
     34e:	9c 8b       	std	Y+20, r25	; 0x14
     350:	ad 8b       	std	Y+21, r26	; 0x15
     352:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     354:	11 e0       	ldi	r17, 0x01	; 1
     356:	6b 89       	ldd	r22, Y+19	; 0x13
     358:	7c 89       	ldd	r23, Y+20	; 0x14
     35a:	8d 89       	ldd	r24, Y+21	; 0x15
     35c:	9e 89       	ldd	r25, Y+22	; 0x16
     35e:	20 e0       	ldi	r18, 0x00	; 0
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	40 e8       	ldi	r20, 0x80	; 128
     364:	5f e3       	ldi	r21, 0x3F	; 63
     366:	0e 94 29 08 	call	0x1052	; 0x1052 <__cmpsf2>
     36a:	88 23       	and	r24, r24
     36c:	0c f0       	brlt	.+2      	; 0x370 <lcd_init+0x172>
     36e:	10 e0       	ldi	r17, 0x00	; 0
     370:	11 23       	and	r17, r17
     372:	29 f0       	breq	.+10     	; 0x37e <lcd_init+0x180>
		__ticks = 1;
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	98 8f       	std	Y+24, r25	; 0x18
     37a:	8f 8b       	std	Y+23, r24	; 0x17
     37c:	46 c0       	rjmp	.+140    	; 0x40a <lcd_init+0x20c>
	else if (__tmp > 65535)
     37e:	11 e0       	ldi	r17, 0x01	; 1
     380:	6b 89       	ldd	r22, Y+19	; 0x13
     382:	7c 89       	ldd	r23, Y+20	; 0x14
     384:	8d 89       	ldd	r24, Y+21	; 0x15
     386:	9e 89       	ldd	r25, Y+22	; 0x16
     388:	20 e0       	ldi	r18, 0x00	; 0
     38a:	3f ef       	ldi	r19, 0xFF	; 255
     38c:	4f e7       	ldi	r20, 0x7F	; 127
     38e:	57 e4       	ldi	r21, 0x47	; 71
     390:	0e 94 a6 08 	call	0x114c	; 0x114c <__gesf2>
     394:	18 16       	cp	r1, r24
     396:	0c f0       	brlt	.+2      	; 0x39a <lcd_init+0x19c>
     398:	10 e0       	ldi	r17, 0x00	; 0
     39a:	11 23       	and	r17, r17
     39c:	61 f1       	breq	.+88     	; 0x3f6 <lcd_init+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     39e:	6f 85       	ldd	r22, Y+15	; 0x0f
     3a0:	78 89       	ldd	r23, Y+16	; 0x10
     3a2:	89 89       	ldd	r24, Y+17	; 0x11
     3a4:	9a 89       	ldd	r25, Y+18	; 0x12
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	40 e2       	ldi	r20, 0x20	; 32
     3ac:	51 e4       	ldi	r21, 0x41	; 65
     3ae:	0e 94 aa 08 	call	0x1154	; 0x1154 <__mulsf3>
     3b2:	dc 01       	movw	r26, r24
     3b4:	cb 01       	movw	r24, r22
     3b6:	bc 01       	movw	r22, r24
     3b8:	cd 01       	movw	r24, r26
     3ba:	0e 94 2d 08 	call	0x105a	; 0x105a <__fixunssfsi>
     3be:	dc 01       	movw	r26, r24
     3c0:	cb 01       	movw	r24, r22
     3c2:	98 8f       	std	Y+24, r25	; 0x18
     3c4:	8f 8b       	std	Y+23, r24	; 0x17
     3c6:	12 c0       	rjmp	.+36     	; 0x3ec <lcd_init+0x1ee>
     3c8:	89 e1       	ldi	r24, 0x19	; 25
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	9a 8f       	std	Y+26, r25	; 0x1a
     3ce:	89 8f       	std	Y+25, r24	; 0x19
     3d0:	89 8d       	ldd	r24, Y+25	; 0x19
     3d2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     3d4:	8c 01       	movw	r16, r24
     3d6:	c8 01       	movw	r24, r16
     3d8:	01 97       	sbiw	r24, 0x01	; 1
     3da:	f1 f7       	brne	.-4      	; 0x3d8 <lcd_init+0x1da>
     3dc:	8c 01       	movw	r16, r24
     3de:	1a 8f       	std	Y+26, r17	; 0x1a
     3e0:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3e2:	8f 89       	ldd	r24, Y+23	; 0x17
     3e4:	98 8d       	ldd	r25, Y+24	; 0x18
     3e6:	01 97       	sbiw	r24, 0x01	; 1
     3e8:	98 8f       	std	Y+24, r25	; 0x18
     3ea:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3ec:	8f 89       	ldd	r24, Y+23	; 0x17
     3ee:	98 8d       	ldd	r25, Y+24	; 0x18
     3f0:	00 97       	sbiw	r24, 0x00	; 0
     3f2:	51 f7       	brne	.-44     	; 0x3c8 <lcd_init+0x1ca>
     3f4:	17 c0       	rjmp	.+46     	; 0x424 <lcd_init+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3f6:	6b 89       	ldd	r22, Y+19	; 0x13
     3f8:	7c 89       	ldd	r23, Y+20	; 0x14
     3fa:	8d 89       	ldd	r24, Y+21	; 0x15
     3fc:	9e 89       	ldd	r25, Y+22	; 0x16
     3fe:	0e 94 2d 08 	call	0x105a	; 0x105a <__fixunssfsi>
     402:	dc 01       	movw	r26, r24
     404:	cb 01       	movw	r24, r22
     406:	98 8f       	std	Y+24, r25	; 0x18
     408:	8f 8b       	std	Y+23, r24	; 0x17
     40a:	8f 89       	ldd	r24, Y+23	; 0x17
     40c:	98 8d       	ldd	r25, Y+24	; 0x18
     40e:	9c 8f       	std	Y+28, r25	; 0x1c
     410:	8b 8f       	std	Y+27, r24	; 0x1b
     412:	8b 8d       	ldd	r24, Y+27	; 0x1b
     414:	9c 8d       	ldd	r25, Y+28	; 0x1c
     416:	8c 01       	movw	r16, r24
     418:	f8 01       	movw	r30, r16
     41a:	31 97       	sbiw	r30, 0x01	; 1
     41c:	f1 f7       	brne	.-4      	; 0x41a <lcd_init+0x21c>
     41e:	8f 01       	movw	r16, r30
     420:	1c 8f       	std	Y+28, r17	; 0x1c
     422:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(10);
	lcd_cmd1(0x01);
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	0e 94 00 06 	call	0xc00	; 0xc00 <lcd_cmd1>
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b1 e4       	ldi	r27, 0x41	; 65
     432:	8d 8f       	std	Y+29, r24	; 0x1d
     434:	9e 8f       	std	Y+30, r25	; 0x1e
     436:	af 8f       	std	Y+31, r26	; 0x1f
     438:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     43a:	6d 8d       	ldd	r22, Y+29	; 0x1d
     43c:	7e 8d       	ldd	r23, Y+30	; 0x1e
     43e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     440:	98 a1       	lds	r25, 0x48
     442:	20 e0       	ldi	r18, 0x00	; 0
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	4a e7       	ldi	r20, 0x7A	; 122
     448:	53 e4       	ldi	r21, 0x43	; 67
     44a:	0e 94 aa 08 	call	0x1154	; 0x1154 <__mulsf3>
     44e:	dc 01       	movw	r26, r24
     450:	cb 01       	movw	r24, r22
     452:	89 a3       	lds	r24, 0x59
     454:	9a a3       	lds	r25, 0x5a
     456:	ab a3       	lds	r26, 0x5b
     458:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
     45a:	11 e0       	ldi	r17, 0x01	; 1
     45c:	69 a1       	lds	r22, 0x49
     45e:	7a a1       	lds	r23, 0x4a
     460:	8b a1       	lds	r24, 0x4b
     462:	9c a1       	lds	r25, 0x4c
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	40 e8       	ldi	r20, 0x80	; 128
     46a:	5f e3       	ldi	r21, 0x3F	; 63
     46c:	0e 94 29 08 	call	0x1052	; 0x1052 <__cmpsf2>
     470:	88 23       	and	r24, r24
     472:	0c f0       	brlt	.+2      	; 0x476 <__stack+0x17>
     474:	10 e0       	ldi	r17, 0x00	; 0
     476:	11 23       	and	r17, r17
     478:	29 f0       	breq	.+10     	; 0x484 <__stack+0x25>
		__ticks = 1;
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	9e a3       	lds	r25, 0x5e
     480:	8d a3       	lds	r24, 0x5d
     482:	46 c0       	rjmp	.+140    	; 0x510 <__stack+0xb1>
	else if (__tmp > 65535)
     484:	11 e0       	ldi	r17, 0x01	; 1
     486:	69 a1       	lds	r22, 0x49
     488:	7a a1       	lds	r23, 0x4a
     48a:	8b a1       	lds	r24, 0x4b
     48c:	9c a1       	lds	r25, 0x4c
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	3f ef       	ldi	r19, 0xFF	; 255
     492:	4f e7       	ldi	r20, 0x7F	; 127
     494:	57 e4       	ldi	r21, 0x47	; 71
     496:	0e 94 a6 08 	call	0x114c	; 0x114c <__gesf2>
     49a:	18 16       	cp	r1, r24
     49c:	0c f0       	brlt	.+2      	; 0x4a0 <__stack+0x41>
     49e:	10 e0       	ldi	r17, 0x00	; 0
     4a0:	11 23       	and	r17, r17
     4a2:	61 f1       	breq	.+88     	; 0x4fc <__stack+0x9d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4a4:	6d 8d       	ldd	r22, Y+29	; 0x1d
     4a6:	7e 8d       	ldd	r23, Y+30	; 0x1e
     4a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     4aa:	98 a1       	lds	r25, 0x48
     4ac:	20 e0       	ldi	r18, 0x00	; 0
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	40 e2       	ldi	r20, 0x20	; 32
     4b2:	51 e4       	ldi	r21, 0x41	; 65
     4b4:	0e 94 aa 08 	call	0x1154	; 0x1154 <__mulsf3>
     4b8:	dc 01       	movw	r26, r24
     4ba:	cb 01       	movw	r24, r22
     4bc:	bc 01       	movw	r22, r24
     4be:	cd 01       	movw	r24, r26
     4c0:	0e 94 2d 08 	call	0x105a	; 0x105a <__fixunssfsi>
     4c4:	dc 01       	movw	r26, r24
     4c6:	cb 01       	movw	r24, r22
     4c8:	9e a3       	lds	r25, 0x5e
     4ca:	8d a3       	lds	r24, 0x5d
     4cc:	12 c0       	rjmp	.+36     	; 0x4f2 <__stack+0x93>
     4ce:	89 e1       	ldi	r24, 0x19	; 25
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	98 a7       	lds	r25, 0x78
     4d4:	8f a3       	lds	r24, 0x5f
     4d6:	8f a1       	lds	r24, 0x4f
     4d8:	98 a5       	lds	r25, 0x68
     4da:	8c 01       	movw	r16, r24
     4dc:	c8 01       	movw	r24, r16
     4de:	01 97       	sbiw	r24, 0x01	; 1
     4e0:	f1 f7       	brne	.-4      	; 0x4de <__stack+0x7f>
     4e2:	8c 01       	movw	r16, r24
     4e4:	18 a7       	lds	r17, 0x78
     4e6:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4e8:	8d a1       	lds	r24, 0x4d
     4ea:	9e a1       	lds	r25, 0x4e
     4ec:	01 97       	sbiw	r24, 0x01	; 1
     4ee:	9e a3       	lds	r25, 0x5e
     4f0:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4f2:	8d a1       	lds	r24, 0x4d
     4f4:	9e a1       	lds	r25, 0x4e
     4f6:	00 97       	sbiw	r24, 0x00	; 0
     4f8:	51 f7       	brne	.-44     	; 0x4ce <__stack+0x6f>
     4fa:	17 c0       	rjmp	.+46     	; 0x52a <__stack+0xcb>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4fc:	69 a1       	lds	r22, 0x49
     4fe:	7a a1       	lds	r23, 0x4a
     500:	8b a1       	lds	r24, 0x4b
     502:	9c a1       	lds	r25, 0x4c
     504:	0e 94 2d 08 	call	0x105a	; 0x105a <__fixunssfsi>
     508:	dc 01       	movw	r26, r24
     50a:	cb 01       	movw	r24, r22
     50c:	9e a3       	lds	r25, 0x5e
     50e:	8d a3       	lds	r24, 0x5d
     510:	8d a1       	lds	r24, 0x4d
     512:	9e a1       	lds	r25, 0x4e
     514:	9a a7       	lds	r25, 0x7a
     516:	89 a7       	lds	r24, 0x79
     518:	89 a5       	lds	r24, 0x69
     51a:	9a a5       	lds	r25, 0x6a
     51c:	8c 01       	movw	r16, r24
     51e:	f8 01       	movw	r30, r16
     520:	31 97       	sbiw	r30, 0x01	; 1
     522:	f1 f7       	brne	.-4      	; 0x520 <__stack+0xc1>
     524:	8f 01       	movw	r16, r30
     526:	1a a7       	lds	r17, 0x7a
     528:	09 a7       	lds	r16, 0x79
	_delay_ms(10);
	lcd_cmd1(0x06);
     52a:	86 e0       	ldi	r24, 0x06	; 6
     52c:	0e 94 00 06 	call	0xc00	; 0xc00 <lcd_cmd1>
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	a0 e2       	ldi	r26, 0x20	; 32
     536:	b1 e4       	ldi	r27, 0x41	; 65
     538:	8b a7       	lds	r24, 0x7b
     53a:	9c a7       	lds	r25, 0x7c
     53c:	ad a7       	lds	r26, 0x7d
     53e:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     540:	6b a5       	lds	r22, 0x6b
     542:	7c a5       	lds	r23, 0x6c
     544:	8d a5       	lds	r24, 0x6d
     546:	9e a5       	lds	r25, 0x6e
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	4a e7       	ldi	r20, 0x7A	; 122
     54e:	53 e4       	ldi	r21, 0x43	; 67
     550:	0e 94 aa 08 	call	0x1154	; 0x1154 <__mulsf3>
     554:	dc 01       	movw	r26, r24
     556:	cb 01       	movw	r24, r22
     558:	8f a7       	lds	r24, 0x7f
     55a:	98 ab       	sts	0x58, r25
     55c:	a9 ab       	sts	0x59, r26
     55e:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
     560:	11 e0       	ldi	r17, 0x01	; 1
     562:	6f a5       	lds	r22, 0x6f
     564:	78 a9       	sts	0x48, r23
     566:	89 a9       	sts	0x49, r24
     568:	9a a9       	sts	0x4a, r25
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	40 e8       	ldi	r20, 0x80	; 128
     570:	5f e3       	ldi	r21, 0x3F	; 63
     572:	0e 94 29 08 	call	0x1052	; 0x1052 <__cmpsf2>
     576:	88 23       	and	r24, r24
     578:	0c f0       	brlt	.+2      	; 0x57c <__stack+0x11d>
     57a:	10 e0       	ldi	r17, 0x00	; 0
     57c:	11 23       	and	r17, r17
     57e:	29 f0       	breq	.+10     	; 0x58a <__stack+0x12b>
		__ticks = 1;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	9c ab       	sts	0x5c, r25
     586:	8b ab       	sts	0x5b, r24
     588:	46 c0       	rjmp	.+140    	; 0x616 <__stack+0x1b7>
	else if (__tmp > 65535)
     58a:	11 e0       	ldi	r17, 0x01	; 1
     58c:	6f a5       	lds	r22, 0x6f
     58e:	78 a9       	sts	0x48, r23
     590:	89 a9       	sts	0x49, r24
     592:	9a a9       	sts	0x4a, r25
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	3f ef       	ldi	r19, 0xFF	; 255
     598:	4f e7       	ldi	r20, 0x7F	; 127
     59a:	57 e4       	ldi	r21, 0x47	; 71
     59c:	0e 94 a6 08 	call	0x114c	; 0x114c <__gesf2>
     5a0:	18 16       	cp	r1, r24
     5a2:	0c f0       	brlt	.+2      	; 0x5a6 <__stack+0x147>
     5a4:	10 e0       	ldi	r17, 0x00	; 0
     5a6:	11 23       	and	r17, r17
     5a8:	61 f1       	breq	.+88     	; 0x602 <__stack+0x1a3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5aa:	6b a5       	lds	r22, 0x6b
     5ac:	7c a5       	lds	r23, 0x6c
     5ae:	8d a5       	lds	r24, 0x6d
     5b0:	9e a5       	lds	r25, 0x6e
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	40 e2       	ldi	r20, 0x20	; 32
     5b8:	51 e4       	ldi	r21, 0x41	; 65
     5ba:	0e 94 aa 08 	call	0x1154	; 0x1154 <__mulsf3>
     5be:	dc 01       	movw	r26, r24
     5c0:	cb 01       	movw	r24, r22
     5c2:	bc 01       	movw	r22, r24
     5c4:	cd 01       	movw	r24, r26
     5c6:	0e 94 2d 08 	call	0x105a	; 0x105a <__fixunssfsi>
     5ca:	dc 01       	movw	r26, r24
     5cc:	cb 01       	movw	r24, r22
     5ce:	9c ab       	sts	0x5c, r25
     5d0:	8b ab       	sts	0x5b, r24
     5d2:	12 c0       	rjmp	.+36     	; 0x5f8 <__stack+0x199>
     5d4:	89 e1       	ldi	r24, 0x19	; 25
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	9e ab       	sts	0x5e, r25
     5da:	8d ab       	sts	0x5d, r24
     5dc:	8d a9       	sts	0x4d, r24
     5de:	9e a9       	sts	0x4e, r25
     5e0:	8c 01       	movw	r16, r24
     5e2:	c8 01       	movw	r24, r16
     5e4:	01 97       	sbiw	r24, 0x01	; 1
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <__stack+0x185>
     5e8:	8c 01       	movw	r16, r24
     5ea:	1e ab       	sts	0x5e, r17
     5ec:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5ee:	8b a9       	sts	0x4b, r24
     5f0:	9c a9       	sts	0x4c, r25
     5f2:	01 97       	sbiw	r24, 0x01	; 1
     5f4:	9c ab       	sts	0x5c, r25
     5f6:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5f8:	8b a9       	sts	0x4b, r24
     5fa:	9c a9       	sts	0x4c, r25
     5fc:	00 97       	sbiw	r24, 0x00	; 0
     5fe:	51 f7       	brne	.-44     	; 0x5d4 <__stack+0x175>
     600:	17 c0       	rjmp	.+46     	; 0x630 <__stack+0x1d1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     602:	6f a5       	lds	r22, 0x6f
     604:	78 a9       	sts	0x48, r23
     606:	89 a9       	sts	0x49, r24
     608:	9a a9       	sts	0x4a, r25
     60a:	0e 94 2d 08 	call	0x105a	; 0x105a <__fixunssfsi>
     60e:	dc 01       	movw	r26, r24
     610:	cb 01       	movw	r24, r22
     612:	9c ab       	sts	0x5c, r25
     614:	8b ab       	sts	0x5b, r24
     616:	8b a9       	sts	0x4b, r24
     618:	9c a9       	sts	0x4c, r25
     61a:	98 af       	sts	0x78, r25
     61c:	8f ab       	sts	0x5f, r24
     61e:	8f a9       	sts	0x4f, r24
     620:	98 ad       	sts	0x68, r25
     622:	8c 01       	movw	r16, r24
     624:	f8 01       	movw	r30, r16
     626:	31 97       	sbiw	r30, 0x01	; 1
     628:	f1 f7       	brne	.-4      	; 0x626 <__stack+0x1c7>
     62a:	8f 01       	movw	r16, r30
     62c:	18 af       	sts	0x78, r17
     62e:	0f ab       	sts	0x5f, r16
	_delay_ms(10);
	lcd_cmd1(0x0e);
     630:	8e e0       	ldi	r24, 0x0E	; 14
     632:	0e 94 00 06 	call	0xc00	; 0xc00 <lcd_cmd1>
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	a0 e2       	ldi	r26, 0x20	; 32
     63c:	b1 e4       	ldi	r27, 0x41	; 65
     63e:	89 af       	sts	0x79, r24
     640:	9a af       	sts	0x7a, r25
     642:	ab af       	sts	0x7b, r26
     644:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     646:	69 ad       	sts	0x69, r22
     648:	7a ad       	sts	0x6a, r23
     64a:	8b ad       	sts	0x6b, r24
     64c:	9c ad       	sts	0x6c, r25
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	4a e7       	ldi	r20, 0x7A	; 122
     654:	53 e4       	ldi	r21, 0x43	; 67
     656:	0e 94 aa 08 	call	0x1154	; 0x1154 <__mulsf3>
     65a:	dc 01       	movw	r26, r24
     65c:	cb 01       	movw	r24, r22
     65e:	9e 01       	movw	r18, r28
     660:	23 5c       	subi	r18, 0xC3	; 195
     662:	3f 4f       	sbci	r19, 0xFF	; 255
     664:	f9 01       	movw	r30, r18
     666:	80 83       	st	Z, r24
     668:	91 83       	std	Z+1, r25	; 0x01
     66a:	a2 83       	std	Z+2, r26	; 0x02
     66c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     66e:	11 e0       	ldi	r17, 0x01	; 1
     670:	ce 01       	movw	r24, r28
     672:	cd 96       	adiw	r24, 0x3d	; 61
     674:	fc 01       	movw	r30, r24
     676:	60 81       	ld	r22, Z
     678:	71 81       	ldd	r23, Z+1	; 0x01
     67a:	82 81       	ldd	r24, Z+2	; 0x02
     67c:	93 81       	ldd	r25, Z+3	; 0x03
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	40 e8       	ldi	r20, 0x80	; 128
     684:	5f e3       	ldi	r21, 0x3F	; 63
     686:	0e 94 29 08 	call	0x1052	; 0x1052 <__cmpsf2>
     68a:	88 23       	and	r24, r24
     68c:	0c f0       	brlt	.+2      	; 0x690 <__stack+0x231>
     68e:	10 e0       	ldi	r17, 0x00	; 0
     690:	11 23       	and	r17, r17
     692:	49 f0       	breq	.+18     	; 0x6a6 <__stack+0x247>
		__ticks = 1;
     694:	ce 01       	movw	r24, r28
     696:	8f 5b       	subi	r24, 0xBF	; 191
     698:	9f 4f       	sbci	r25, 0xFF	; 255
     69a:	21 e0       	ldi	r18, 0x01	; 1
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	fc 01       	movw	r30, r24
     6a0:	31 83       	std	Z+1, r19	; 0x01
     6a2:	20 83       	st	Z, r18
     6a4:	6e c0       	rjmp	.+220    	; 0x782 <__stack+0x323>
	else if (__tmp > 65535)
     6a6:	11 e0       	ldi	r17, 0x01	; 1
     6a8:	ce 01       	movw	r24, r28
     6aa:	cd 96       	adiw	r24, 0x3d	; 61
     6ac:	fc 01       	movw	r30, r24
     6ae:	60 81       	ld	r22, Z
     6b0:	71 81       	ldd	r23, Z+1	; 0x01
     6b2:	82 81       	ldd	r24, Z+2	; 0x02
     6b4:	93 81       	ldd	r25, Z+3	; 0x03
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	3f ef       	ldi	r19, 0xFF	; 255
     6ba:	4f e7       	ldi	r20, 0x7F	; 127
     6bc:	57 e4       	ldi	r21, 0x47	; 71
     6be:	0e 94 a6 08 	call	0x114c	; 0x114c <__gesf2>
     6c2:	18 16       	cp	r1, r24
     6c4:	0c f0       	brlt	.+2      	; 0x6c8 <__stack+0x269>
     6c6:	10 e0       	ldi	r17, 0x00	; 0
     6c8:	11 23       	and	r17, r17
     6ca:	09 f4       	brne	.+2      	; 0x6ce <__stack+0x26f>
     6cc:	49 c0       	rjmp	.+146    	; 0x760 <__stack+0x301>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6ce:	69 ad       	sts	0x69, r22
     6d0:	7a ad       	sts	0x6a, r23
     6d2:	8b ad       	sts	0x6b, r24
     6d4:	9c ad       	sts	0x6c, r25
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	40 e2       	ldi	r20, 0x20	; 32
     6dc:	51 e4       	ldi	r21, 0x41	; 65
     6de:	0e 94 aa 08 	call	0x1154	; 0x1154 <__mulsf3>
     6e2:	dc 01       	movw	r26, r24
     6e4:	cb 01       	movw	r24, r22
     6e6:	8e 01       	movw	r16, r28
     6e8:	0f 5b       	subi	r16, 0xBF	; 191
     6ea:	1f 4f       	sbci	r17, 0xFF	; 255
     6ec:	bc 01       	movw	r22, r24
     6ee:	cd 01       	movw	r24, r26
     6f0:	0e 94 2d 08 	call	0x105a	; 0x105a <__fixunssfsi>
     6f4:	dc 01       	movw	r26, r24
     6f6:	cb 01       	movw	r24, r22
     6f8:	f8 01       	movw	r30, r16
     6fa:	91 83       	std	Z+1, r25	; 0x01
     6fc:	80 83       	st	Z, r24
     6fe:	27 c0       	rjmp	.+78     	; 0x74e <__stack+0x2ef>
     700:	ce 01       	movw	r24, r28
     702:	8d 5b       	subi	r24, 0xBD	; 189
     704:	9f 4f       	sbci	r25, 0xFF	; 255
     706:	29 e1       	ldi	r18, 0x19	; 25
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	fc 01       	movw	r30, r24
     70c:	31 83       	std	Z+1, r19	; 0x01
     70e:	20 83       	st	Z, r18
     710:	ce 01       	movw	r24, r28
     712:	8d 5b       	subi	r24, 0xBD	; 189
     714:	9f 4f       	sbci	r25, 0xFF	; 255
     716:	fc 01       	movw	r30, r24
     718:	80 81       	ld	r24, Z
     71a:	91 81       	ldd	r25, Z+1	; 0x01
     71c:	8c 01       	movw	r16, r24
     71e:	c8 01       	movw	r24, r16
     720:	01 97       	sbiw	r24, 0x01	; 1
     722:	f1 f7       	brne	.-4      	; 0x720 <__stack+0x2c1>
     724:	8c 01       	movw	r16, r24
     726:	ce 01       	movw	r24, r28
     728:	8d 5b       	subi	r24, 0xBD	; 189
     72a:	9f 4f       	sbci	r25, 0xFF	; 255
     72c:	fc 01       	movw	r30, r24
     72e:	11 83       	std	Z+1, r17	; 0x01
     730:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     732:	ce 01       	movw	r24, r28
     734:	8f 5b       	subi	r24, 0xBF	; 191
     736:	9f 4f       	sbci	r25, 0xFF	; 255
     738:	9e 01       	movw	r18, r28
     73a:	2f 5b       	subi	r18, 0xBF	; 191
     73c:	3f 4f       	sbci	r19, 0xFF	; 255
     73e:	f9 01       	movw	r30, r18
     740:	20 81       	ld	r18, Z
     742:	31 81       	ldd	r19, Z+1	; 0x01
     744:	21 50       	subi	r18, 0x01	; 1
     746:	30 40       	sbci	r19, 0x00	; 0
     748:	fc 01       	movw	r30, r24
     74a:	31 83       	std	Z+1, r19	; 0x01
     74c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     74e:	ce 01       	movw	r24, r28
     750:	8f 5b       	subi	r24, 0xBF	; 191
     752:	9f 4f       	sbci	r25, 0xFF	; 255
     754:	fc 01       	movw	r30, r24
     756:	80 81       	ld	r24, Z
     758:	91 81       	ldd	r25, Z+1	; 0x01
     75a:	00 97       	sbiw	r24, 0x00	; 0
     75c:	89 f6       	brne	.-94     	; 0x700 <__stack+0x2a1>
     75e:	2e c0       	rjmp	.+92     	; 0x7bc <__stack+0x35d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     760:	8e 01       	movw	r16, r28
     762:	0f 5b       	subi	r16, 0xBF	; 191
     764:	1f 4f       	sbci	r17, 0xFF	; 255
     766:	ce 01       	movw	r24, r28
     768:	cd 96       	adiw	r24, 0x3d	; 61
     76a:	fc 01       	movw	r30, r24
     76c:	60 81       	ld	r22, Z
     76e:	71 81       	ldd	r23, Z+1	; 0x01
     770:	82 81       	ldd	r24, Z+2	; 0x02
     772:	93 81       	ldd	r25, Z+3	; 0x03
     774:	0e 94 2d 08 	call	0x105a	; 0x105a <__fixunssfsi>
     778:	dc 01       	movw	r26, r24
     77a:	cb 01       	movw	r24, r22
     77c:	f8 01       	movw	r30, r16
     77e:	91 83       	std	Z+1, r25	; 0x01
     780:	80 83       	st	Z, r24
     782:	ce 01       	movw	r24, r28
     784:	8b 5b       	subi	r24, 0xBB	; 187
     786:	9f 4f       	sbci	r25, 0xFF	; 255
     788:	9e 01       	movw	r18, r28
     78a:	2f 5b       	subi	r18, 0xBF	; 191
     78c:	3f 4f       	sbci	r19, 0xFF	; 255
     78e:	f9 01       	movw	r30, r18
     790:	20 81       	ld	r18, Z
     792:	31 81       	ldd	r19, Z+1	; 0x01
     794:	fc 01       	movw	r30, r24
     796:	31 83       	std	Z+1, r19	; 0x01
     798:	20 83       	st	Z, r18
     79a:	ce 01       	movw	r24, r28
     79c:	8b 5b       	subi	r24, 0xBB	; 187
     79e:	9f 4f       	sbci	r25, 0xFF	; 255
     7a0:	fc 01       	movw	r30, r24
     7a2:	80 81       	ld	r24, Z
     7a4:	91 81       	ldd	r25, Z+1	; 0x01
     7a6:	8c 01       	movw	r16, r24
     7a8:	c8 01       	movw	r24, r16
     7aa:	01 97       	sbiw	r24, 0x01	; 1
     7ac:	f1 f7       	brne	.-4      	; 0x7aa <__stack+0x34b>
     7ae:	8c 01       	movw	r16, r24
     7b0:	ce 01       	movw	r24, r28
     7b2:	8b 5b       	subi	r24, 0xBB	; 187
     7b4:	9f 4f       	sbci	r25, 0xFF	; 255
     7b6:	fc 01       	movw	r30, r24
     7b8:	11 83       	std	Z+1, r17	; 0x01
     7ba:	00 83       	st	Z, r16
	_delay_ms(10);
	lcd_cmd1(0x80);
     7bc:	80 e8       	ldi	r24, 0x80	; 128
     7be:	0e 94 00 06 	call	0xc00	; 0xc00 <lcd_cmd1>
     7c2:	9e 01       	movw	r18, r28
     7c4:	29 5b       	subi	r18, 0xB9	; 185
     7c6:	3f 4f       	sbci	r19, 0xFF	; 255
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	a0 e2       	ldi	r26, 0x20	; 32
     7ce:	b1 e4       	ldi	r27, 0x41	; 65
     7d0:	f9 01       	movw	r30, r18
     7d2:	80 83       	st	Z, r24
     7d4:	91 83       	std	Z+1, r25	; 0x01
     7d6:	a2 83       	std	Z+2, r26	; 0x02
     7d8:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     7da:	8e 01       	movw	r16, r28
     7dc:	05 5b       	subi	r16, 0xB5	; 181
     7de:	1f 4f       	sbci	r17, 0xFF	; 255
     7e0:	ce 01       	movw	r24, r28
     7e2:	89 5b       	subi	r24, 0xB9	; 185
     7e4:	9f 4f       	sbci	r25, 0xFF	; 255
     7e6:	fc 01       	movw	r30, r24
     7e8:	60 81       	ld	r22, Z
     7ea:	71 81       	ldd	r23, Z+1	; 0x01
     7ec:	82 81       	ldd	r24, Z+2	; 0x02
     7ee:	93 81       	ldd	r25, Z+3	; 0x03
     7f0:	20 e0       	ldi	r18, 0x00	; 0
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	4a e7       	ldi	r20, 0x7A	; 122
     7f6:	53 e4       	ldi	r21, 0x43	; 67
     7f8:	0e 94 aa 08 	call	0x1154	; 0x1154 <__mulsf3>
     7fc:	dc 01       	movw	r26, r24
     7fe:	cb 01       	movw	r24, r22
     800:	f8 01       	movw	r30, r16
     802:	80 83       	st	Z, r24
     804:	91 83       	std	Z+1, r25	; 0x01
     806:	a2 83       	std	Z+2, r26	; 0x02
     808:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     80a:	ce 01       	movw	r24, r28
     80c:	85 5b       	subi	r24, 0xB5	; 181
     80e:	9f 4f       	sbci	r25, 0xFF	; 255
     810:	11 e0       	ldi	r17, 0x01	; 1
     812:	fc 01       	movw	r30, r24
     814:	60 81       	ld	r22, Z
     816:	71 81       	ldd	r23, Z+1	; 0x01
     818:	82 81       	ldd	r24, Z+2	; 0x02
     81a:	93 81       	ldd	r25, Z+3	; 0x03
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	40 e8       	ldi	r20, 0x80	; 128
     822:	5f e3       	ldi	r21, 0x3F	; 63
     824:	0e 94 29 08 	call	0x1052	; 0x1052 <__cmpsf2>
     828:	88 23       	and	r24, r24
     82a:	0c f0       	brlt	.+2      	; 0x82e <__stack+0x3cf>
     82c:	10 e0       	ldi	r17, 0x00	; 0
     82e:	11 23       	and	r17, r17
     830:	49 f0       	breq	.+18     	; 0x844 <__stack+0x3e5>
		__ticks = 1;
     832:	ce 01       	movw	r24, r28
     834:	81 5b       	subi	r24, 0xB1	; 177
     836:	9f 4f       	sbci	r25, 0xFF	; 255
     838:	21 e0       	ldi	r18, 0x01	; 1
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	fc 01       	movw	r30, r24
     83e:	31 83       	std	Z+1, r19	; 0x01
     840:	20 83       	st	Z, r18
     842:	74 c0       	rjmp	.+232    	; 0x92c <__stack+0x4cd>
	else if (__tmp > 65535)
     844:	ce 01       	movw	r24, r28
     846:	85 5b       	subi	r24, 0xB5	; 181
     848:	9f 4f       	sbci	r25, 0xFF	; 255
     84a:	11 e0       	ldi	r17, 0x01	; 1
     84c:	fc 01       	movw	r30, r24
     84e:	60 81       	ld	r22, Z
     850:	71 81       	ldd	r23, Z+1	; 0x01
     852:	82 81       	ldd	r24, Z+2	; 0x02
     854:	93 81       	ldd	r25, Z+3	; 0x03
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	3f ef       	ldi	r19, 0xFF	; 255
     85a:	4f e7       	ldi	r20, 0x7F	; 127
     85c:	57 e4       	ldi	r21, 0x47	; 71
     85e:	0e 94 a6 08 	call	0x114c	; 0x114c <__gesf2>
     862:	18 16       	cp	r1, r24
     864:	0c f0       	brlt	.+2      	; 0x868 <__stack+0x409>
     866:	10 e0       	ldi	r17, 0x00	; 0
     868:	11 23       	and	r17, r17
     86a:	09 f4       	brne	.+2      	; 0x86e <__stack+0x40f>
     86c:	4d c0       	rjmp	.+154    	; 0x908 <__stack+0x4a9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     86e:	ce 01       	movw	r24, r28
     870:	89 5b       	subi	r24, 0xB9	; 185
     872:	9f 4f       	sbci	r25, 0xFF	; 255
     874:	fc 01       	movw	r30, r24
     876:	60 81       	ld	r22, Z
     878:	71 81       	ldd	r23, Z+1	; 0x01
     87a:	82 81       	ldd	r24, Z+2	; 0x02
     87c:	93 81       	ldd	r25, Z+3	; 0x03
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e2       	ldi	r20, 0x20	; 32
     884:	51 e4       	ldi	r21, 0x41	; 65
     886:	0e 94 aa 08 	call	0x1154	; 0x1154 <__mulsf3>
     88a:	dc 01       	movw	r26, r24
     88c:	cb 01       	movw	r24, r22
     88e:	8e 01       	movw	r16, r28
     890:	01 5b       	subi	r16, 0xB1	; 177
     892:	1f 4f       	sbci	r17, 0xFF	; 255
     894:	bc 01       	movw	r22, r24
     896:	cd 01       	movw	r24, r26
     898:	0e 94 2d 08 	call	0x105a	; 0x105a <__fixunssfsi>
     89c:	dc 01       	movw	r26, r24
     89e:	cb 01       	movw	r24, r22
     8a0:	f8 01       	movw	r30, r16
     8a2:	91 83       	std	Z+1, r25	; 0x01
     8a4:	80 83       	st	Z, r24
     8a6:	27 c0       	rjmp	.+78     	; 0x8f6 <__stack+0x497>
     8a8:	ce 01       	movw	r24, r28
     8aa:	8f 5a       	subi	r24, 0xAF	; 175
     8ac:	9f 4f       	sbci	r25, 0xFF	; 255
     8ae:	29 e1       	ldi	r18, 0x19	; 25
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	fc 01       	movw	r30, r24
     8b4:	31 83       	std	Z+1, r19	; 0x01
     8b6:	20 83       	st	Z, r18
     8b8:	ce 01       	movw	r24, r28
     8ba:	8f 5a       	subi	r24, 0xAF	; 175
     8bc:	9f 4f       	sbci	r25, 0xFF	; 255
     8be:	fc 01       	movw	r30, r24
     8c0:	80 81       	ld	r24, Z
     8c2:	91 81       	ldd	r25, Z+1	; 0x01
     8c4:	8c 01       	movw	r16, r24
     8c6:	c8 01       	movw	r24, r16
     8c8:	01 97       	sbiw	r24, 0x01	; 1
     8ca:	f1 f7       	brne	.-4      	; 0x8c8 <__stack+0x469>
     8cc:	8c 01       	movw	r16, r24
     8ce:	ce 01       	movw	r24, r28
     8d0:	8f 5a       	subi	r24, 0xAF	; 175
     8d2:	9f 4f       	sbci	r25, 0xFF	; 255
     8d4:	fc 01       	movw	r30, r24
     8d6:	11 83       	std	Z+1, r17	; 0x01
     8d8:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8da:	ce 01       	movw	r24, r28
     8dc:	81 5b       	subi	r24, 0xB1	; 177
     8de:	9f 4f       	sbci	r25, 0xFF	; 255
     8e0:	9e 01       	movw	r18, r28
     8e2:	21 5b       	subi	r18, 0xB1	; 177
     8e4:	3f 4f       	sbci	r19, 0xFF	; 255
     8e6:	f9 01       	movw	r30, r18
     8e8:	20 81       	ld	r18, Z
     8ea:	31 81       	ldd	r19, Z+1	; 0x01
     8ec:	21 50       	subi	r18, 0x01	; 1
     8ee:	30 40       	sbci	r19, 0x00	; 0
     8f0:	fc 01       	movw	r30, r24
     8f2:	31 83       	std	Z+1, r19	; 0x01
     8f4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8f6:	ce 01       	movw	r24, r28
     8f8:	81 5b       	subi	r24, 0xB1	; 177
     8fa:	9f 4f       	sbci	r25, 0xFF	; 255
     8fc:	fc 01       	movw	r30, r24
     8fe:	80 81       	ld	r24, Z
     900:	91 81       	ldd	r25, Z+1	; 0x01
     902:	00 97       	sbiw	r24, 0x00	; 0
     904:	89 f6       	brne	.-94     	; 0x8a8 <__stack+0x449>
     906:	2f c0       	rjmp	.+94     	; 0x966 <__stack+0x507>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     908:	8e 01       	movw	r16, r28
     90a:	01 5b       	subi	r16, 0xB1	; 177
     90c:	1f 4f       	sbci	r17, 0xFF	; 255
     90e:	ce 01       	movw	r24, r28
     910:	85 5b       	subi	r24, 0xB5	; 181
     912:	9f 4f       	sbci	r25, 0xFF	; 255
     914:	fc 01       	movw	r30, r24
     916:	60 81       	ld	r22, Z
     918:	71 81       	ldd	r23, Z+1	; 0x01
     91a:	82 81       	ldd	r24, Z+2	; 0x02
     91c:	93 81       	ldd	r25, Z+3	; 0x03
     91e:	0e 94 2d 08 	call	0x105a	; 0x105a <__fixunssfsi>
     922:	dc 01       	movw	r26, r24
     924:	cb 01       	movw	r24, r22
     926:	f8 01       	movw	r30, r16
     928:	91 83       	std	Z+1, r25	; 0x01
     92a:	80 83       	st	Z, r24
     92c:	ce 01       	movw	r24, r28
     92e:	8d 5a       	subi	r24, 0xAD	; 173
     930:	9f 4f       	sbci	r25, 0xFF	; 255
     932:	9e 01       	movw	r18, r28
     934:	21 5b       	subi	r18, 0xB1	; 177
     936:	3f 4f       	sbci	r19, 0xFF	; 255
     938:	f9 01       	movw	r30, r18
     93a:	20 81       	ld	r18, Z
     93c:	31 81       	ldd	r19, Z+1	; 0x01
     93e:	fc 01       	movw	r30, r24
     940:	31 83       	std	Z+1, r19	; 0x01
     942:	20 83       	st	Z, r18
     944:	ce 01       	movw	r24, r28
     946:	8d 5a       	subi	r24, 0xAD	; 173
     948:	9f 4f       	sbci	r25, 0xFF	; 255
     94a:	fc 01       	movw	r30, r24
     94c:	80 81       	ld	r24, Z
     94e:	91 81       	ldd	r25, Z+1	; 0x01
     950:	8c 01       	movw	r16, r24
     952:	c8 01       	movw	r24, r16
     954:	01 97       	sbiw	r24, 0x01	; 1
     956:	f1 f7       	brne	.-4      	; 0x954 <__stack+0x4f5>
     958:	8c 01       	movw	r16, r24
     95a:	ce 01       	movw	r24, r28
     95c:	8d 5a       	subi	r24, 0xAD	; 173
     95e:	9f 4f       	sbci	r25, 0xFF	; 255
     960:	fc 01       	movw	r30, r24
     962:	11 83       	std	Z+1, r17	; 0x01
     964:	00 83       	st	Z, r16
	_delay_ms(10);
}
     966:	cc 5a       	subi	r28, 0xAC	; 172
     968:	df 4f       	sbci	r29, 0xFF	; 255
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	f8 94       	cli
     96e:	de bf       	out	0x3e, r29	; 62
     970:	0f be       	out	0x3f, r0	; 63
     972:	cd bf       	out	0x3d, r28	; 61
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	1f 91       	pop	r17
     97a:	0f 91       	pop	r16
     97c:	08 95       	ret

0000097e <lcd_cmd>:
void lcd_cmd(unsigned char value)
{
     97e:	0f 93       	push	r16
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62
     98a:	6d 97       	sbiw	r28, 0x1d	; 29
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	f8 94       	cli
     990:	de bf       	out	0x3e, r29	; 62
     992:	0f be       	out	0x3f, r0	; 63
     994:	cd bf       	out	0x3d, r28	; 61
     996:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD=value;
     998:	85 e3       	ldi	r24, 0x35	; 53
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	2d 8d       	ldd	r18, Y+29	; 0x1d
     99e:	fc 01       	movw	r30, r24
     9a0:	20 83       	st	Z, r18
	LCD&=~(1<<rs);
     9a2:	85 e3       	ldi	r24, 0x35	; 53
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	25 e3       	ldi	r18, 0x35	; 53
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	f9 01       	movw	r30, r18
     9ac:	20 81       	ld	r18, Z
     9ae:	2e 7f       	andi	r18, 0xFE	; 254
     9b0:	fc 01       	movw	r30, r24
     9b2:	20 83       	st	Z, r18
	LCD&=~(1<<rw);
     9b4:	85 e3       	ldi	r24, 0x35	; 53
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	25 e3       	ldi	r18, 0x35	; 53
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	f9 01       	movw	r30, r18
     9be:	20 81       	ld	r18, Z
     9c0:	2d 7f       	andi	r18, 0xFD	; 253
     9c2:	fc 01       	movw	r30, r24
     9c4:	20 83       	st	Z, r18
	LCD|=(1<<en);
     9c6:	85 e3       	ldi	r24, 0x35	; 53
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	25 e3       	ldi	r18, 0x35	; 53
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	f9 01       	movw	r30, r18
     9d0:	20 81       	ld	r18, Z
     9d2:	24 60       	ori	r18, 0x04	; 4
     9d4:	fc 01       	movw	r30, r24
     9d6:	20 83       	st	Z, r18
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	a0 e2       	ldi	r26, 0x20	; 32
     9de:	b1 e4       	ldi	r27, 0x41	; 65
     9e0:	89 83       	std	Y+1, r24	; 0x01
     9e2:	9a 83       	std	Y+2, r25	; 0x02
     9e4:	ab 83       	std	Y+3, r26	; 0x03
     9e6:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     9e8:	69 81       	ldd	r22, Y+1	; 0x01
     9ea:	7a 81       	ldd	r23, Y+2	; 0x02
     9ec:	8b 81       	ldd	r24, Y+3	; 0x03
     9ee:	9c 81       	ldd	r25, Y+4	; 0x04
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	4a e7       	ldi	r20, 0x7A	; 122
     9f6:	53 e4       	ldi	r21, 0x43	; 67
     9f8:	0e 94 aa 08 	call	0x1154	; 0x1154 <__mulsf3>
     9fc:	dc 01       	movw	r26, r24
     9fe:	cb 01       	movw	r24, r22
     a00:	8d 83       	std	Y+5, r24	; 0x05
     a02:	9e 83       	std	Y+6, r25	; 0x06
     a04:	af 83       	std	Y+7, r26	; 0x07
     a06:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     a08:	11 e0       	ldi	r17, 0x01	; 1
     a0a:	6d 81       	ldd	r22, Y+5	; 0x05
     a0c:	7e 81       	ldd	r23, Y+6	; 0x06
     a0e:	8f 81       	ldd	r24, Y+7	; 0x07
     a10:	98 85       	ldd	r25, Y+8	; 0x08
     a12:	20 e0       	ldi	r18, 0x00	; 0
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	40 e8       	ldi	r20, 0x80	; 128
     a18:	5f e3       	ldi	r21, 0x3F	; 63
     a1a:	0e 94 29 08 	call	0x1052	; 0x1052 <__cmpsf2>
     a1e:	88 23       	and	r24, r24
     a20:	0c f0       	brlt	.+2      	; 0xa24 <lcd_cmd+0xa6>
     a22:	10 e0       	ldi	r17, 0x00	; 0
     a24:	11 23       	and	r17, r17
     a26:	29 f0       	breq	.+10     	; 0xa32 <lcd_cmd+0xb4>
		__ticks = 1;
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	9a 87       	std	Y+10, r25	; 0x0a
     a2e:	89 87       	std	Y+9, r24	; 0x09
     a30:	46 c0       	rjmp	.+140    	; 0xabe <lcd_cmd+0x140>
	else if (__tmp > 65535)
     a32:	11 e0       	ldi	r17, 0x01	; 1
     a34:	6d 81       	ldd	r22, Y+5	; 0x05
     a36:	7e 81       	ldd	r23, Y+6	; 0x06
     a38:	8f 81       	ldd	r24, Y+7	; 0x07
     a3a:	98 85       	ldd	r25, Y+8	; 0x08
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	3f ef       	ldi	r19, 0xFF	; 255
     a40:	4f e7       	ldi	r20, 0x7F	; 127
     a42:	57 e4       	ldi	r21, 0x47	; 71
     a44:	0e 94 a6 08 	call	0x114c	; 0x114c <__gesf2>
     a48:	18 16       	cp	r1, r24
     a4a:	0c f0       	brlt	.+2      	; 0xa4e <lcd_cmd+0xd0>
     a4c:	10 e0       	ldi	r17, 0x00	; 0
     a4e:	11 23       	and	r17, r17
     a50:	61 f1       	breq	.+88     	; 0xaaa <lcd_cmd+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a52:	69 81       	ldd	r22, Y+1	; 0x01
     a54:	7a 81       	ldd	r23, Y+2	; 0x02
     a56:	8b 81       	ldd	r24, Y+3	; 0x03
     a58:	9c 81       	ldd	r25, Y+4	; 0x04
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e2       	ldi	r20, 0x20	; 32
     a60:	51 e4       	ldi	r21, 0x41	; 65
     a62:	0e 94 aa 08 	call	0x1154	; 0x1154 <__mulsf3>
     a66:	dc 01       	movw	r26, r24
     a68:	cb 01       	movw	r24, r22
     a6a:	bc 01       	movw	r22, r24
     a6c:	cd 01       	movw	r24, r26
     a6e:	0e 94 2d 08 	call	0x105a	; 0x105a <__fixunssfsi>
     a72:	dc 01       	movw	r26, r24
     a74:	cb 01       	movw	r24, r22
     a76:	9a 87       	std	Y+10, r25	; 0x0a
     a78:	89 87       	std	Y+9, r24	; 0x09
     a7a:	12 c0       	rjmp	.+36     	; 0xaa0 <lcd_cmd+0x122>
     a7c:	89 e1       	ldi	r24, 0x19	; 25
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	9c 87       	std	Y+12, r25	; 0x0c
     a82:	8b 87       	std	Y+11, r24	; 0x0b
     a84:	8b 85       	ldd	r24, Y+11	; 0x0b
     a86:	9c 85       	ldd	r25, Y+12	; 0x0c
     a88:	8c 01       	movw	r16, r24
     a8a:	c8 01       	movw	r24, r16
     a8c:	01 97       	sbiw	r24, 0x01	; 1
     a8e:	f1 f7       	brne	.-4      	; 0xa8c <lcd_cmd+0x10e>
     a90:	8c 01       	movw	r16, r24
     a92:	1c 87       	std	Y+12, r17	; 0x0c
     a94:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a96:	89 85       	ldd	r24, Y+9	; 0x09
     a98:	9a 85       	ldd	r25, Y+10	; 0x0a
     a9a:	01 97       	sbiw	r24, 0x01	; 1
     a9c:	9a 87       	std	Y+10, r25	; 0x0a
     a9e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aa0:	89 85       	ldd	r24, Y+9	; 0x09
     aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
     aa4:	00 97       	sbiw	r24, 0x00	; 0
     aa6:	51 f7       	brne	.-44     	; 0xa7c <lcd_cmd+0xfe>
     aa8:	17 c0       	rjmp	.+46     	; 0xad8 <lcd_cmd+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     aaa:	6d 81       	ldd	r22, Y+5	; 0x05
     aac:	7e 81       	ldd	r23, Y+6	; 0x06
     aae:	8f 81       	ldd	r24, Y+7	; 0x07
     ab0:	98 85       	ldd	r25, Y+8	; 0x08
     ab2:	0e 94 2d 08 	call	0x105a	; 0x105a <__fixunssfsi>
     ab6:	dc 01       	movw	r26, r24
     ab8:	cb 01       	movw	r24, r22
     aba:	9a 87       	std	Y+10, r25	; 0x0a
     abc:	89 87       	std	Y+9, r24	; 0x09
     abe:	89 85       	ldd	r24, Y+9	; 0x09
     ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ac2:	9e 87       	std	Y+14, r25	; 0x0e
     ac4:	8d 87       	std	Y+13, r24	; 0x0d
     ac6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ac8:	9e 85       	ldd	r25, Y+14	; 0x0e
     aca:	8c 01       	movw	r16, r24
     acc:	f8 01       	movw	r30, r16
     ace:	31 97       	sbiw	r30, 0x01	; 1
     ad0:	f1 f7       	brne	.-4      	; 0xace <lcd_cmd+0x150>
     ad2:	8f 01       	movw	r16, r30
     ad4:	1e 87       	std	Y+14, r17	; 0x0e
     ad6:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(10);
	LCD&=~(1<<en);
     ad8:	85 e3       	ldi	r24, 0x35	; 53
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	25 e3       	ldi	r18, 0x35	; 53
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	f9 01       	movw	r30, r18
     ae2:	20 81       	ld	r18, Z
     ae4:	2b 7f       	andi	r18, 0xFB	; 251
     ae6:	fc 01       	movw	r30, r24
     ae8:	20 83       	st	Z, r18
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	a0 e2       	ldi	r26, 0x20	; 32
     af0:	b1 e4       	ldi	r27, 0x41	; 65
     af2:	8f 87       	std	Y+15, r24	; 0x0f
     af4:	98 8b       	std	Y+16, r25	; 0x10
     af6:	a9 8b       	std	Y+17, r26	; 0x11
     af8:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     afa:	6f 85       	ldd	r22, Y+15	; 0x0f
     afc:	78 89       	ldd	r23, Y+16	; 0x10
     afe:	89 89       	ldd	r24, Y+17	; 0x11
     b00:	9a 89       	ldd	r25, Y+18	; 0x12
     b02:	20 e0       	ldi	r18, 0x00	; 0
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	4a e7       	ldi	r20, 0x7A	; 122
     b08:	53 e4       	ldi	r21, 0x43	; 67
     b0a:	0e 94 aa 08 	call	0x1154	; 0x1154 <__mulsf3>
     b0e:	dc 01       	movw	r26, r24
     b10:	cb 01       	movw	r24, r22
     b12:	8b 8b       	std	Y+19, r24	; 0x13
     b14:	9c 8b       	std	Y+20, r25	; 0x14
     b16:	ad 8b       	std	Y+21, r26	; 0x15
     b18:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     b1a:	11 e0       	ldi	r17, 0x01	; 1
     b1c:	6b 89       	ldd	r22, Y+19	; 0x13
     b1e:	7c 89       	ldd	r23, Y+20	; 0x14
     b20:	8d 89       	ldd	r24, Y+21	; 0x15
     b22:	9e 89       	ldd	r25, Y+22	; 0x16
     b24:	20 e0       	ldi	r18, 0x00	; 0
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	40 e8       	ldi	r20, 0x80	; 128
     b2a:	5f e3       	ldi	r21, 0x3F	; 63
     b2c:	0e 94 29 08 	call	0x1052	; 0x1052 <__cmpsf2>
     b30:	88 23       	and	r24, r24
     b32:	0c f0       	brlt	.+2      	; 0xb36 <lcd_cmd+0x1b8>
     b34:	10 e0       	ldi	r17, 0x00	; 0
     b36:	11 23       	and	r17, r17
     b38:	29 f0       	breq	.+10     	; 0xb44 <lcd_cmd+0x1c6>
		__ticks = 1;
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	98 8f       	std	Y+24, r25	; 0x18
     b40:	8f 8b       	std	Y+23, r24	; 0x17
     b42:	46 c0       	rjmp	.+140    	; 0xbd0 <lcd_cmd+0x252>
	else if (__tmp > 65535)
     b44:	11 e0       	ldi	r17, 0x01	; 1
     b46:	6b 89       	ldd	r22, Y+19	; 0x13
     b48:	7c 89       	ldd	r23, Y+20	; 0x14
     b4a:	8d 89       	ldd	r24, Y+21	; 0x15
     b4c:	9e 89       	ldd	r25, Y+22	; 0x16
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	3f ef       	ldi	r19, 0xFF	; 255
     b52:	4f e7       	ldi	r20, 0x7F	; 127
     b54:	57 e4       	ldi	r21, 0x47	; 71
     b56:	0e 94 a6 08 	call	0x114c	; 0x114c <__gesf2>
     b5a:	18 16       	cp	r1, r24
     b5c:	0c f0       	brlt	.+2      	; 0xb60 <lcd_cmd+0x1e2>
     b5e:	10 e0       	ldi	r17, 0x00	; 0
     b60:	11 23       	and	r17, r17
     b62:	61 f1       	breq	.+88     	; 0xbbc <lcd_cmd+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b64:	6f 85       	ldd	r22, Y+15	; 0x0f
     b66:	78 89       	ldd	r23, Y+16	; 0x10
     b68:	89 89       	ldd	r24, Y+17	; 0x11
     b6a:	9a 89       	ldd	r25, Y+18	; 0x12
     b6c:	20 e0       	ldi	r18, 0x00	; 0
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	40 e2       	ldi	r20, 0x20	; 32
     b72:	51 e4       	ldi	r21, 0x41	; 65
     b74:	0e 94 aa 08 	call	0x1154	; 0x1154 <__mulsf3>
     b78:	dc 01       	movw	r26, r24
     b7a:	cb 01       	movw	r24, r22
     b7c:	bc 01       	movw	r22, r24
     b7e:	cd 01       	movw	r24, r26
     b80:	0e 94 2d 08 	call	0x105a	; 0x105a <__fixunssfsi>
     b84:	dc 01       	movw	r26, r24
     b86:	cb 01       	movw	r24, r22
     b88:	98 8f       	std	Y+24, r25	; 0x18
     b8a:	8f 8b       	std	Y+23, r24	; 0x17
     b8c:	12 c0       	rjmp	.+36     	; 0xbb2 <lcd_cmd+0x234>
     b8e:	89 e1       	ldi	r24, 0x19	; 25
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	9a 8f       	std	Y+26, r25	; 0x1a
     b94:	89 8f       	std	Y+25, r24	; 0x19
     b96:	89 8d       	ldd	r24, Y+25	; 0x19
     b98:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b9a:	8c 01       	movw	r16, r24
     b9c:	c8 01       	movw	r24, r16
     b9e:	01 97       	sbiw	r24, 0x01	; 1
     ba0:	f1 f7       	brne	.-4      	; 0xb9e <lcd_cmd+0x220>
     ba2:	8c 01       	movw	r16, r24
     ba4:	1a 8f       	std	Y+26, r17	; 0x1a
     ba6:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ba8:	8f 89       	ldd	r24, Y+23	; 0x17
     baa:	98 8d       	ldd	r25, Y+24	; 0x18
     bac:	01 97       	sbiw	r24, 0x01	; 1
     bae:	98 8f       	std	Y+24, r25	; 0x18
     bb0:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bb2:	8f 89       	ldd	r24, Y+23	; 0x17
     bb4:	98 8d       	ldd	r25, Y+24	; 0x18
     bb6:	00 97       	sbiw	r24, 0x00	; 0
     bb8:	51 f7       	brne	.-44     	; 0xb8e <lcd_cmd+0x210>
     bba:	17 c0       	rjmp	.+46     	; 0xbea <lcd_cmd+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bbc:	6b 89       	ldd	r22, Y+19	; 0x13
     bbe:	7c 89       	ldd	r23, Y+20	; 0x14
     bc0:	8d 89       	ldd	r24, Y+21	; 0x15
     bc2:	9e 89       	ldd	r25, Y+22	; 0x16
     bc4:	0e 94 2d 08 	call	0x105a	; 0x105a <__fixunssfsi>
     bc8:	dc 01       	movw	r26, r24
     bca:	cb 01       	movw	r24, r22
     bcc:	98 8f       	std	Y+24, r25	; 0x18
     bce:	8f 8b       	std	Y+23, r24	; 0x17
     bd0:	8f 89       	ldd	r24, Y+23	; 0x17
     bd2:	98 8d       	ldd	r25, Y+24	; 0x18
     bd4:	9c 8f       	std	Y+28, r25	; 0x1c
     bd6:	8b 8f       	std	Y+27, r24	; 0x1b
     bd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bda:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bdc:	8c 01       	movw	r16, r24
     bde:	f8 01       	movw	r30, r16
     be0:	31 97       	sbiw	r30, 0x01	; 1
     be2:	f1 f7       	brne	.-4      	; 0xbe0 <lcd_cmd+0x262>
     be4:	8f 01       	movw	r16, r30
     be6:	1c 8f       	std	Y+28, r17	; 0x1c
     be8:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(10);
}
     bea:	6d 96       	adiw	r28, 0x1d	; 29
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	de bf       	out	0x3e, r29	; 62
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	cd bf       	out	0x3d, r28	; 61
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	0f 91       	pop	r16
     bfe:	08 95       	ret

00000c00 <lcd_cmd1>:
void lcd_cmd1(unsigned char value)
{
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	00 d0       	rcall	.+0      	; 0xc06 <lcd_cmd1+0x6>
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char cd1;
	cd1=value & 0xf0;
     c0c:	8a 81       	ldd	r24, Y+2	; 0x02
     c0e:	80 7f       	andi	r24, 0xF0	; 240
     c10:	89 83       	std	Y+1, r24	; 0x01
	lcd_cmd(cd1);
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	0e 94 bf 04 	call	0x97e	; 0x97e <lcd_cmd>
	cd1=(value<<4) & 0xf0;
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	88 2f       	mov	r24, r24
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	82 95       	swap	r24
     c20:	92 95       	swap	r25
     c22:	90 7f       	andi	r25, 0xF0	; 240
     c24:	98 27       	eor	r25, r24
     c26:	80 7f       	andi	r24, 0xF0	; 240
     c28:	98 27       	eor	r25, r24
     c2a:	89 83       	std	Y+1, r24	; 0x01
	lcd_cmd(cd1);
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	0e 94 bf 04 	call	0x97e	; 0x97e <lcd_cmd>
}
     c32:	0f 90       	pop	r0
     c34:	0f 90       	pop	r0
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	08 95       	ret

00000c3c <lcd_data>:

void lcd_data(unsigned char value)
{
     c3c:	0f 93       	push	r16
     c3e:	1f 93       	push	r17
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
     c48:	6d 97       	sbiw	r28, 0x1d	; 29
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	cd bf       	out	0x3d, r28	; 61
     c54:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD=value;
     c56:	85 e3       	ldi	r24, 0x35	; 53
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	2d 8d       	ldd	r18, Y+29	; 0x1d
     c5c:	fc 01       	movw	r30, r24
     c5e:	20 83       	st	Z, r18
	LCD|=(1<<rs);
     c60:	85 e3       	ldi	r24, 0x35	; 53
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	25 e3       	ldi	r18, 0x35	; 53
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	f9 01       	movw	r30, r18
     c6a:	20 81       	ld	r18, Z
     c6c:	21 60       	ori	r18, 0x01	; 1
     c6e:	fc 01       	movw	r30, r24
     c70:	20 83       	st	Z, r18
	LCD&=~(1<<rw);
     c72:	85 e3       	ldi	r24, 0x35	; 53
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	25 e3       	ldi	r18, 0x35	; 53
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	f9 01       	movw	r30, r18
     c7c:	20 81       	ld	r18, Z
     c7e:	2d 7f       	andi	r18, 0xFD	; 253
     c80:	fc 01       	movw	r30, r24
     c82:	20 83       	st	Z, r18
	LCD|=(1<<en);
     c84:	85 e3       	ldi	r24, 0x35	; 53
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	25 e3       	ldi	r18, 0x35	; 53
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	f9 01       	movw	r30, r18
     c8e:	20 81       	ld	r18, Z
     c90:	24 60       	ori	r18, 0x04	; 4
     c92:	fc 01       	movw	r30, r24
     c94:	20 83       	st	Z, r18
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	a0 e2       	ldi	r26, 0x20	; 32
     c9c:	b1 e4       	ldi	r27, 0x41	; 65
     c9e:	89 83       	std	Y+1, r24	; 0x01
     ca0:	9a 83       	std	Y+2, r25	; 0x02
     ca2:	ab 83       	std	Y+3, r26	; 0x03
     ca4:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     ca6:	69 81       	ldd	r22, Y+1	; 0x01
     ca8:	7a 81       	ldd	r23, Y+2	; 0x02
     caa:	8b 81       	ldd	r24, Y+3	; 0x03
     cac:	9c 81       	ldd	r25, Y+4	; 0x04
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	4a e7       	ldi	r20, 0x7A	; 122
     cb4:	53 e4       	ldi	r21, 0x43	; 67
     cb6:	0e 94 aa 08 	call	0x1154	; 0x1154 <__mulsf3>
     cba:	dc 01       	movw	r26, r24
     cbc:	cb 01       	movw	r24, r22
     cbe:	8d 83       	std	Y+5, r24	; 0x05
     cc0:	9e 83       	std	Y+6, r25	; 0x06
     cc2:	af 83       	std	Y+7, r26	; 0x07
     cc4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     cc6:	11 e0       	ldi	r17, 0x01	; 1
     cc8:	6d 81       	ldd	r22, Y+5	; 0x05
     cca:	7e 81       	ldd	r23, Y+6	; 0x06
     ccc:	8f 81       	ldd	r24, Y+7	; 0x07
     cce:	98 85       	ldd	r25, Y+8	; 0x08
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	40 e8       	ldi	r20, 0x80	; 128
     cd6:	5f e3       	ldi	r21, 0x3F	; 63
     cd8:	0e 94 29 08 	call	0x1052	; 0x1052 <__cmpsf2>
     cdc:	88 23       	and	r24, r24
     cde:	0c f0       	brlt	.+2      	; 0xce2 <lcd_data+0xa6>
     ce0:	10 e0       	ldi	r17, 0x00	; 0
     ce2:	11 23       	and	r17, r17
     ce4:	29 f0       	breq	.+10     	; 0xcf0 <lcd_data+0xb4>
		__ticks = 1;
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	9a 87       	std	Y+10, r25	; 0x0a
     cec:	89 87       	std	Y+9, r24	; 0x09
     cee:	46 c0       	rjmp	.+140    	; 0xd7c <lcd_data+0x140>
	else if (__tmp > 65535)
     cf0:	11 e0       	ldi	r17, 0x01	; 1
     cf2:	6d 81       	ldd	r22, Y+5	; 0x05
     cf4:	7e 81       	ldd	r23, Y+6	; 0x06
     cf6:	8f 81       	ldd	r24, Y+7	; 0x07
     cf8:	98 85       	ldd	r25, Y+8	; 0x08
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	3f ef       	ldi	r19, 0xFF	; 255
     cfe:	4f e7       	ldi	r20, 0x7F	; 127
     d00:	57 e4       	ldi	r21, 0x47	; 71
     d02:	0e 94 a6 08 	call	0x114c	; 0x114c <__gesf2>
     d06:	18 16       	cp	r1, r24
     d08:	0c f0       	brlt	.+2      	; 0xd0c <lcd_data+0xd0>
     d0a:	10 e0       	ldi	r17, 0x00	; 0
     d0c:	11 23       	and	r17, r17
     d0e:	61 f1       	breq	.+88     	; 0xd68 <lcd_data+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d10:	69 81       	ldd	r22, Y+1	; 0x01
     d12:	7a 81       	ldd	r23, Y+2	; 0x02
     d14:	8b 81       	ldd	r24, Y+3	; 0x03
     d16:	9c 81       	ldd	r25, Y+4	; 0x04
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	40 e2       	ldi	r20, 0x20	; 32
     d1e:	51 e4       	ldi	r21, 0x41	; 65
     d20:	0e 94 aa 08 	call	0x1154	; 0x1154 <__mulsf3>
     d24:	dc 01       	movw	r26, r24
     d26:	cb 01       	movw	r24, r22
     d28:	bc 01       	movw	r22, r24
     d2a:	cd 01       	movw	r24, r26
     d2c:	0e 94 2d 08 	call	0x105a	; 0x105a <__fixunssfsi>
     d30:	dc 01       	movw	r26, r24
     d32:	cb 01       	movw	r24, r22
     d34:	9a 87       	std	Y+10, r25	; 0x0a
     d36:	89 87       	std	Y+9, r24	; 0x09
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <lcd_data+0x122>
     d3a:	89 e1       	ldi	r24, 0x19	; 25
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	9c 87       	std	Y+12, r25	; 0x0c
     d40:	8b 87       	std	Y+11, r24	; 0x0b
     d42:	8b 85       	ldd	r24, Y+11	; 0x0b
     d44:	9c 85       	ldd	r25, Y+12	; 0x0c
     d46:	8c 01       	movw	r16, r24
     d48:	c8 01       	movw	r24, r16
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	f1 f7       	brne	.-4      	; 0xd4a <lcd_data+0x10e>
     d4e:	8c 01       	movw	r16, r24
     d50:	1c 87       	std	Y+12, r17	; 0x0c
     d52:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d54:	89 85       	ldd	r24, Y+9	; 0x09
     d56:	9a 85       	ldd	r25, Y+10	; 0x0a
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	9a 87       	std	Y+10, r25	; 0x0a
     d5c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d5e:	89 85       	ldd	r24, Y+9	; 0x09
     d60:	9a 85       	ldd	r25, Y+10	; 0x0a
     d62:	00 97       	sbiw	r24, 0x00	; 0
     d64:	51 f7       	brne	.-44     	; 0xd3a <lcd_data+0xfe>
     d66:	17 c0       	rjmp	.+46     	; 0xd96 <lcd_data+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d68:	6d 81       	ldd	r22, Y+5	; 0x05
     d6a:	7e 81       	ldd	r23, Y+6	; 0x06
     d6c:	8f 81       	ldd	r24, Y+7	; 0x07
     d6e:	98 85       	ldd	r25, Y+8	; 0x08
     d70:	0e 94 2d 08 	call	0x105a	; 0x105a <__fixunssfsi>
     d74:	dc 01       	movw	r26, r24
     d76:	cb 01       	movw	r24, r22
     d78:	9a 87       	std	Y+10, r25	; 0x0a
     d7a:	89 87       	std	Y+9, r24	; 0x09
     d7c:	89 85       	ldd	r24, Y+9	; 0x09
     d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d80:	9e 87       	std	Y+14, r25	; 0x0e
     d82:	8d 87       	std	Y+13, r24	; 0x0d
     d84:	8d 85       	ldd	r24, Y+13	; 0x0d
     d86:	9e 85       	ldd	r25, Y+14	; 0x0e
     d88:	8c 01       	movw	r16, r24
     d8a:	f8 01       	movw	r30, r16
     d8c:	31 97       	sbiw	r30, 0x01	; 1
     d8e:	f1 f7       	brne	.-4      	; 0xd8c <lcd_data+0x150>
     d90:	8f 01       	movw	r16, r30
     d92:	1e 87       	std	Y+14, r17	; 0x0e
     d94:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(10);
	LCD&=~(1<<en);
     d96:	85 e3       	ldi	r24, 0x35	; 53
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	25 e3       	ldi	r18, 0x35	; 53
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	f9 01       	movw	r30, r18
     da0:	20 81       	ld	r18, Z
     da2:	2b 7f       	andi	r18, 0xFB	; 251
     da4:	fc 01       	movw	r30, r24
     da6:	20 83       	st	Z, r18
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	a0 e2       	ldi	r26, 0x20	; 32
     dae:	b1 e4       	ldi	r27, 0x41	; 65
     db0:	8f 87       	std	Y+15, r24	; 0x0f
     db2:	98 8b       	std	Y+16, r25	; 0x10
     db4:	a9 8b       	std	Y+17, r26	; 0x11
     db6:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     db8:	6f 85       	ldd	r22, Y+15	; 0x0f
     dba:	78 89       	ldd	r23, Y+16	; 0x10
     dbc:	89 89       	ldd	r24, Y+17	; 0x11
     dbe:	9a 89       	ldd	r25, Y+18	; 0x12
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	4a e7       	ldi	r20, 0x7A	; 122
     dc6:	53 e4       	ldi	r21, 0x43	; 67
     dc8:	0e 94 aa 08 	call	0x1154	; 0x1154 <__mulsf3>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	8b 8b       	std	Y+19, r24	; 0x13
     dd2:	9c 8b       	std	Y+20, r25	; 0x14
     dd4:	ad 8b       	std	Y+21, r26	; 0x15
     dd6:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     dd8:	11 e0       	ldi	r17, 0x01	; 1
     dda:	6b 89       	ldd	r22, Y+19	; 0x13
     ddc:	7c 89       	ldd	r23, Y+20	; 0x14
     dde:	8d 89       	ldd	r24, Y+21	; 0x15
     de0:	9e 89       	ldd	r25, Y+22	; 0x16
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	40 e8       	ldi	r20, 0x80	; 128
     de8:	5f e3       	ldi	r21, 0x3F	; 63
     dea:	0e 94 29 08 	call	0x1052	; 0x1052 <__cmpsf2>
     dee:	88 23       	and	r24, r24
     df0:	0c f0       	brlt	.+2      	; 0xdf4 <lcd_data+0x1b8>
     df2:	10 e0       	ldi	r17, 0x00	; 0
     df4:	11 23       	and	r17, r17
     df6:	29 f0       	breq	.+10     	; 0xe02 <lcd_data+0x1c6>
		__ticks = 1;
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	98 8f       	std	Y+24, r25	; 0x18
     dfe:	8f 8b       	std	Y+23, r24	; 0x17
     e00:	46 c0       	rjmp	.+140    	; 0xe8e <lcd_data+0x252>
	else if (__tmp > 65535)
     e02:	11 e0       	ldi	r17, 0x01	; 1
     e04:	6b 89       	ldd	r22, Y+19	; 0x13
     e06:	7c 89       	ldd	r23, Y+20	; 0x14
     e08:	8d 89       	ldd	r24, Y+21	; 0x15
     e0a:	9e 89       	ldd	r25, Y+22	; 0x16
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	3f ef       	ldi	r19, 0xFF	; 255
     e10:	4f e7       	ldi	r20, 0x7F	; 127
     e12:	57 e4       	ldi	r21, 0x47	; 71
     e14:	0e 94 a6 08 	call	0x114c	; 0x114c <__gesf2>
     e18:	18 16       	cp	r1, r24
     e1a:	0c f0       	brlt	.+2      	; 0xe1e <lcd_data+0x1e2>
     e1c:	10 e0       	ldi	r17, 0x00	; 0
     e1e:	11 23       	and	r17, r17
     e20:	61 f1       	breq	.+88     	; 0xe7a <lcd_data+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e22:	6f 85       	ldd	r22, Y+15	; 0x0f
     e24:	78 89       	ldd	r23, Y+16	; 0x10
     e26:	89 89       	ldd	r24, Y+17	; 0x11
     e28:	9a 89       	ldd	r25, Y+18	; 0x12
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	40 e2       	ldi	r20, 0x20	; 32
     e30:	51 e4       	ldi	r21, 0x41	; 65
     e32:	0e 94 aa 08 	call	0x1154	; 0x1154 <__mulsf3>
     e36:	dc 01       	movw	r26, r24
     e38:	cb 01       	movw	r24, r22
     e3a:	bc 01       	movw	r22, r24
     e3c:	cd 01       	movw	r24, r26
     e3e:	0e 94 2d 08 	call	0x105a	; 0x105a <__fixunssfsi>
     e42:	dc 01       	movw	r26, r24
     e44:	cb 01       	movw	r24, r22
     e46:	98 8f       	std	Y+24, r25	; 0x18
     e48:	8f 8b       	std	Y+23, r24	; 0x17
     e4a:	12 c0       	rjmp	.+36     	; 0xe70 <lcd_data+0x234>
     e4c:	89 e1       	ldi	r24, 0x19	; 25
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	9a 8f       	std	Y+26, r25	; 0x1a
     e52:	89 8f       	std	Y+25, r24	; 0x19
     e54:	89 8d       	ldd	r24, Y+25	; 0x19
     e56:	9a 8d       	ldd	r25, Y+26	; 0x1a
     e58:	8c 01       	movw	r16, r24
     e5a:	c8 01       	movw	r24, r16
     e5c:	01 97       	sbiw	r24, 0x01	; 1
     e5e:	f1 f7       	brne	.-4      	; 0xe5c <lcd_data+0x220>
     e60:	8c 01       	movw	r16, r24
     e62:	1a 8f       	std	Y+26, r17	; 0x1a
     e64:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e66:	8f 89       	ldd	r24, Y+23	; 0x17
     e68:	98 8d       	ldd	r25, Y+24	; 0x18
     e6a:	01 97       	sbiw	r24, 0x01	; 1
     e6c:	98 8f       	std	Y+24, r25	; 0x18
     e6e:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e70:	8f 89       	ldd	r24, Y+23	; 0x17
     e72:	98 8d       	ldd	r25, Y+24	; 0x18
     e74:	00 97       	sbiw	r24, 0x00	; 0
     e76:	51 f7       	brne	.-44     	; 0xe4c <lcd_data+0x210>
     e78:	17 c0       	rjmp	.+46     	; 0xea8 <lcd_data+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e7a:	6b 89       	ldd	r22, Y+19	; 0x13
     e7c:	7c 89       	ldd	r23, Y+20	; 0x14
     e7e:	8d 89       	ldd	r24, Y+21	; 0x15
     e80:	9e 89       	ldd	r25, Y+22	; 0x16
     e82:	0e 94 2d 08 	call	0x105a	; 0x105a <__fixunssfsi>
     e86:	dc 01       	movw	r26, r24
     e88:	cb 01       	movw	r24, r22
     e8a:	98 8f       	std	Y+24, r25	; 0x18
     e8c:	8f 8b       	std	Y+23, r24	; 0x17
     e8e:	8f 89       	ldd	r24, Y+23	; 0x17
     e90:	98 8d       	ldd	r25, Y+24	; 0x18
     e92:	9c 8f       	std	Y+28, r25	; 0x1c
     e94:	8b 8f       	std	Y+27, r24	; 0x1b
     e96:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e98:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e9a:	8c 01       	movw	r16, r24
     e9c:	f8 01       	movw	r30, r16
     e9e:	31 97       	sbiw	r30, 0x01	; 1
     ea0:	f1 f7       	brne	.-4      	; 0xe9e <lcd_data+0x262>
     ea2:	8f 01       	movw	r16, r30
     ea4:	1c 8f       	std	Y+28, r17	; 0x1c
     ea6:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(10);

}
     ea8:	6d 96       	adiw	r28, 0x1d	; 29
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	de bf       	out	0x3e, r29	; 62
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	cd bf       	out	0x3d, r28	; 61
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	1f 91       	pop	r17
     eba:	0f 91       	pop	r16
     ebc:	08 95       	ret

00000ebe <lcd_data1>:
void lcd_data1(unsigned char value)
{
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <lcd_data1+0x6>
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char cd1;
	cd1=value & 0xf0;
     eca:	8a 81       	ldd	r24, Y+2	; 0x02
     ecc:	80 7f       	andi	r24, 0xF0	; 240
     ece:	89 83       	std	Y+1, r24	; 0x01
	lcd_data(cd1);
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	0e 94 1e 06 	call	0xc3c	; 0xc3c <lcd_data>
	
	cd1=(value<<4) & 0xf0;
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	88 2f       	mov	r24, r24
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	82 95       	swap	r24
     ede:	92 95       	swap	r25
     ee0:	90 7f       	andi	r25, 0xF0	; 240
     ee2:	98 27       	eor	r25, r24
     ee4:	80 7f       	andi	r24, 0xF0	; 240
     ee6:	98 27       	eor	r25, r24
     ee8:	89 83       	std	Y+1, r24	; 0x01
	lcd_data(cd1);
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	0e 94 1e 06 	call	0xc3c	; 0xc3c <lcd_data>
}
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	08 95       	ret

00000efa <lcd_str>:

void lcd_str(unsigned char *s)
{
     efa:	0f 93       	push	r16
     efc:	1f 93       	push	r17
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	60 97       	sbiw	r28, 0x10	; 16
     f08:	0f b6       	in	r0, 0x3f	; 63
     f0a:	f8 94       	cli
     f0c:	de bf       	out	0x3e, r29	; 62
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	cd bf       	out	0x3d, r28	; 61
     f12:	98 8b       	std	Y+16, r25	; 0x10
     f14:	8f 87       	std	Y+15, r24	; 0x0f
	while(*s)
     f16:	8b c0       	rjmp	.+278    	; 0x102e <lcd_str+0x134>
	{
		lcd_data1(*s);
     f18:	8f 85       	ldd	r24, Y+15	; 0x0f
     f1a:	98 89       	ldd	r25, Y+16	; 0x10
     f1c:	fc 01       	movw	r30, r24
     f1e:	80 81       	ld	r24, Z
     f20:	0e 94 5f 07 	call	0xebe	; 0xebe <lcd_data1>
		s++;
     f24:	8f 85       	ldd	r24, Y+15	; 0x0f
     f26:	98 89       	ldd	r25, Y+16	; 0x10
     f28:	01 96       	adiw	r24, 0x01	; 1
     f2a:	98 8b       	std	Y+16, r25	; 0x10
     f2c:	8f 87       	std	Y+15, r24	; 0x0f
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	a8 ec       	ldi	r26, 0xC8	; 200
     f34:	b2 e4       	ldi	r27, 0x42	; 66
     f36:	89 83       	std	Y+1, r24	; 0x01
     f38:	9a 83       	std	Y+2, r25	; 0x02
     f3a:	ab 83       	std	Y+3, r26	; 0x03
     f3c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     f3e:	69 81       	ldd	r22, Y+1	; 0x01
     f40:	7a 81       	ldd	r23, Y+2	; 0x02
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	9c 81       	ldd	r25, Y+4	; 0x04
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	4a e7       	ldi	r20, 0x7A	; 122
     f4c:	53 e4       	ldi	r21, 0x43	; 67
     f4e:	0e 94 aa 08 	call	0x1154	; 0x1154 <__mulsf3>
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
     f56:	8d 83       	std	Y+5, r24	; 0x05
     f58:	9e 83       	std	Y+6, r25	; 0x06
     f5a:	af 83       	std	Y+7, r26	; 0x07
     f5c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     f5e:	11 e0       	ldi	r17, 0x01	; 1
     f60:	6d 81       	ldd	r22, Y+5	; 0x05
     f62:	7e 81       	ldd	r23, Y+6	; 0x06
     f64:	8f 81       	ldd	r24, Y+7	; 0x07
     f66:	98 85       	ldd	r25, Y+8	; 0x08
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	40 e8       	ldi	r20, 0x80	; 128
     f6e:	5f e3       	ldi	r21, 0x3F	; 63
     f70:	0e 94 29 08 	call	0x1052	; 0x1052 <__cmpsf2>
     f74:	88 23       	and	r24, r24
     f76:	0c f0       	brlt	.+2      	; 0xf7a <lcd_str+0x80>
     f78:	10 e0       	ldi	r17, 0x00	; 0
     f7a:	11 23       	and	r17, r17
     f7c:	29 f0       	breq	.+10     	; 0xf88 <lcd_str+0x8e>
		__ticks = 1;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	9a 87       	std	Y+10, r25	; 0x0a
     f84:	89 87       	std	Y+9, r24	; 0x09
     f86:	46 c0       	rjmp	.+140    	; 0x1014 <lcd_str+0x11a>
	else if (__tmp > 65535)
     f88:	11 e0       	ldi	r17, 0x01	; 1
     f8a:	6d 81       	ldd	r22, Y+5	; 0x05
     f8c:	7e 81       	ldd	r23, Y+6	; 0x06
     f8e:	8f 81       	ldd	r24, Y+7	; 0x07
     f90:	98 85       	ldd	r25, Y+8	; 0x08
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	3f ef       	ldi	r19, 0xFF	; 255
     f96:	4f e7       	ldi	r20, 0x7F	; 127
     f98:	57 e4       	ldi	r21, 0x47	; 71
     f9a:	0e 94 a6 08 	call	0x114c	; 0x114c <__gesf2>
     f9e:	18 16       	cp	r1, r24
     fa0:	0c f0       	brlt	.+2      	; 0xfa4 <lcd_str+0xaa>
     fa2:	10 e0       	ldi	r17, 0x00	; 0
     fa4:	11 23       	and	r17, r17
     fa6:	61 f1       	breq	.+88     	; 0x1000 <lcd_str+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fa8:	69 81       	ldd	r22, Y+1	; 0x01
     faa:	7a 81       	ldd	r23, Y+2	; 0x02
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	9c 81       	ldd	r25, Y+4	; 0x04
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	40 e2       	ldi	r20, 0x20	; 32
     fb6:	51 e4       	ldi	r21, 0x41	; 65
     fb8:	0e 94 aa 08 	call	0x1154	; 0x1154 <__mulsf3>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	bc 01       	movw	r22, r24
     fc2:	cd 01       	movw	r24, r26
     fc4:	0e 94 2d 08 	call	0x105a	; 0x105a <__fixunssfsi>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	9a 87       	std	Y+10, r25	; 0x0a
     fce:	89 87       	std	Y+9, r24	; 0x09
     fd0:	12 c0       	rjmp	.+36     	; 0xff6 <lcd_str+0xfc>
     fd2:	89 e1       	ldi	r24, 0x19	; 25
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	9c 87       	std	Y+12, r25	; 0x0c
     fd8:	8b 87       	std	Y+11, r24	; 0x0b
     fda:	8b 85       	ldd	r24, Y+11	; 0x0b
     fdc:	9c 85       	ldd	r25, Y+12	; 0x0c
     fde:	8c 01       	movw	r16, r24
     fe0:	c8 01       	movw	r24, r16
     fe2:	01 97       	sbiw	r24, 0x01	; 1
     fe4:	f1 f7       	brne	.-4      	; 0xfe2 <lcd_str+0xe8>
     fe6:	8c 01       	movw	r16, r24
     fe8:	1c 87       	std	Y+12, r17	; 0x0c
     fea:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fec:	89 85       	ldd	r24, Y+9	; 0x09
     fee:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff0:	01 97       	sbiw	r24, 0x01	; 1
     ff2:	9a 87       	std	Y+10, r25	; 0x0a
     ff4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff6:	89 85       	ldd	r24, Y+9	; 0x09
     ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	51 f7       	brne	.-44     	; 0xfd2 <lcd_str+0xd8>
     ffe:	17 c0       	rjmp	.+46     	; 0x102e <lcd_str+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1000:	6d 81       	ldd	r22, Y+5	; 0x05
    1002:	7e 81       	ldd	r23, Y+6	; 0x06
    1004:	8f 81       	ldd	r24, Y+7	; 0x07
    1006:	98 85       	ldd	r25, Y+8	; 0x08
    1008:	0e 94 2d 08 	call	0x105a	; 0x105a <__fixunssfsi>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	9a 87       	std	Y+10, r25	; 0x0a
    1012:	89 87       	std	Y+9, r24	; 0x09
    1014:	89 85       	ldd	r24, Y+9	; 0x09
    1016:	9a 85       	ldd	r25, Y+10	; 0x0a
    1018:	9e 87       	std	Y+14, r25	; 0x0e
    101a:	8d 87       	std	Y+13, r24	; 0x0d
    101c:	8d 85       	ldd	r24, Y+13	; 0x0d
    101e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1020:	8c 01       	movw	r16, r24
    1022:	f8 01       	movw	r30, r16
    1024:	31 97       	sbiw	r30, 0x01	; 1
    1026:	f1 f7       	brne	.-4      	; 0x1024 <lcd_str+0x12a>
    1028:	8f 01       	movw	r16, r30
    102a:	1e 87       	std	Y+14, r17	; 0x0e
    102c:	0d 87       	std	Y+13, r16	; 0x0d
	lcd_data(cd1);
}

void lcd_str(unsigned char *s)
{
	while(*s)
    102e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1030:	98 89       	ldd	r25, Y+16	; 0x10
    1032:	fc 01       	movw	r30, r24
    1034:	80 81       	ld	r24, Z
    1036:	88 23       	and	r24, r24
    1038:	09 f0       	breq	.+2      	; 0x103c <lcd_str+0x142>
    103a:	6e cf       	rjmp	.-292    	; 0xf18 <lcd_str+0x1e>
	{
		lcd_data1(*s);
		s++;
		_delay_ms(100);
	}
}
    103c:	60 96       	adiw	r28, 0x10	; 16
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	1f 91       	pop	r17
    104e:	0f 91       	pop	r16
    1050:	08 95       	ret

00001052 <__cmpsf2>:
    1052:	2f d0       	rcall	.+94     	; 0x10b2 <__fp_cmp>
    1054:	08 f4       	brcc	.+2      	; 0x1058 <__cmpsf2+0x6>
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	08 95       	ret

0000105a <__fixunssfsi>:
    105a:	57 d0       	rcall	.+174    	; 0x110a <__fp_splitA>
    105c:	88 f0       	brcs	.+34     	; 0x1080 <__fixunssfsi+0x26>
    105e:	9f 57       	subi	r25, 0x7F	; 127
    1060:	90 f0       	brcs	.+36     	; 0x1086 <__fixunssfsi+0x2c>
    1062:	b9 2f       	mov	r27, r25
    1064:	99 27       	eor	r25, r25
    1066:	b7 51       	subi	r27, 0x17	; 23
    1068:	a0 f0       	brcs	.+40     	; 0x1092 <__fixunssfsi+0x38>
    106a:	d1 f0       	breq	.+52     	; 0x10a0 <__fixunssfsi+0x46>
    106c:	66 0f       	add	r22, r22
    106e:	77 1f       	adc	r23, r23
    1070:	88 1f       	adc	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	1a f0       	brmi	.+6      	; 0x107c <__fixunssfsi+0x22>
    1076:	ba 95       	dec	r27
    1078:	c9 f7       	brne	.-14     	; 0x106c <__fixunssfsi+0x12>
    107a:	12 c0       	rjmp	.+36     	; 0x10a0 <__fixunssfsi+0x46>
    107c:	b1 30       	cpi	r27, 0x01	; 1
    107e:	81 f0       	breq	.+32     	; 0x10a0 <__fixunssfsi+0x46>
    1080:	5e d0       	rcall	.+188    	; 0x113e <__fp_zero>
    1082:	b1 e0       	ldi	r27, 0x01	; 1
    1084:	08 95       	ret
    1086:	5b c0       	rjmp	.+182    	; 0x113e <__fp_zero>
    1088:	67 2f       	mov	r22, r23
    108a:	78 2f       	mov	r23, r24
    108c:	88 27       	eor	r24, r24
    108e:	b8 5f       	subi	r27, 0xF8	; 248
    1090:	39 f0       	breq	.+14     	; 0x10a0 <__fixunssfsi+0x46>
    1092:	b9 3f       	cpi	r27, 0xF9	; 249
    1094:	cc f3       	brlt	.-14     	; 0x1088 <__fixunssfsi+0x2e>
    1096:	86 95       	lsr	r24
    1098:	77 95       	ror	r23
    109a:	67 95       	ror	r22
    109c:	b3 95       	inc	r27
    109e:	d9 f7       	brne	.-10     	; 0x1096 <__fixunssfsi+0x3c>
    10a0:	3e f4       	brtc	.+14     	; 0x10b0 <__fixunssfsi+0x56>
    10a2:	90 95       	com	r25
    10a4:	80 95       	com	r24
    10a6:	70 95       	com	r23
    10a8:	61 95       	neg	r22
    10aa:	7f 4f       	sbci	r23, 0xFF	; 255
    10ac:	8f 4f       	sbci	r24, 0xFF	; 255
    10ae:	9f 4f       	sbci	r25, 0xFF	; 255
    10b0:	08 95       	ret

000010b2 <__fp_cmp>:
    10b2:	99 0f       	add	r25, r25
    10b4:	00 08       	sbc	r0, r0
    10b6:	55 0f       	add	r21, r21
    10b8:	aa 0b       	sbc	r26, r26
    10ba:	e0 e8       	ldi	r30, 0x80	; 128
    10bc:	fe ef       	ldi	r31, 0xFE	; 254
    10be:	16 16       	cp	r1, r22
    10c0:	17 06       	cpc	r1, r23
    10c2:	e8 07       	cpc	r30, r24
    10c4:	f9 07       	cpc	r31, r25
    10c6:	c0 f0       	brcs	.+48     	; 0x10f8 <__fp_cmp+0x46>
    10c8:	12 16       	cp	r1, r18
    10ca:	13 06       	cpc	r1, r19
    10cc:	e4 07       	cpc	r30, r20
    10ce:	f5 07       	cpc	r31, r21
    10d0:	98 f0       	brcs	.+38     	; 0x10f8 <__fp_cmp+0x46>
    10d2:	62 1b       	sub	r22, r18
    10d4:	73 0b       	sbc	r23, r19
    10d6:	84 0b       	sbc	r24, r20
    10d8:	95 0b       	sbc	r25, r21
    10da:	39 f4       	brne	.+14     	; 0x10ea <__fp_cmp+0x38>
    10dc:	0a 26       	eor	r0, r26
    10de:	61 f0       	breq	.+24     	; 0x10f8 <__fp_cmp+0x46>
    10e0:	23 2b       	or	r18, r19
    10e2:	24 2b       	or	r18, r20
    10e4:	25 2b       	or	r18, r21
    10e6:	21 f4       	brne	.+8      	; 0x10f0 <__fp_cmp+0x3e>
    10e8:	08 95       	ret
    10ea:	0a 26       	eor	r0, r26
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <__fp_cmp+0x3e>
    10ee:	a1 40       	sbci	r26, 0x01	; 1
    10f0:	a6 95       	lsr	r26
    10f2:	8f ef       	ldi	r24, 0xFF	; 255
    10f4:	81 1d       	adc	r24, r1
    10f6:	81 1d       	adc	r24, r1
    10f8:	08 95       	ret

000010fa <__fp_split3>:
    10fa:	57 fd       	sbrc	r21, 7
    10fc:	90 58       	subi	r25, 0x80	; 128
    10fe:	44 0f       	add	r20, r20
    1100:	55 1f       	adc	r21, r21
    1102:	59 f0       	breq	.+22     	; 0x111a <__fp_splitA+0x10>
    1104:	5f 3f       	cpi	r21, 0xFF	; 255
    1106:	71 f0       	breq	.+28     	; 0x1124 <__fp_splitA+0x1a>
    1108:	47 95       	ror	r20

0000110a <__fp_splitA>:
    110a:	88 0f       	add	r24, r24
    110c:	97 fb       	bst	r25, 7
    110e:	99 1f       	adc	r25, r25
    1110:	61 f0       	breq	.+24     	; 0x112a <__fp_splitA+0x20>
    1112:	9f 3f       	cpi	r25, 0xFF	; 255
    1114:	79 f0       	breq	.+30     	; 0x1134 <__fp_splitA+0x2a>
    1116:	87 95       	ror	r24
    1118:	08 95       	ret
    111a:	12 16       	cp	r1, r18
    111c:	13 06       	cpc	r1, r19
    111e:	14 06       	cpc	r1, r20
    1120:	55 1f       	adc	r21, r21
    1122:	f2 cf       	rjmp	.-28     	; 0x1108 <__fp_split3+0xe>
    1124:	46 95       	lsr	r20
    1126:	f1 df       	rcall	.-30     	; 0x110a <__fp_splitA>
    1128:	08 c0       	rjmp	.+16     	; 0x113a <__fp_splitA+0x30>
    112a:	16 16       	cp	r1, r22
    112c:	17 06       	cpc	r1, r23
    112e:	18 06       	cpc	r1, r24
    1130:	99 1f       	adc	r25, r25
    1132:	f1 cf       	rjmp	.-30     	; 0x1116 <__fp_splitA+0xc>
    1134:	86 95       	lsr	r24
    1136:	71 05       	cpc	r23, r1
    1138:	61 05       	cpc	r22, r1
    113a:	08 94       	sec
    113c:	08 95       	ret

0000113e <__fp_zero>:
    113e:	e8 94       	clt

00001140 <__fp_szero>:
    1140:	bb 27       	eor	r27, r27
    1142:	66 27       	eor	r22, r22
    1144:	77 27       	eor	r23, r23
    1146:	cb 01       	movw	r24, r22
    1148:	97 f9       	bld	r25, 7
    114a:	08 95       	ret

0000114c <__gesf2>:
    114c:	b2 df       	rcall	.-156    	; 0x10b2 <__fp_cmp>
    114e:	08 f4       	brcc	.+2      	; 0x1152 <__gesf2+0x6>
    1150:	8f ef       	ldi	r24, 0xFF	; 255
    1152:	08 95       	ret

00001154 <__mulsf3>:
    1154:	0b d0       	rcall	.+22     	; 0x116c <__mulsf3x>
    1156:	78 c0       	rjmp	.+240    	; 0x1248 <__fp_round>
    1158:	69 d0       	rcall	.+210    	; 0x122c <__fp_pscA>
    115a:	28 f0       	brcs	.+10     	; 0x1166 <__mulsf3+0x12>
    115c:	6e d0       	rcall	.+220    	; 0x123a <__fp_pscB>
    115e:	18 f0       	brcs	.+6      	; 0x1166 <__mulsf3+0x12>
    1160:	95 23       	and	r25, r21
    1162:	09 f0       	breq	.+2      	; 0x1166 <__mulsf3+0x12>
    1164:	5a c0       	rjmp	.+180    	; 0x121a <__fp_inf>
    1166:	5f c0       	rjmp	.+190    	; 0x1226 <__fp_nan>
    1168:	11 24       	eor	r1, r1
    116a:	ea cf       	rjmp	.-44     	; 0x1140 <__fp_szero>

0000116c <__mulsf3x>:
    116c:	c6 df       	rcall	.-116    	; 0x10fa <__fp_split3>
    116e:	a0 f3       	brcs	.-24     	; 0x1158 <__mulsf3+0x4>

00001170 <__mulsf3_pse>:
    1170:	95 9f       	mul	r25, r21
    1172:	d1 f3       	breq	.-12     	; 0x1168 <__mulsf3+0x14>
    1174:	95 0f       	add	r25, r21
    1176:	50 e0       	ldi	r21, 0x00	; 0
    1178:	55 1f       	adc	r21, r21
    117a:	62 9f       	mul	r22, r18
    117c:	f0 01       	movw	r30, r0
    117e:	72 9f       	mul	r23, r18
    1180:	bb 27       	eor	r27, r27
    1182:	f0 0d       	add	r31, r0
    1184:	b1 1d       	adc	r27, r1
    1186:	63 9f       	mul	r22, r19
    1188:	aa 27       	eor	r26, r26
    118a:	f0 0d       	add	r31, r0
    118c:	b1 1d       	adc	r27, r1
    118e:	aa 1f       	adc	r26, r26
    1190:	64 9f       	mul	r22, r20
    1192:	66 27       	eor	r22, r22
    1194:	b0 0d       	add	r27, r0
    1196:	a1 1d       	adc	r26, r1
    1198:	66 1f       	adc	r22, r22
    119a:	82 9f       	mul	r24, r18
    119c:	22 27       	eor	r18, r18
    119e:	b0 0d       	add	r27, r0
    11a0:	a1 1d       	adc	r26, r1
    11a2:	62 1f       	adc	r22, r18
    11a4:	73 9f       	mul	r23, r19
    11a6:	b0 0d       	add	r27, r0
    11a8:	a1 1d       	adc	r26, r1
    11aa:	62 1f       	adc	r22, r18
    11ac:	83 9f       	mul	r24, r19
    11ae:	a0 0d       	add	r26, r0
    11b0:	61 1d       	adc	r22, r1
    11b2:	22 1f       	adc	r18, r18
    11b4:	74 9f       	mul	r23, r20
    11b6:	33 27       	eor	r19, r19
    11b8:	a0 0d       	add	r26, r0
    11ba:	61 1d       	adc	r22, r1
    11bc:	23 1f       	adc	r18, r19
    11be:	84 9f       	mul	r24, r20
    11c0:	60 0d       	add	r22, r0
    11c2:	21 1d       	adc	r18, r1
    11c4:	82 2f       	mov	r24, r18
    11c6:	76 2f       	mov	r23, r22
    11c8:	6a 2f       	mov	r22, r26
    11ca:	11 24       	eor	r1, r1
    11cc:	9f 57       	subi	r25, 0x7F	; 127
    11ce:	50 40       	sbci	r21, 0x00	; 0
    11d0:	8a f0       	brmi	.+34     	; 0x11f4 <__mulsf3_pse+0x84>
    11d2:	e1 f0       	breq	.+56     	; 0x120c <__mulsf3_pse+0x9c>
    11d4:	88 23       	and	r24, r24
    11d6:	4a f0       	brmi	.+18     	; 0x11ea <__mulsf3_pse+0x7a>
    11d8:	ee 0f       	add	r30, r30
    11da:	ff 1f       	adc	r31, r31
    11dc:	bb 1f       	adc	r27, r27
    11de:	66 1f       	adc	r22, r22
    11e0:	77 1f       	adc	r23, r23
    11e2:	88 1f       	adc	r24, r24
    11e4:	91 50       	subi	r25, 0x01	; 1
    11e6:	50 40       	sbci	r21, 0x00	; 0
    11e8:	a9 f7       	brne	.-22     	; 0x11d4 <__mulsf3_pse+0x64>
    11ea:	9e 3f       	cpi	r25, 0xFE	; 254
    11ec:	51 05       	cpc	r21, r1
    11ee:	70 f0       	brcs	.+28     	; 0x120c <__mulsf3_pse+0x9c>
    11f0:	14 c0       	rjmp	.+40     	; 0x121a <__fp_inf>
    11f2:	a6 cf       	rjmp	.-180    	; 0x1140 <__fp_szero>
    11f4:	5f 3f       	cpi	r21, 0xFF	; 255
    11f6:	ec f3       	brlt	.-6      	; 0x11f2 <__mulsf3_pse+0x82>
    11f8:	98 3e       	cpi	r25, 0xE8	; 232
    11fa:	dc f3       	brlt	.-10     	; 0x11f2 <__mulsf3_pse+0x82>
    11fc:	86 95       	lsr	r24
    11fe:	77 95       	ror	r23
    1200:	67 95       	ror	r22
    1202:	b7 95       	ror	r27
    1204:	f7 95       	ror	r31
    1206:	e7 95       	ror	r30
    1208:	9f 5f       	subi	r25, 0xFF	; 255
    120a:	c1 f7       	brne	.-16     	; 0x11fc <__mulsf3_pse+0x8c>
    120c:	fe 2b       	or	r31, r30
    120e:	88 0f       	add	r24, r24
    1210:	91 1d       	adc	r25, r1
    1212:	96 95       	lsr	r25
    1214:	87 95       	ror	r24
    1216:	97 f9       	bld	r25, 7
    1218:	08 95       	ret

0000121a <__fp_inf>:
    121a:	97 f9       	bld	r25, 7
    121c:	9f 67       	ori	r25, 0x7F	; 127
    121e:	80 e8       	ldi	r24, 0x80	; 128
    1220:	70 e0       	ldi	r23, 0x00	; 0
    1222:	60 e0       	ldi	r22, 0x00	; 0
    1224:	08 95       	ret

00001226 <__fp_nan>:
    1226:	9f ef       	ldi	r25, 0xFF	; 255
    1228:	80 ec       	ldi	r24, 0xC0	; 192
    122a:	08 95       	ret

0000122c <__fp_pscA>:
    122c:	00 24       	eor	r0, r0
    122e:	0a 94       	dec	r0
    1230:	16 16       	cp	r1, r22
    1232:	17 06       	cpc	r1, r23
    1234:	18 06       	cpc	r1, r24
    1236:	09 06       	cpc	r0, r25
    1238:	08 95       	ret

0000123a <__fp_pscB>:
    123a:	00 24       	eor	r0, r0
    123c:	0a 94       	dec	r0
    123e:	12 16       	cp	r1, r18
    1240:	13 06       	cpc	r1, r19
    1242:	14 06       	cpc	r1, r20
    1244:	05 06       	cpc	r0, r21
    1246:	08 95       	ret

00001248 <__fp_round>:
    1248:	09 2e       	mov	r0, r25
    124a:	03 94       	inc	r0
    124c:	00 0c       	add	r0, r0
    124e:	11 f4       	brne	.+4      	; 0x1254 <__fp_round+0xc>
    1250:	88 23       	and	r24, r24
    1252:	52 f0       	brmi	.+20     	; 0x1268 <__fp_round+0x20>
    1254:	bb 0f       	add	r27, r27
    1256:	40 f4       	brcc	.+16     	; 0x1268 <__fp_round+0x20>
    1258:	bf 2b       	or	r27, r31
    125a:	11 f4       	brne	.+4      	; 0x1260 <__fp_round+0x18>
    125c:	60 ff       	sbrs	r22, 0
    125e:	04 c0       	rjmp	.+8      	; 0x1268 <__fp_round+0x20>
    1260:	6f 5f       	subi	r22, 0xFF	; 255
    1262:	7f 4f       	sbci	r23, 0xFF	; 255
    1264:	8f 4f       	sbci	r24, 0xFF	; 255
    1266:	9f 4f       	sbci	r25, 0xFF	; 255
    1268:	08 95       	ret

0000126a <__udivmodhi4>:
    126a:	aa 1b       	sub	r26, r26
    126c:	bb 1b       	sub	r27, r27
    126e:	51 e1       	ldi	r21, 0x11	; 17
    1270:	07 c0       	rjmp	.+14     	; 0x1280 <__udivmodhi4_ep>

00001272 <__udivmodhi4_loop>:
    1272:	aa 1f       	adc	r26, r26
    1274:	bb 1f       	adc	r27, r27
    1276:	a6 17       	cp	r26, r22
    1278:	b7 07       	cpc	r27, r23
    127a:	10 f0       	brcs	.+4      	; 0x1280 <__udivmodhi4_ep>
    127c:	a6 1b       	sub	r26, r22
    127e:	b7 0b       	sbc	r27, r23

00001280 <__udivmodhi4_ep>:
    1280:	88 1f       	adc	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	5a 95       	dec	r21
    1286:	a9 f7       	brne	.-22     	; 0x1272 <__udivmodhi4_loop>
    1288:	80 95       	com	r24
    128a:	90 95       	com	r25
    128c:	bc 01       	movw	r22, r24
    128e:	cd 01       	movw	r24, r26
    1290:	08 95       	ret

00001292 <_exit>:
    1292:	f8 94       	cli

00001294 <__stop_program>:
    1294:	ff cf       	rjmp	.-2      	; 0x1294 <__stop_program>
