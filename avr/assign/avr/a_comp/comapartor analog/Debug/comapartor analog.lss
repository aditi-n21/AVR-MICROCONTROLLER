
comapartor analog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000124  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00000878  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000031f  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000086  00000000  00000000  00000c17  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000294  00000000  00000000  00000c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00000f34  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000009a  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ec       	ldi	r30, 0xCE	; 206
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#include <avr/io.h>
#include <util/delay.h>
void main()
   {
	   DDRD|=(1<<PD0)|(1<<PD1)|(1<<PD2);
  92:	81 b3       	in	r24, 0x11	; 17
  94:	87 60       	ori	r24, 0x07	; 7
  96:	81 bb       	out	0x11, r24	; 17
	   ACSR=0x00;
  98:	18 b8       	out	0x08, r1	; 8
	   ADCSRA&=~(1<<ADEN);
  9a:	37 98       	cbi	0x06, 7	; 6
	  }
	  else
	  {
		  PORTD&=~(1<<PD0);
	  }	
	    ADMUX=0x01;
  9c:	91 e0       	ldi	r25, 0x01	; 1
	   DDRD|=(1<<PD0)|(1<<PD1)|(1<<PD2);
	   ACSR=0x00;
	   ADCSRA&=~(1<<ADEN);
    while(1)
	{
     SFIOR|=(1<<ACME);
  9e:	80 b7       	in	r24, 0x30	; 48
  a0:	88 60       	ori	r24, 0x08	; 8
  a2:	80 bf       	out	0x30, r24	; 48
	  ADMUX=0x00;
  a4:	17 b8       	out	0x07, r1	; 7
	  if(bit_is_set(ACSR,ACO))
  a6:	45 9b       	sbis	0x08, 5	; 8
  a8:	02 c0       	rjmp	.+4      	; 0xae <main+0x1c>
	  {
		  PORTD|=(1<<PD0);
  aa:	90 9a       	sbi	0x12, 0	; 18
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <main+0x1e>
	  }
	  else
	  {
		  PORTD&=~(1<<PD0);
  ae:	90 98       	cbi	0x12, 0	; 18
	  }	
	    ADMUX=0x01;
  b0:	97 b9       	out	0x07, r25	; 7
	  if(bit_is_set(ACSR,ACO))
  b2:	45 9b       	sbis	0x08, 5	; 8
  b4:	02 c0       	rjmp	.+4      	; 0xba <main+0x28>
	  {
		  PORTD|=(1<<PD1);
  b6:	91 9a       	sbi	0x12, 1	; 18
  b8:	01 c0       	rjmp	.+2      	; 0xbc <main+0x2a>
	  }
	  else
	  {
		  PORTD&=~(1<<PD1);
  ba:	91 98       	cbi	0x12, 1	; 18
	  }	
	  
	 SFIOR=0x00;
  bc:	10 be       	out	0x30, r1	; 48
	   if(bit_is_set(ACSR,ACO))
  be:	45 9b       	sbis	0x08, 5	; 8
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <main+0x34>
	   {
		   PORTD|=(1<<PD2);
  c2:	92 9a       	sbi	0x12, 2	; 18
  c4:	ec cf       	rjmp	.-40     	; 0x9e <main+0xc>
	   }
	   else
	   {
		   PORTD&=~(1<<PD2);
  c6:	92 98       	cbi	0x12, 2	; 18
  c8:	ea cf       	rjmp	.-44     	; 0x9e <main+0xc>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
