
Serial_pc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f2a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00001638  00000000  00000000  00000f80  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000057e  00000000  00000000  000025b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00002b38  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000865  00000000  00000000  00002bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000016b  00000000  00000000  0000341d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004dc  00000000  00000000  00003588  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000114  00000000  00000000  00003a64  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000109  00000000  00000000  00003b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000213  00000000  00000000  00003c81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e2       	ldi	r30, 0x2A	; 42
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 93 07 	jmp	0xf26	; 0xf26 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
void usart_init();
void usart_putch(unsigned char send);
unsigned int usart_getch();
 
int main()
{
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	60 97       	sbiw	r28, 0x10	; 16
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	unsigned char i,value;
	
	DDRB=0xff;		
  aa:	87 e3       	ldi	r24, 0x37	; 55
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	fc 01       	movw	r30, r24
  b2:	20 83       	st	Z, r18
	DDRA=0xff;
  b4:	8a e3       	ldi	r24, 0x3A	; 58
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	2f ef       	ldi	r18, 0xFF	; 255
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18
	DDRD=0xfe;	
  be:	81 e3       	ldi	r24, 0x31	; 49
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	2e ef       	ldi	r18, 0xFE	; 254
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
	DDRC=0xff;
  c8:	84 e3       	ldi	r24, 0x34	; 52
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	fc 01       	movw	r30, r24
  d0:	20 83       	st	Z, r18
	usart_init();		// initialization of USART
  d2:	0e 94 3b 06 	call	0xc76	; 0xc76 <usart_init>
	init_LCD();		//initialization of LCD
  d6:	0e 94 03 01 	call	0x206	; 0x206 <init_LCD>
	{
		//usart_putch('A'
		//usart_putch('B');
		//usart_putch('C');
		//usart_putch('D');
		LCD_cmd(0x01);
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_cmd>
		for(i=0;i<16;i++)
  e0:	19 82       	std	Y+1, r1	; 0x01
  e2:	0c c0       	rjmp	.+24     	; 0xfc <main+0x6a>
		{
		value=usart_getch();	// get data from serial port
  e4:	0e 94 73 06 	call	0xce6	; 0xce6 <usart_getch>
  e8:	8a 83       	std	Y+2, r24	; 0x02
		LCD_write(value);
  ea:	8a 81       	ldd	r24, Y+2	; 0x02
  ec:	0e 94 14 05 	call	0xa28	; 0xa28 <LCD_write>
		usart_putch(value);
  f0:	8a 81       	ldd	r24, Y+2	; 0x02
  f2:	0e 94 59 06 	call	0xcb2	; 0xcb2 <usart_putch>
		//usart_putch('A'
		//usart_putch('B');
		//usart_putch('C');
		//usart_putch('D');
		LCD_cmd(0x01);
		for(i=0;i<16;i++)
  f6:	89 81       	ldd	r24, Y+1	; 0x01
  f8:	8f 5f       	subi	r24, 0xFF	; 255
  fa:	89 83       	std	Y+1, r24	; 0x01
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	80 31       	cpi	r24, 0x10	; 16
 100:	88 f3       	brcs	.-30     	; 0xe4 <main+0x52>
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	a8 e4       	ldi	r26, 0x48	; 72
 108:	b2 e4       	ldi	r27, 0x42	; 66
 10a:	8b 83       	std	Y+3, r24	; 0x03
 10c:	9c 83       	std	Y+4, r25	; 0x04
 10e:	ad 83       	std	Y+5, r26	; 0x05
 110:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 112:	6b 81       	ldd	r22, Y+3	; 0x03
 114:	7c 81       	ldd	r23, Y+4	; 0x04
 116:	8d 81       	ldd	r24, Y+5	; 0x05
 118:	9e 81       	ldd	r25, Y+6	; 0x06
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	4a ef       	ldi	r20, 0xFA	; 250
 120:	54 e4       	ldi	r21, 0x44	; 68
 122:	0e 94 08 07 	call	0xe10	; 0xe10 <__mulsf3>
 126:	dc 01       	movw	r26, r24
 128:	cb 01       	movw	r24, r22
 12a:	8f 83       	std	Y+7, r24	; 0x07
 12c:	98 87       	std	Y+8, r25	; 0x08
 12e:	a9 87       	std	Y+9, r26	; 0x09
 130:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 132:	11 e0       	ldi	r17, 0x01	; 1
 134:	6f 81       	ldd	r22, Y+7	; 0x07
 136:	78 85       	ldd	r23, Y+8	; 0x08
 138:	89 85       	ldd	r24, Y+9	; 0x09
 13a:	9a 85       	ldd	r25, Y+10	; 0x0a
 13c:	20 e0       	ldi	r18, 0x00	; 0
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	40 e8       	ldi	r20, 0x80	; 128
 142:	5f e3       	ldi	r21, 0x3F	; 63
 144:	0e 94 87 06 	call	0xd0e	; 0xd0e <__cmpsf2>
 148:	88 23       	and	r24, r24
 14a:	0c f0       	brlt	.+2      	; 0x14e <main+0xbc>
 14c:	10 e0       	ldi	r17, 0x00	; 0
 14e:	11 23       	and	r17, r17
 150:	29 f0       	breq	.+10     	; 0x15c <main+0xca>
		__ticks = 1;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	9c 87       	std	Y+12, r25	; 0x0c
 158:	8b 87       	std	Y+11, r24	; 0x0b
 15a:	46 c0       	rjmp	.+140    	; 0x1e8 <main+0x156>
	else if (__tmp > 65535)
 15c:	11 e0       	ldi	r17, 0x01	; 1
 15e:	6f 81       	ldd	r22, Y+7	; 0x07
 160:	78 85       	ldd	r23, Y+8	; 0x08
 162:	89 85       	ldd	r24, Y+9	; 0x09
 164:	9a 85       	ldd	r25, Y+10	; 0x0a
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	3f ef       	ldi	r19, 0xFF	; 255
 16a:	4f e7       	ldi	r20, 0x7F	; 127
 16c:	57 e4       	ldi	r21, 0x47	; 71
 16e:	0e 94 04 07 	call	0xe08	; 0xe08 <__gesf2>
 172:	18 16       	cp	r1, r24
 174:	0c f0       	brlt	.+2      	; 0x178 <main+0xe6>
 176:	10 e0       	ldi	r17, 0x00	; 0
 178:	11 23       	and	r17, r17
 17a:	61 f1       	breq	.+88     	; 0x1d4 <main+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 17c:	6b 81       	ldd	r22, Y+3	; 0x03
 17e:	7c 81       	ldd	r23, Y+4	; 0x04
 180:	8d 81       	ldd	r24, Y+5	; 0x05
 182:	9e 81       	ldd	r25, Y+6	; 0x06
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	40 e2       	ldi	r20, 0x20	; 32
 18a:	51 e4       	ldi	r21, 0x41	; 65
 18c:	0e 94 08 07 	call	0xe10	; 0xe10 <__mulsf3>
 190:	dc 01       	movw	r26, r24
 192:	cb 01       	movw	r24, r22
 194:	bc 01       	movw	r22, r24
 196:	cd 01       	movw	r24, r26
 198:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fixunssfsi>
 19c:	dc 01       	movw	r26, r24
 19e:	cb 01       	movw	r24, r22
 1a0:	9c 87       	std	Y+12, r25	; 0x0c
 1a2:	8b 87       	std	Y+11, r24	; 0x0b
 1a4:	12 c0       	rjmp	.+36     	; 0x1ca <main+0x138>
 1a6:	88 ec       	ldi	r24, 0xC8	; 200
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	9e 87       	std	Y+14, r25	; 0x0e
 1ac:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1ae:	8d 85       	ldd	r24, Y+13	; 0x0d
 1b0:	9e 85       	ldd	r25, Y+14	; 0x0e
 1b2:	8c 01       	movw	r16, r24
 1b4:	c8 01       	movw	r24, r16
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <main+0x124>
 1ba:	8c 01       	movw	r16, r24
 1bc:	1e 87       	std	Y+14, r17	; 0x0e
 1be:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c0:	8b 85       	ldd	r24, Y+11	; 0x0b
 1c2:	9c 85       	ldd	r25, Y+12	; 0x0c
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	9c 87       	std	Y+12, r25	; 0x0c
 1c8:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ca:	8b 85       	ldd	r24, Y+11	; 0x0b
 1cc:	9c 85       	ldd	r25, Y+12	; 0x0c
 1ce:	00 97       	sbiw	r24, 0x00	; 0
 1d0:	51 f7       	brne	.-44     	; 0x1a6 <main+0x114>
 1d2:	18 c0       	rjmp	.+48     	; 0x204 <main+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1d4:	6f 81       	ldd	r22, Y+7	; 0x07
 1d6:	78 85       	ldd	r23, Y+8	; 0x08
 1d8:	89 85       	ldd	r24, Y+9	; 0x09
 1da:	9a 85       	ldd	r25, Y+10	; 0x0a
 1dc:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fixunssfsi>
 1e0:	dc 01       	movw	r26, r24
 1e2:	cb 01       	movw	r24, r22
 1e4:	9c 87       	std	Y+12, r25	; 0x0c
 1e6:	8b 87       	std	Y+11, r24	; 0x0b
 1e8:	8b 85       	ldd	r24, Y+11	; 0x0b
 1ea:	9c 85       	ldd	r25, Y+12	; 0x0c
 1ec:	98 8b       	std	Y+16, r25	; 0x10
 1ee:	8f 87       	std	Y+15, r24	; 0x0f
 1f0:	8f 85       	ldd	r24, Y+15	; 0x0f
 1f2:	98 89       	ldd	r25, Y+16	; 0x10
 1f4:	8c 01       	movw	r16, r24
 1f6:	f8 01       	movw	r30, r16
 1f8:	31 97       	sbiw	r30, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <main+0x166>
 1fc:	8f 01       	movw	r16, r30
 1fe:	18 8b       	std	Y+16, r17	; 0x10
 200:	0f 87       	std	Y+15, r16	; 0x0f
		
	//	LCD_write('B');
	//	LCD_write('E');
	//	_delay_ms(50);
		
	}
 202:	6b cf       	rjmp	.-298    	; 0xda <main+0x48>
 204:	6a cf       	rjmp	.-300    	; 0xda <main+0x48>

00000206 <init_LCD>:
	return 0;
}
 
void init_LCD(void)
{
 206:	0f 93       	push	r16
 208:	1f 93       	push	r17
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62
 212:	c6 54       	subi	r28, 0x46	; 70
 214:	d0 40       	sbci	r29, 0x00	; 0
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	f8 94       	cli
 21a:	de bf       	out	0x3e, r29	; 62
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	cd bf       	out	0x3d, r28	; 61
	LCD_cmd(0x38);		//initialization of 16X2 LCD in 8bit mode
 220:	88 e3       	ldi	r24, 0x38	; 56
 222:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_cmd>
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	a0 e8       	ldi	r26, 0x80	; 128
 22c:	bf e3       	ldi	r27, 0x3F	; 63
 22e:	89 83       	std	Y+1, r24	; 0x01
 230:	9a 83       	std	Y+2, r25	; 0x02
 232:	ab 83       	std	Y+3, r26	; 0x03
 234:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 236:	69 81       	ldd	r22, Y+1	; 0x01
 238:	7a 81       	ldd	r23, Y+2	; 0x02
 23a:	8b 81       	ldd	r24, Y+3	; 0x03
 23c:	9c 81       	ldd	r25, Y+4	; 0x04
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	4a ef       	ldi	r20, 0xFA	; 250
 244:	54 e4       	ldi	r21, 0x44	; 68
 246:	0e 94 08 07 	call	0xe10	; 0xe10 <__mulsf3>
 24a:	dc 01       	movw	r26, r24
 24c:	cb 01       	movw	r24, r22
 24e:	8d 83       	std	Y+5, r24	; 0x05
 250:	9e 83       	std	Y+6, r25	; 0x06
 252:	af 83       	std	Y+7, r26	; 0x07
 254:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 256:	11 e0       	ldi	r17, 0x01	; 1
 258:	6d 81       	ldd	r22, Y+5	; 0x05
 25a:	7e 81       	ldd	r23, Y+6	; 0x06
 25c:	8f 81       	ldd	r24, Y+7	; 0x07
 25e:	98 85       	ldd	r25, Y+8	; 0x08
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	40 e8       	ldi	r20, 0x80	; 128
 266:	5f e3       	ldi	r21, 0x3F	; 63
 268:	0e 94 87 06 	call	0xd0e	; 0xd0e <__cmpsf2>
 26c:	88 23       	and	r24, r24
 26e:	0c f0       	brlt	.+2      	; 0x272 <init_LCD+0x6c>
 270:	10 e0       	ldi	r17, 0x00	; 0
 272:	11 23       	and	r17, r17
 274:	29 f0       	breq	.+10     	; 0x280 <init_LCD+0x7a>
		__ticks = 1;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	9a 87       	std	Y+10, r25	; 0x0a
 27c:	89 87       	std	Y+9, r24	; 0x09
 27e:	46 c0       	rjmp	.+140    	; 0x30c <init_LCD+0x106>
	else if (__tmp > 65535)
 280:	11 e0       	ldi	r17, 0x01	; 1
 282:	6d 81       	ldd	r22, Y+5	; 0x05
 284:	7e 81       	ldd	r23, Y+6	; 0x06
 286:	8f 81       	ldd	r24, Y+7	; 0x07
 288:	98 85       	ldd	r25, Y+8	; 0x08
 28a:	20 e0       	ldi	r18, 0x00	; 0
 28c:	3f ef       	ldi	r19, 0xFF	; 255
 28e:	4f e7       	ldi	r20, 0x7F	; 127
 290:	57 e4       	ldi	r21, 0x47	; 71
 292:	0e 94 04 07 	call	0xe08	; 0xe08 <__gesf2>
 296:	18 16       	cp	r1, r24
 298:	0c f0       	brlt	.+2      	; 0x29c <init_LCD+0x96>
 29a:	10 e0       	ldi	r17, 0x00	; 0
 29c:	11 23       	and	r17, r17
 29e:	61 f1       	breq	.+88     	; 0x2f8 <init_LCD+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2a0:	69 81       	ldd	r22, Y+1	; 0x01
 2a2:	7a 81       	ldd	r23, Y+2	; 0x02
 2a4:	8b 81       	ldd	r24, Y+3	; 0x03
 2a6:	9c 81       	ldd	r25, Y+4	; 0x04
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	40 e2       	ldi	r20, 0x20	; 32
 2ae:	51 e4       	ldi	r21, 0x41	; 65
 2b0:	0e 94 08 07 	call	0xe10	; 0xe10 <__mulsf3>
 2b4:	dc 01       	movw	r26, r24
 2b6:	cb 01       	movw	r24, r22
 2b8:	bc 01       	movw	r22, r24
 2ba:	cd 01       	movw	r24, r26
 2bc:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fixunssfsi>
 2c0:	dc 01       	movw	r26, r24
 2c2:	cb 01       	movw	r24, r22
 2c4:	9a 87       	std	Y+10, r25	; 0x0a
 2c6:	89 87       	std	Y+9, r24	; 0x09
 2c8:	12 c0       	rjmp	.+36     	; 0x2ee <init_LCD+0xe8>
 2ca:	88 ec       	ldi	r24, 0xC8	; 200
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	9c 87       	std	Y+12, r25	; 0x0c
 2d0:	8b 87       	std	Y+11, r24	; 0x0b
 2d2:	8b 85       	ldd	r24, Y+11	; 0x0b
 2d4:	9c 85       	ldd	r25, Y+12	; 0x0c
 2d6:	8c 01       	movw	r16, r24
 2d8:	c8 01       	movw	r24, r16
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <init_LCD+0xd4>
 2de:	8c 01       	movw	r16, r24
 2e0:	1c 87       	std	Y+12, r17	; 0x0c
 2e2:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2e4:	89 85       	ldd	r24, Y+9	; 0x09
 2e6:	9a 85       	ldd	r25, Y+10	; 0x0a
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	9a 87       	std	Y+10, r25	; 0x0a
 2ec:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2ee:	89 85       	ldd	r24, Y+9	; 0x09
 2f0:	9a 85       	ldd	r25, Y+10	; 0x0a
 2f2:	00 97       	sbiw	r24, 0x00	; 0
 2f4:	51 f7       	brne	.-44     	; 0x2ca <init_LCD+0xc4>
 2f6:	17 c0       	rjmp	.+46     	; 0x326 <init_LCD+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2f8:	6d 81       	ldd	r22, Y+5	; 0x05
 2fa:	7e 81       	ldd	r23, Y+6	; 0x06
 2fc:	8f 81       	ldd	r24, Y+7	; 0x07
 2fe:	98 85       	ldd	r25, Y+8	; 0x08
 300:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fixunssfsi>
 304:	dc 01       	movw	r26, r24
 306:	cb 01       	movw	r24, r22
 308:	9a 87       	std	Y+10, r25	; 0x0a
 30a:	89 87       	std	Y+9, r24	; 0x09
 30c:	89 85       	ldd	r24, Y+9	; 0x09
 30e:	9a 85       	ldd	r25, Y+10	; 0x0a
 310:	9e 87       	std	Y+14, r25	; 0x0e
 312:	8d 87       	std	Y+13, r24	; 0x0d
 314:	8d 85       	ldd	r24, Y+13	; 0x0d
 316:	9e 85       	ldd	r25, Y+14	; 0x0e
 318:	8c 01       	movw	r16, r24
 31a:	f8 01       	movw	r30, r16
 31c:	31 97       	sbiw	r30, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <init_LCD+0x116>
 320:	8f 01       	movw	r16, r30
 322:	1e 87       	std	Y+14, r17	; 0x0e
 324:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);
 
	LCD_cmd(0x01);		// clear LCD
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_cmd>
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	a0 e8       	ldi	r26, 0x80	; 128
 332:	bf e3       	ldi	r27, 0x3F	; 63
 334:	8f 87       	std	Y+15, r24	; 0x0f
 336:	98 8b       	std	Y+16, r25	; 0x10
 338:	a9 8b       	std	Y+17, r26	; 0x11
 33a:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 33c:	6f 85       	ldd	r22, Y+15	; 0x0f
 33e:	78 89       	ldd	r23, Y+16	; 0x10
 340:	89 89       	ldd	r24, Y+17	; 0x11
 342:	9a 89       	ldd	r25, Y+18	; 0x12
 344:	20 e0       	ldi	r18, 0x00	; 0
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	4a ef       	ldi	r20, 0xFA	; 250
 34a:	54 e4       	ldi	r21, 0x44	; 68
 34c:	0e 94 08 07 	call	0xe10	; 0xe10 <__mulsf3>
 350:	dc 01       	movw	r26, r24
 352:	cb 01       	movw	r24, r22
 354:	8b 8b       	std	Y+19, r24	; 0x13
 356:	9c 8b       	std	Y+20, r25	; 0x14
 358:	ad 8b       	std	Y+21, r26	; 0x15
 35a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 35c:	11 e0       	ldi	r17, 0x01	; 1
 35e:	6b 89       	ldd	r22, Y+19	; 0x13
 360:	7c 89       	ldd	r23, Y+20	; 0x14
 362:	8d 89       	ldd	r24, Y+21	; 0x15
 364:	9e 89       	ldd	r25, Y+22	; 0x16
 366:	20 e0       	ldi	r18, 0x00	; 0
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	40 e8       	ldi	r20, 0x80	; 128
 36c:	5f e3       	ldi	r21, 0x3F	; 63
 36e:	0e 94 87 06 	call	0xd0e	; 0xd0e <__cmpsf2>
 372:	88 23       	and	r24, r24
 374:	0c f0       	brlt	.+2      	; 0x378 <init_LCD+0x172>
 376:	10 e0       	ldi	r17, 0x00	; 0
 378:	11 23       	and	r17, r17
 37a:	29 f0       	breq	.+10     	; 0x386 <init_LCD+0x180>
		__ticks = 1;
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	98 8f       	std	Y+24, r25	; 0x18
 382:	8f 8b       	std	Y+23, r24	; 0x17
 384:	46 c0       	rjmp	.+140    	; 0x412 <init_LCD+0x20c>
	else if (__tmp > 65535)
 386:	11 e0       	ldi	r17, 0x01	; 1
 388:	6b 89       	ldd	r22, Y+19	; 0x13
 38a:	7c 89       	ldd	r23, Y+20	; 0x14
 38c:	8d 89       	ldd	r24, Y+21	; 0x15
 38e:	9e 89       	ldd	r25, Y+22	; 0x16
 390:	20 e0       	ldi	r18, 0x00	; 0
 392:	3f ef       	ldi	r19, 0xFF	; 255
 394:	4f e7       	ldi	r20, 0x7F	; 127
 396:	57 e4       	ldi	r21, 0x47	; 71
 398:	0e 94 04 07 	call	0xe08	; 0xe08 <__gesf2>
 39c:	18 16       	cp	r1, r24
 39e:	0c f0       	brlt	.+2      	; 0x3a2 <init_LCD+0x19c>
 3a0:	10 e0       	ldi	r17, 0x00	; 0
 3a2:	11 23       	and	r17, r17
 3a4:	61 f1       	breq	.+88     	; 0x3fe <init_LCD+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3a6:	6f 85       	ldd	r22, Y+15	; 0x0f
 3a8:	78 89       	ldd	r23, Y+16	; 0x10
 3aa:	89 89       	ldd	r24, Y+17	; 0x11
 3ac:	9a 89       	ldd	r25, Y+18	; 0x12
 3ae:	20 e0       	ldi	r18, 0x00	; 0
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	40 e2       	ldi	r20, 0x20	; 32
 3b4:	51 e4       	ldi	r21, 0x41	; 65
 3b6:	0e 94 08 07 	call	0xe10	; 0xe10 <__mulsf3>
 3ba:	dc 01       	movw	r26, r24
 3bc:	cb 01       	movw	r24, r22
 3be:	bc 01       	movw	r22, r24
 3c0:	cd 01       	movw	r24, r26
 3c2:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fixunssfsi>
 3c6:	dc 01       	movw	r26, r24
 3c8:	cb 01       	movw	r24, r22
 3ca:	98 8f       	std	Y+24, r25	; 0x18
 3cc:	8f 8b       	std	Y+23, r24	; 0x17
 3ce:	12 c0       	rjmp	.+36     	; 0x3f4 <init_LCD+0x1ee>
 3d0:	88 ec       	ldi	r24, 0xC8	; 200
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	9a 8f       	std	Y+26, r25	; 0x1a
 3d6:	89 8f       	std	Y+25, r24	; 0x19
 3d8:	89 8d       	ldd	r24, Y+25	; 0x19
 3da:	9a 8d       	ldd	r25, Y+26	; 0x1a
 3dc:	8c 01       	movw	r16, r24
 3de:	c8 01       	movw	r24, r16
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <init_LCD+0x1da>
 3e4:	8c 01       	movw	r16, r24
 3e6:	1a 8f       	std	Y+26, r17	; 0x1a
 3e8:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3ea:	8f 89       	ldd	r24, Y+23	; 0x17
 3ec:	98 8d       	ldd	r25, Y+24	; 0x18
 3ee:	01 97       	sbiw	r24, 0x01	; 1
 3f0:	98 8f       	std	Y+24, r25	; 0x18
 3f2:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3f4:	8f 89       	ldd	r24, Y+23	; 0x17
 3f6:	98 8d       	ldd	r25, Y+24	; 0x18
 3f8:	00 97       	sbiw	r24, 0x00	; 0
 3fa:	51 f7       	brne	.-44     	; 0x3d0 <init_LCD+0x1ca>
 3fc:	17 c0       	rjmp	.+46     	; 0x42c <init_LCD+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3fe:	6b 89       	ldd	r22, Y+19	; 0x13
 400:	7c 89       	ldd	r23, Y+20	; 0x14
 402:	8d 89       	ldd	r24, Y+21	; 0x15
 404:	9e 89       	ldd	r25, Y+22	; 0x16
 406:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fixunssfsi>
 40a:	dc 01       	movw	r26, r24
 40c:	cb 01       	movw	r24, r22
 40e:	98 8f       	std	Y+24, r25	; 0x18
 410:	8f 8b       	std	Y+23, r24	; 0x17
 412:	8f 89       	ldd	r24, Y+23	; 0x17
 414:	98 8d       	ldd	r25, Y+24	; 0x18
 416:	9c 8f       	std	Y+28, r25	; 0x1c
 418:	8b 8f       	std	Y+27, r24	; 0x1b
 41a:	8b 8d       	ldd	r24, Y+27	; 0x1b
 41c:	9c 8d       	ldd	r25, Y+28	; 0x1c
 41e:	8c 01       	movw	r16, r24
 420:	f8 01       	movw	r30, r16
 422:	31 97       	sbiw	r30, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <init_LCD+0x21c>
 426:	8f 01       	movw	r16, r30
 428:	1c 8f       	std	Y+28, r17	; 0x1c
 42a:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(1);
 
	LCD_cmd(0x0E);		// cursor ON
 42c:	8e e0       	ldi	r24, 0x0E	; 14
 42e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_cmd>
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	a0 e8       	ldi	r26, 0x80	; 128
 438:	bf e3       	ldi	r27, 0x3F	; 63
 43a:	8d 8f       	std	Y+29, r24	; 0x1d
 43c:	9e 8f       	std	Y+30, r25	; 0x1e
 43e:	af 8f       	std	Y+31, r26	; 0x1f
 440:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 442:	6d 8d       	ldd	r22, Y+29	; 0x1d
 444:	7e 8d       	ldd	r23, Y+30	; 0x1e
 446:	8f 8d       	ldd	r24, Y+31	; 0x1f
 448:	98 a1       	lds	r25, 0x48
 44a:	20 e0       	ldi	r18, 0x00	; 0
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	4a ef       	ldi	r20, 0xFA	; 250
 450:	54 e4       	ldi	r21, 0x44	; 68
 452:	0e 94 08 07 	call	0xe10	; 0xe10 <__mulsf3>
 456:	dc 01       	movw	r26, r24
 458:	cb 01       	movw	r24, r22
 45a:	89 a3       	lds	r24, 0x59
 45c:	9a a3       	lds	r25, 0x5a
 45e:	ab a3       	lds	r26, 0x5b
 460:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
 462:	11 e0       	ldi	r17, 0x01	; 1
 464:	69 a1       	lds	r22, 0x49
 466:	7a a1       	lds	r23, 0x4a
 468:	8b a1       	lds	r24, 0x4b
 46a:	9c a1       	lds	r25, 0x4c
 46c:	20 e0       	ldi	r18, 0x00	; 0
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	40 e8       	ldi	r20, 0x80	; 128
 472:	5f e3       	ldi	r21, 0x3F	; 63
 474:	0e 94 87 06 	call	0xd0e	; 0xd0e <__cmpsf2>
 478:	88 23       	and	r24, r24
 47a:	0c f0       	brlt	.+2      	; 0x47e <__stack+0x1f>
 47c:	10 e0       	ldi	r17, 0x00	; 0
 47e:	11 23       	and	r17, r17
 480:	29 f0       	breq	.+10     	; 0x48c <__stack+0x2d>
		__ticks = 1;
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	9e a3       	lds	r25, 0x5e
 488:	8d a3       	lds	r24, 0x5d
 48a:	46 c0       	rjmp	.+140    	; 0x518 <__stack+0xb9>
	else if (__tmp > 65535)
 48c:	11 e0       	ldi	r17, 0x01	; 1
 48e:	69 a1       	lds	r22, 0x49
 490:	7a a1       	lds	r23, 0x4a
 492:	8b a1       	lds	r24, 0x4b
 494:	9c a1       	lds	r25, 0x4c
 496:	20 e0       	ldi	r18, 0x00	; 0
 498:	3f ef       	ldi	r19, 0xFF	; 255
 49a:	4f e7       	ldi	r20, 0x7F	; 127
 49c:	57 e4       	ldi	r21, 0x47	; 71
 49e:	0e 94 04 07 	call	0xe08	; 0xe08 <__gesf2>
 4a2:	18 16       	cp	r1, r24
 4a4:	0c f0       	brlt	.+2      	; 0x4a8 <__stack+0x49>
 4a6:	10 e0       	ldi	r17, 0x00	; 0
 4a8:	11 23       	and	r17, r17
 4aa:	61 f1       	breq	.+88     	; 0x504 <__stack+0xa5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4ac:	6d 8d       	ldd	r22, Y+29	; 0x1d
 4ae:	7e 8d       	ldd	r23, Y+30	; 0x1e
 4b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
 4b2:	98 a1       	lds	r25, 0x48
 4b4:	20 e0       	ldi	r18, 0x00	; 0
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	40 e2       	ldi	r20, 0x20	; 32
 4ba:	51 e4       	ldi	r21, 0x41	; 65
 4bc:	0e 94 08 07 	call	0xe10	; 0xe10 <__mulsf3>
 4c0:	dc 01       	movw	r26, r24
 4c2:	cb 01       	movw	r24, r22
 4c4:	bc 01       	movw	r22, r24
 4c6:	cd 01       	movw	r24, r26
 4c8:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fixunssfsi>
 4cc:	dc 01       	movw	r26, r24
 4ce:	cb 01       	movw	r24, r22
 4d0:	9e a3       	lds	r25, 0x5e
 4d2:	8d a3       	lds	r24, 0x5d
 4d4:	12 c0       	rjmp	.+36     	; 0x4fa <__stack+0x9b>
 4d6:	88 ec       	ldi	r24, 0xC8	; 200
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	98 a7       	lds	r25, 0x78
 4dc:	8f a3       	lds	r24, 0x5f
 4de:	8f a1       	lds	r24, 0x4f
 4e0:	98 a5       	lds	r25, 0x68
 4e2:	8c 01       	movw	r16, r24
 4e4:	c8 01       	movw	r24, r16
 4e6:	01 97       	sbiw	r24, 0x01	; 1
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <__stack+0x87>
 4ea:	8c 01       	movw	r16, r24
 4ec:	18 a7       	lds	r17, 0x78
 4ee:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4f0:	8d a1       	lds	r24, 0x4d
 4f2:	9e a1       	lds	r25, 0x4e
 4f4:	01 97       	sbiw	r24, 0x01	; 1
 4f6:	9e a3       	lds	r25, 0x5e
 4f8:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4fa:	8d a1       	lds	r24, 0x4d
 4fc:	9e a1       	lds	r25, 0x4e
 4fe:	00 97       	sbiw	r24, 0x00	; 0
 500:	51 f7       	brne	.-44     	; 0x4d6 <__stack+0x77>
 502:	17 c0       	rjmp	.+46     	; 0x532 <__stack+0xd3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 504:	69 a1       	lds	r22, 0x49
 506:	7a a1       	lds	r23, 0x4a
 508:	8b a1       	lds	r24, 0x4b
 50a:	9c a1       	lds	r25, 0x4c
 50c:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fixunssfsi>
 510:	dc 01       	movw	r26, r24
 512:	cb 01       	movw	r24, r22
 514:	9e a3       	lds	r25, 0x5e
 516:	8d a3       	lds	r24, 0x5d
 518:	8d a1       	lds	r24, 0x4d
 51a:	9e a1       	lds	r25, 0x4e
 51c:	9a a7       	lds	r25, 0x7a
 51e:	89 a7       	lds	r24, 0x79
 520:	89 a5       	lds	r24, 0x69
 522:	9a a5       	lds	r25, 0x6a
 524:	8c 01       	movw	r16, r24
 526:	f8 01       	movw	r30, r16
 528:	31 97       	sbiw	r30, 0x01	; 1
 52a:	f1 f7       	brne	.-4      	; 0x528 <__stack+0xc9>
 52c:	8f 01       	movw	r16, r30
 52e:	1a a7       	lds	r17, 0x7a
 530:	09 a7       	lds	r16, 0x79
	_delay_ms(1);
	LCD_cmd(0x06);
 532:	86 e0       	ldi	r24, 0x06	; 6
 534:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_cmd>
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	a0 e8       	ldi	r26, 0x80	; 128
 53e:	bf e3       	ldi	r27, 0x3F	; 63
 540:	8b a7       	lds	r24, 0x7b
 542:	9c a7       	lds	r25, 0x7c
 544:	ad a7       	lds	r26, 0x7d
 546:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 548:	6b a5       	lds	r22, 0x6b
 54a:	7c a5       	lds	r23, 0x6c
 54c:	8d a5       	lds	r24, 0x6d
 54e:	9e a5       	lds	r25, 0x6e
 550:	20 e0       	ldi	r18, 0x00	; 0
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	4a ef       	ldi	r20, 0xFA	; 250
 556:	54 e4       	ldi	r21, 0x44	; 68
 558:	0e 94 08 07 	call	0xe10	; 0xe10 <__mulsf3>
 55c:	dc 01       	movw	r26, r24
 55e:	cb 01       	movw	r24, r22
 560:	8f a7       	lds	r24, 0x7f
 562:	98 ab       	sts	0x58, r25
 564:	a9 ab       	sts	0x59, r26
 566:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
 568:	11 e0       	ldi	r17, 0x01	; 1
 56a:	6f a5       	lds	r22, 0x6f
 56c:	78 a9       	sts	0x48, r23
 56e:	89 a9       	sts	0x49, r24
 570:	9a a9       	sts	0x4a, r25
 572:	20 e0       	ldi	r18, 0x00	; 0
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	40 e8       	ldi	r20, 0x80	; 128
 578:	5f e3       	ldi	r21, 0x3F	; 63
 57a:	0e 94 87 06 	call	0xd0e	; 0xd0e <__cmpsf2>
 57e:	88 23       	and	r24, r24
 580:	0c f0       	brlt	.+2      	; 0x584 <__stack+0x125>
 582:	10 e0       	ldi	r17, 0x00	; 0
 584:	11 23       	and	r17, r17
 586:	29 f0       	breq	.+10     	; 0x592 <__stack+0x133>
		__ticks = 1;
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	9c ab       	sts	0x5c, r25
 58e:	8b ab       	sts	0x5b, r24
 590:	46 c0       	rjmp	.+140    	; 0x61e <__stack+0x1bf>
	else if (__tmp > 65535)
 592:	11 e0       	ldi	r17, 0x01	; 1
 594:	6f a5       	lds	r22, 0x6f
 596:	78 a9       	sts	0x48, r23
 598:	89 a9       	sts	0x49, r24
 59a:	9a a9       	sts	0x4a, r25
 59c:	20 e0       	ldi	r18, 0x00	; 0
 59e:	3f ef       	ldi	r19, 0xFF	; 255
 5a0:	4f e7       	ldi	r20, 0x7F	; 127
 5a2:	57 e4       	ldi	r21, 0x47	; 71
 5a4:	0e 94 04 07 	call	0xe08	; 0xe08 <__gesf2>
 5a8:	18 16       	cp	r1, r24
 5aa:	0c f0       	brlt	.+2      	; 0x5ae <__stack+0x14f>
 5ac:	10 e0       	ldi	r17, 0x00	; 0
 5ae:	11 23       	and	r17, r17
 5b0:	61 f1       	breq	.+88     	; 0x60a <__stack+0x1ab>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 5b2:	6b a5       	lds	r22, 0x6b
 5b4:	7c a5       	lds	r23, 0x6c
 5b6:	8d a5       	lds	r24, 0x6d
 5b8:	9e a5       	lds	r25, 0x6e
 5ba:	20 e0       	ldi	r18, 0x00	; 0
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	40 e2       	ldi	r20, 0x20	; 32
 5c0:	51 e4       	ldi	r21, 0x41	; 65
 5c2:	0e 94 08 07 	call	0xe10	; 0xe10 <__mulsf3>
 5c6:	dc 01       	movw	r26, r24
 5c8:	cb 01       	movw	r24, r22
 5ca:	bc 01       	movw	r22, r24
 5cc:	cd 01       	movw	r24, r26
 5ce:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fixunssfsi>
 5d2:	dc 01       	movw	r26, r24
 5d4:	cb 01       	movw	r24, r22
 5d6:	9c ab       	sts	0x5c, r25
 5d8:	8b ab       	sts	0x5b, r24
 5da:	12 c0       	rjmp	.+36     	; 0x600 <__stack+0x1a1>
 5dc:	88 ec       	ldi	r24, 0xC8	; 200
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	9e ab       	sts	0x5e, r25
 5e2:	8d ab       	sts	0x5d, r24
 5e4:	8d a9       	sts	0x4d, r24
 5e6:	9e a9       	sts	0x4e, r25
 5e8:	8c 01       	movw	r16, r24
 5ea:	c8 01       	movw	r24, r16
 5ec:	01 97       	sbiw	r24, 0x01	; 1
 5ee:	f1 f7       	brne	.-4      	; 0x5ec <__stack+0x18d>
 5f0:	8c 01       	movw	r16, r24
 5f2:	1e ab       	sts	0x5e, r17
 5f4:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5f6:	8b a9       	sts	0x4b, r24
 5f8:	9c a9       	sts	0x4c, r25
 5fa:	01 97       	sbiw	r24, 0x01	; 1
 5fc:	9c ab       	sts	0x5c, r25
 5fe:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 600:	8b a9       	sts	0x4b, r24
 602:	9c a9       	sts	0x4c, r25
 604:	00 97       	sbiw	r24, 0x00	; 0
 606:	51 f7       	brne	.-44     	; 0x5dc <__stack+0x17d>
 608:	17 c0       	rjmp	.+46     	; 0x638 <__stack+0x1d9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 60a:	6f a5       	lds	r22, 0x6f
 60c:	78 a9       	sts	0x48, r23
 60e:	89 a9       	sts	0x49, r24
 610:	9a a9       	sts	0x4a, r25
 612:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fixunssfsi>
 616:	dc 01       	movw	r26, r24
 618:	cb 01       	movw	r24, r22
 61a:	9c ab       	sts	0x5c, r25
 61c:	8b ab       	sts	0x5b, r24
 61e:	8b a9       	sts	0x4b, r24
 620:	9c a9       	sts	0x4c, r25
 622:	98 af       	sts	0x78, r25
 624:	8f ab       	sts	0x5f, r24
 626:	8f a9       	sts	0x4f, r24
 628:	98 ad       	sts	0x68, r25
 62a:	8c 01       	movw	r16, r24
 62c:	f8 01       	movw	r30, r16
 62e:	31 97       	sbiw	r30, 0x01	; 1
 630:	f1 f7       	brne	.-4      	; 0x62e <__stack+0x1cf>
 632:	8f 01       	movw	r16, r30
 634:	18 af       	sts	0x78, r17
 636:	0f ab       	sts	0x5f, r16
	_delay_ms(1);
 
	LCD_cmd(0x80);		// ---8 go to first line and --0 is for 0th position
 638:	80 e8       	ldi	r24, 0x80	; 128
 63a:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_cmd>
 63e:	80 e0       	ldi	r24, 0x00	; 0
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	a0 e8       	ldi	r26, 0x80	; 128
 644:	bf e3       	ldi	r27, 0x3F	; 63
 646:	89 af       	sts	0x79, r24
 648:	9a af       	sts	0x7a, r25
 64a:	ab af       	sts	0x7b, r26
 64c:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 64e:	69 ad       	sts	0x69, r22
 650:	7a ad       	sts	0x6a, r23
 652:	8b ad       	sts	0x6b, r24
 654:	9c ad       	sts	0x6c, r25
 656:	20 e0       	ldi	r18, 0x00	; 0
 658:	30 e0       	ldi	r19, 0x00	; 0
 65a:	4a ef       	ldi	r20, 0xFA	; 250
 65c:	54 e4       	ldi	r21, 0x44	; 68
 65e:	0e 94 08 07 	call	0xe10	; 0xe10 <__mulsf3>
 662:	dc 01       	movw	r26, r24
 664:	cb 01       	movw	r24, r22
 666:	9e 01       	movw	r18, r28
 668:	23 5c       	subi	r18, 0xC3	; 195
 66a:	3f 4f       	sbci	r19, 0xFF	; 255
 66c:	f9 01       	movw	r30, r18
 66e:	80 83       	st	Z, r24
 670:	91 83       	std	Z+1, r25	; 0x01
 672:	a2 83       	std	Z+2, r26	; 0x02
 674:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
 676:	11 e0       	ldi	r17, 0x01	; 1
 678:	ce 01       	movw	r24, r28
 67a:	cd 96       	adiw	r24, 0x3d	; 61
 67c:	fc 01       	movw	r30, r24
 67e:	60 81       	ld	r22, Z
 680:	71 81       	ldd	r23, Z+1	; 0x01
 682:	82 81       	ldd	r24, Z+2	; 0x02
 684:	93 81       	ldd	r25, Z+3	; 0x03
 686:	20 e0       	ldi	r18, 0x00	; 0
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	40 e8       	ldi	r20, 0x80	; 128
 68c:	5f e3       	ldi	r21, 0x3F	; 63
 68e:	0e 94 87 06 	call	0xd0e	; 0xd0e <__cmpsf2>
 692:	88 23       	and	r24, r24
 694:	0c f0       	brlt	.+2      	; 0x698 <__stack+0x239>
 696:	10 e0       	ldi	r17, 0x00	; 0
 698:	11 23       	and	r17, r17
 69a:	49 f0       	breq	.+18     	; 0x6ae <__stack+0x24f>
		__ticks = 1;
 69c:	ce 01       	movw	r24, r28
 69e:	8f 5b       	subi	r24, 0xBF	; 191
 6a0:	9f 4f       	sbci	r25, 0xFF	; 255
 6a2:	21 e0       	ldi	r18, 0x01	; 1
 6a4:	30 e0       	ldi	r19, 0x00	; 0
 6a6:	fc 01       	movw	r30, r24
 6a8:	31 83       	std	Z+1, r19	; 0x01
 6aa:	20 83       	st	Z, r18
 6ac:	6e c0       	rjmp	.+220    	; 0x78a <__stack+0x32b>
	else if (__tmp > 65535)
 6ae:	11 e0       	ldi	r17, 0x01	; 1
 6b0:	ce 01       	movw	r24, r28
 6b2:	cd 96       	adiw	r24, 0x3d	; 61
 6b4:	fc 01       	movw	r30, r24
 6b6:	60 81       	ld	r22, Z
 6b8:	71 81       	ldd	r23, Z+1	; 0x01
 6ba:	82 81       	ldd	r24, Z+2	; 0x02
 6bc:	93 81       	ldd	r25, Z+3	; 0x03
 6be:	20 e0       	ldi	r18, 0x00	; 0
 6c0:	3f ef       	ldi	r19, 0xFF	; 255
 6c2:	4f e7       	ldi	r20, 0x7F	; 127
 6c4:	57 e4       	ldi	r21, 0x47	; 71
 6c6:	0e 94 04 07 	call	0xe08	; 0xe08 <__gesf2>
 6ca:	18 16       	cp	r1, r24
 6cc:	0c f0       	brlt	.+2      	; 0x6d0 <__stack+0x271>
 6ce:	10 e0       	ldi	r17, 0x00	; 0
 6d0:	11 23       	and	r17, r17
 6d2:	09 f4       	brne	.+2      	; 0x6d6 <__stack+0x277>
 6d4:	49 c0       	rjmp	.+146    	; 0x768 <__stack+0x309>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 6d6:	69 ad       	sts	0x69, r22
 6d8:	7a ad       	sts	0x6a, r23
 6da:	8b ad       	sts	0x6b, r24
 6dc:	9c ad       	sts	0x6c, r25
 6de:	20 e0       	ldi	r18, 0x00	; 0
 6e0:	30 e0       	ldi	r19, 0x00	; 0
 6e2:	40 e2       	ldi	r20, 0x20	; 32
 6e4:	51 e4       	ldi	r21, 0x41	; 65
 6e6:	0e 94 08 07 	call	0xe10	; 0xe10 <__mulsf3>
 6ea:	dc 01       	movw	r26, r24
 6ec:	cb 01       	movw	r24, r22
 6ee:	8e 01       	movw	r16, r28
 6f0:	0f 5b       	subi	r16, 0xBF	; 191
 6f2:	1f 4f       	sbci	r17, 0xFF	; 255
 6f4:	bc 01       	movw	r22, r24
 6f6:	cd 01       	movw	r24, r26
 6f8:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fixunssfsi>
 6fc:	dc 01       	movw	r26, r24
 6fe:	cb 01       	movw	r24, r22
 700:	f8 01       	movw	r30, r16
 702:	91 83       	std	Z+1, r25	; 0x01
 704:	80 83       	st	Z, r24
 706:	27 c0       	rjmp	.+78     	; 0x756 <__stack+0x2f7>
 708:	ce 01       	movw	r24, r28
 70a:	8d 5b       	subi	r24, 0xBD	; 189
 70c:	9f 4f       	sbci	r25, 0xFF	; 255
 70e:	28 ec       	ldi	r18, 0xC8	; 200
 710:	30 e0       	ldi	r19, 0x00	; 0
 712:	fc 01       	movw	r30, r24
 714:	31 83       	std	Z+1, r19	; 0x01
 716:	20 83       	st	Z, r18
 718:	ce 01       	movw	r24, r28
 71a:	8d 5b       	subi	r24, 0xBD	; 189
 71c:	9f 4f       	sbci	r25, 0xFF	; 255
 71e:	fc 01       	movw	r30, r24
 720:	80 81       	ld	r24, Z
 722:	91 81       	ldd	r25, Z+1	; 0x01
 724:	8c 01       	movw	r16, r24
 726:	c8 01       	movw	r24, r16
 728:	01 97       	sbiw	r24, 0x01	; 1
 72a:	f1 f7       	brne	.-4      	; 0x728 <__stack+0x2c9>
 72c:	8c 01       	movw	r16, r24
 72e:	ce 01       	movw	r24, r28
 730:	8d 5b       	subi	r24, 0xBD	; 189
 732:	9f 4f       	sbci	r25, 0xFF	; 255
 734:	fc 01       	movw	r30, r24
 736:	11 83       	std	Z+1, r17	; 0x01
 738:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 73a:	ce 01       	movw	r24, r28
 73c:	8f 5b       	subi	r24, 0xBF	; 191
 73e:	9f 4f       	sbci	r25, 0xFF	; 255
 740:	9e 01       	movw	r18, r28
 742:	2f 5b       	subi	r18, 0xBF	; 191
 744:	3f 4f       	sbci	r19, 0xFF	; 255
 746:	f9 01       	movw	r30, r18
 748:	20 81       	ld	r18, Z
 74a:	31 81       	ldd	r19, Z+1	; 0x01
 74c:	21 50       	subi	r18, 0x01	; 1
 74e:	30 40       	sbci	r19, 0x00	; 0
 750:	fc 01       	movw	r30, r24
 752:	31 83       	std	Z+1, r19	; 0x01
 754:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 756:	ce 01       	movw	r24, r28
 758:	8f 5b       	subi	r24, 0xBF	; 191
 75a:	9f 4f       	sbci	r25, 0xFF	; 255
 75c:	fc 01       	movw	r30, r24
 75e:	80 81       	ld	r24, Z
 760:	91 81       	ldd	r25, Z+1	; 0x01
 762:	00 97       	sbiw	r24, 0x00	; 0
 764:	89 f6       	brne	.-94     	; 0x708 <__stack+0x2a9>
 766:	2e c0       	rjmp	.+92     	; 0x7c4 <__stack+0x365>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 768:	8e 01       	movw	r16, r28
 76a:	0f 5b       	subi	r16, 0xBF	; 191
 76c:	1f 4f       	sbci	r17, 0xFF	; 255
 76e:	ce 01       	movw	r24, r28
 770:	cd 96       	adiw	r24, 0x3d	; 61
 772:	fc 01       	movw	r30, r24
 774:	60 81       	ld	r22, Z
 776:	71 81       	ldd	r23, Z+1	; 0x01
 778:	82 81       	ldd	r24, Z+2	; 0x02
 77a:	93 81       	ldd	r25, Z+3	; 0x03
 77c:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fixunssfsi>
 780:	dc 01       	movw	r26, r24
 782:	cb 01       	movw	r24, r22
 784:	f8 01       	movw	r30, r16
 786:	91 83       	std	Z+1, r25	; 0x01
 788:	80 83       	st	Z, r24
 78a:	ce 01       	movw	r24, r28
 78c:	8b 5b       	subi	r24, 0xBB	; 187
 78e:	9f 4f       	sbci	r25, 0xFF	; 255
 790:	9e 01       	movw	r18, r28
 792:	2f 5b       	subi	r18, 0xBF	; 191
 794:	3f 4f       	sbci	r19, 0xFF	; 255
 796:	f9 01       	movw	r30, r18
 798:	20 81       	ld	r18, Z
 79a:	31 81       	ldd	r19, Z+1	; 0x01
 79c:	fc 01       	movw	r30, r24
 79e:	31 83       	std	Z+1, r19	; 0x01
 7a0:	20 83       	st	Z, r18
 7a2:	ce 01       	movw	r24, r28
 7a4:	8b 5b       	subi	r24, 0xBB	; 187
 7a6:	9f 4f       	sbci	r25, 0xFF	; 255
 7a8:	fc 01       	movw	r30, r24
 7aa:	80 81       	ld	r24, Z
 7ac:	91 81       	ldd	r25, Z+1	; 0x01
 7ae:	8c 01       	movw	r16, r24
 7b0:	c8 01       	movw	r24, r16
 7b2:	01 97       	sbiw	r24, 0x01	; 1
 7b4:	f1 f7       	brne	.-4      	; 0x7b2 <__stack+0x353>
 7b6:	8c 01       	movw	r16, r24
 7b8:	ce 01       	movw	r24, r28
 7ba:	8b 5b       	subi	r24, 0xBB	; 187
 7bc:	9f 4f       	sbci	r25, 0xFF	; 255
 7be:	fc 01       	movw	r30, r24
 7c0:	11 83       	std	Z+1, r17	; 0x01
 7c2:	00 83       	st	Z, r16
	_delay_ms(1);
	return;
}
 7c4:	ca 5b       	subi	r28, 0xBA	; 186
 7c6:	df 4f       	sbci	r29, 0xFF	; 255
 7c8:	0f b6       	in	r0, 0x3f	; 63
 7ca:	f8 94       	cli
 7cc:	de bf       	out	0x3e, r29	; 62
 7ce:	0f be       	out	0x3f, r0	; 63
 7d0:	cd bf       	out	0x3d, r28	; 61
 7d2:	df 91       	pop	r29
 7d4:	cf 91       	pop	r28
 7d6:	1f 91       	pop	r17
 7d8:	0f 91       	pop	r16
 7da:	08 95       	ret

000007dc <LCD_cmd>:
 
void LCD_cmd(unsigned char cm)
{
 7dc:	0f 93       	push	r16
 7de:	1f 93       	push	r17
 7e0:	cf 93       	push	r28
 7e2:	df 93       	push	r29
 7e4:	cd b7       	in	r28, 0x3d	; 61
 7e6:	de b7       	in	r29, 0x3e	; 62
 7e8:	6d 97       	sbiw	r28, 0x1d	; 29
 7ea:	0f b6       	in	r0, 0x3f	; 63
 7ec:	f8 94       	cli
 7ee:	de bf       	out	0x3e, r29	; 62
 7f0:	0f be       	out	0x3f, r0	; 63
 7f2:	cd bf       	out	0x3d, r28	; 61
 7f4:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_DATA=cm;
 7f6:	8b e3       	ldi	r24, 0x3B	; 59
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	2d 8d       	ldd	r18, Y+29	; 0x1d
 7fc:	fc 01       	movw	r30, r24
 7fe:	20 83       	st	Z, r18
	ctrl =(0<<rs)|(0<<rw)|(1<<en);	
 800:	88 e3       	ldi	r24, 0x38	; 56
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	24 e0       	ldi	r18, 0x04	; 4
 806:	fc 01       	movw	r30, r24
 808:	20 83       	st	Z, r18
 80a:	80 e0       	ldi	r24, 0x00	; 0
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	a0 e8       	ldi	r26, 0x80	; 128
 810:	bf e3       	ldi	r27, 0x3F	; 63
 812:	89 83       	std	Y+1, r24	; 0x01
 814:	9a 83       	std	Y+2, r25	; 0x02
 816:	ab 83       	std	Y+3, r26	; 0x03
 818:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 81a:	69 81       	ldd	r22, Y+1	; 0x01
 81c:	7a 81       	ldd	r23, Y+2	; 0x02
 81e:	8b 81       	ldd	r24, Y+3	; 0x03
 820:	9c 81       	ldd	r25, Y+4	; 0x04
 822:	20 e0       	ldi	r18, 0x00	; 0
 824:	30 e0       	ldi	r19, 0x00	; 0
 826:	4a ef       	ldi	r20, 0xFA	; 250
 828:	54 e4       	ldi	r21, 0x44	; 68
 82a:	0e 94 08 07 	call	0xe10	; 0xe10 <__mulsf3>
 82e:	dc 01       	movw	r26, r24
 830:	cb 01       	movw	r24, r22
 832:	8d 83       	std	Y+5, r24	; 0x05
 834:	9e 83       	std	Y+6, r25	; 0x06
 836:	af 83       	std	Y+7, r26	; 0x07
 838:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 83a:	11 e0       	ldi	r17, 0x01	; 1
 83c:	6d 81       	ldd	r22, Y+5	; 0x05
 83e:	7e 81       	ldd	r23, Y+6	; 0x06
 840:	8f 81       	ldd	r24, Y+7	; 0x07
 842:	98 85       	ldd	r25, Y+8	; 0x08
 844:	20 e0       	ldi	r18, 0x00	; 0
 846:	30 e0       	ldi	r19, 0x00	; 0
 848:	40 e8       	ldi	r20, 0x80	; 128
 84a:	5f e3       	ldi	r21, 0x3F	; 63
 84c:	0e 94 87 06 	call	0xd0e	; 0xd0e <__cmpsf2>
 850:	88 23       	and	r24, r24
 852:	0c f0       	brlt	.+2      	; 0x856 <LCD_cmd+0x7a>
 854:	10 e0       	ldi	r17, 0x00	; 0
 856:	11 23       	and	r17, r17
 858:	29 f0       	breq	.+10     	; 0x864 <LCD_cmd+0x88>
		__ticks = 1;
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	9a 87       	std	Y+10, r25	; 0x0a
 860:	89 87       	std	Y+9, r24	; 0x09
 862:	46 c0       	rjmp	.+140    	; 0x8f0 <LCD_cmd+0x114>
	else if (__tmp > 65535)
 864:	11 e0       	ldi	r17, 0x01	; 1
 866:	6d 81       	ldd	r22, Y+5	; 0x05
 868:	7e 81       	ldd	r23, Y+6	; 0x06
 86a:	8f 81       	ldd	r24, Y+7	; 0x07
 86c:	98 85       	ldd	r25, Y+8	; 0x08
 86e:	20 e0       	ldi	r18, 0x00	; 0
 870:	3f ef       	ldi	r19, 0xFF	; 255
 872:	4f e7       	ldi	r20, 0x7F	; 127
 874:	57 e4       	ldi	r21, 0x47	; 71
 876:	0e 94 04 07 	call	0xe08	; 0xe08 <__gesf2>
 87a:	18 16       	cp	r1, r24
 87c:	0c f0       	brlt	.+2      	; 0x880 <LCD_cmd+0xa4>
 87e:	10 e0       	ldi	r17, 0x00	; 0
 880:	11 23       	and	r17, r17
 882:	61 f1       	breq	.+88     	; 0x8dc <LCD_cmd+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 884:	69 81       	ldd	r22, Y+1	; 0x01
 886:	7a 81       	ldd	r23, Y+2	; 0x02
 888:	8b 81       	ldd	r24, Y+3	; 0x03
 88a:	9c 81       	ldd	r25, Y+4	; 0x04
 88c:	20 e0       	ldi	r18, 0x00	; 0
 88e:	30 e0       	ldi	r19, 0x00	; 0
 890:	40 e2       	ldi	r20, 0x20	; 32
 892:	51 e4       	ldi	r21, 0x41	; 65
 894:	0e 94 08 07 	call	0xe10	; 0xe10 <__mulsf3>
 898:	dc 01       	movw	r26, r24
 89a:	cb 01       	movw	r24, r22
 89c:	bc 01       	movw	r22, r24
 89e:	cd 01       	movw	r24, r26
 8a0:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fixunssfsi>
 8a4:	dc 01       	movw	r26, r24
 8a6:	cb 01       	movw	r24, r22
 8a8:	9a 87       	std	Y+10, r25	; 0x0a
 8aa:	89 87       	std	Y+9, r24	; 0x09
 8ac:	12 c0       	rjmp	.+36     	; 0x8d2 <LCD_cmd+0xf6>
 8ae:	88 ec       	ldi	r24, 0xC8	; 200
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	9c 87       	std	Y+12, r25	; 0x0c
 8b4:	8b 87       	std	Y+11, r24	; 0x0b
 8b6:	8b 85       	ldd	r24, Y+11	; 0x0b
 8b8:	9c 85       	ldd	r25, Y+12	; 0x0c
 8ba:	8c 01       	movw	r16, r24
 8bc:	c8 01       	movw	r24, r16
 8be:	01 97       	sbiw	r24, 0x01	; 1
 8c0:	f1 f7       	brne	.-4      	; 0x8be <LCD_cmd+0xe2>
 8c2:	8c 01       	movw	r16, r24
 8c4:	1c 87       	std	Y+12, r17	; 0x0c
 8c6:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 8c8:	89 85       	ldd	r24, Y+9	; 0x09
 8ca:	9a 85       	ldd	r25, Y+10	; 0x0a
 8cc:	01 97       	sbiw	r24, 0x01	; 1
 8ce:	9a 87       	std	Y+10, r25	; 0x0a
 8d0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 8d2:	89 85       	ldd	r24, Y+9	; 0x09
 8d4:	9a 85       	ldd	r25, Y+10	; 0x0a
 8d6:	00 97       	sbiw	r24, 0x00	; 0
 8d8:	51 f7       	brne	.-44     	; 0x8ae <LCD_cmd+0xd2>
 8da:	17 c0       	rjmp	.+46     	; 0x90a <LCD_cmd+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 8dc:	6d 81       	ldd	r22, Y+5	; 0x05
 8de:	7e 81       	ldd	r23, Y+6	; 0x06
 8e0:	8f 81       	ldd	r24, Y+7	; 0x07
 8e2:	98 85       	ldd	r25, Y+8	; 0x08
 8e4:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fixunssfsi>
 8e8:	dc 01       	movw	r26, r24
 8ea:	cb 01       	movw	r24, r22
 8ec:	9a 87       	std	Y+10, r25	; 0x0a
 8ee:	89 87       	std	Y+9, r24	; 0x09
 8f0:	89 85       	ldd	r24, Y+9	; 0x09
 8f2:	9a 85       	ldd	r25, Y+10	; 0x0a
 8f4:	9e 87       	std	Y+14, r25	; 0x0e
 8f6:	8d 87       	std	Y+13, r24	; 0x0d
 8f8:	8d 85       	ldd	r24, Y+13	; 0x0d
 8fa:	9e 85       	ldd	r25, Y+14	; 0x0e
 8fc:	8c 01       	movw	r16, r24
 8fe:	f8 01       	movw	r30, r16
 900:	31 97       	sbiw	r30, 0x01	; 1
 902:	f1 f7       	brne	.-4      	; 0x900 <LCD_cmd+0x124>
 904:	8f 01       	movw	r16, r30
 906:	1e 87       	std	Y+14, r17	; 0x0e
 908:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);
	ctrl =(0<<rs)|(0<<rw)|(0<<en);	
 90a:	88 e3       	ldi	r24, 0x38	; 56
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	fc 01       	movw	r30, r24
 910:	10 82       	st	Z, r1
 912:	80 e0       	ldi	r24, 0x00	; 0
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	a0 e2       	ldi	r26, 0x20	; 32
 918:	b1 e4       	ldi	r27, 0x41	; 65
 91a:	8f 87       	std	Y+15, r24	; 0x0f
 91c:	98 8b       	std	Y+16, r25	; 0x10
 91e:	a9 8b       	std	Y+17, r26	; 0x11
 920:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 922:	6f 85       	ldd	r22, Y+15	; 0x0f
 924:	78 89       	ldd	r23, Y+16	; 0x10
 926:	89 89       	ldd	r24, Y+17	; 0x11
 928:	9a 89       	ldd	r25, Y+18	; 0x12
 92a:	20 e0       	ldi	r18, 0x00	; 0
 92c:	30 e0       	ldi	r19, 0x00	; 0
 92e:	4a ef       	ldi	r20, 0xFA	; 250
 930:	54 e4       	ldi	r21, 0x44	; 68
 932:	0e 94 08 07 	call	0xe10	; 0xe10 <__mulsf3>
 936:	dc 01       	movw	r26, r24
 938:	cb 01       	movw	r24, r22
 93a:	8b 8b       	std	Y+19, r24	; 0x13
 93c:	9c 8b       	std	Y+20, r25	; 0x14
 93e:	ad 8b       	std	Y+21, r26	; 0x15
 940:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 942:	11 e0       	ldi	r17, 0x01	; 1
 944:	6b 89       	ldd	r22, Y+19	; 0x13
 946:	7c 89       	ldd	r23, Y+20	; 0x14
 948:	8d 89       	ldd	r24, Y+21	; 0x15
 94a:	9e 89       	ldd	r25, Y+22	; 0x16
 94c:	20 e0       	ldi	r18, 0x00	; 0
 94e:	30 e0       	ldi	r19, 0x00	; 0
 950:	40 e8       	ldi	r20, 0x80	; 128
 952:	5f e3       	ldi	r21, 0x3F	; 63
 954:	0e 94 87 06 	call	0xd0e	; 0xd0e <__cmpsf2>
 958:	88 23       	and	r24, r24
 95a:	0c f0       	brlt	.+2      	; 0x95e <LCD_cmd+0x182>
 95c:	10 e0       	ldi	r17, 0x00	; 0
 95e:	11 23       	and	r17, r17
 960:	29 f0       	breq	.+10     	; 0x96c <LCD_cmd+0x190>
		__ticks = 1;
 962:	81 e0       	ldi	r24, 0x01	; 1
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	98 8f       	std	Y+24, r25	; 0x18
 968:	8f 8b       	std	Y+23, r24	; 0x17
 96a:	46 c0       	rjmp	.+140    	; 0x9f8 <LCD_cmd+0x21c>
	else if (__tmp > 65535)
 96c:	11 e0       	ldi	r17, 0x01	; 1
 96e:	6b 89       	ldd	r22, Y+19	; 0x13
 970:	7c 89       	ldd	r23, Y+20	; 0x14
 972:	8d 89       	ldd	r24, Y+21	; 0x15
 974:	9e 89       	ldd	r25, Y+22	; 0x16
 976:	20 e0       	ldi	r18, 0x00	; 0
 978:	3f ef       	ldi	r19, 0xFF	; 255
 97a:	4f e7       	ldi	r20, 0x7F	; 127
 97c:	57 e4       	ldi	r21, 0x47	; 71
 97e:	0e 94 04 07 	call	0xe08	; 0xe08 <__gesf2>
 982:	18 16       	cp	r1, r24
 984:	0c f0       	brlt	.+2      	; 0x988 <LCD_cmd+0x1ac>
 986:	10 e0       	ldi	r17, 0x00	; 0
 988:	11 23       	and	r17, r17
 98a:	61 f1       	breq	.+88     	; 0x9e4 <LCD_cmd+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 98c:	6f 85       	ldd	r22, Y+15	; 0x0f
 98e:	78 89       	ldd	r23, Y+16	; 0x10
 990:	89 89       	ldd	r24, Y+17	; 0x11
 992:	9a 89       	ldd	r25, Y+18	; 0x12
 994:	20 e0       	ldi	r18, 0x00	; 0
 996:	30 e0       	ldi	r19, 0x00	; 0
 998:	40 e2       	ldi	r20, 0x20	; 32
 99a:	51 e4       	ldi	r21, 0x41	; 65
 99c:	0e 94 08 07 	call	0xe10	; 0xe10 <__mulsf3>
 9a0:	dc 01       	movw	r26, r24
 9a2:	cb 01       	movw	r24, r22
 9a4:	bc 01       	movw	r22, r24
 9a6:	cd 01       	movw	r24, r26
 9a8:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fixunssfsi>
 9ac:	dc 01       	movw	r26, r24
 9ae:	cb 01       	movw	r24, r22
 9b0:	98 8f       	std	Y+24, r25	; 0x18
 9b2:	8f 8b       	std	Y+23, r24	; 0x17
 9b4:	12 c0       	rjmp	.+36     	; 0x9da <LCD_cmd+0x1fe>
 9b6:	88 ec       	ldi	r24, 0xC8	; 200
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	9a 8f       	std	Y+26, r25	; 0x1a
 9bc:	89 8f       	std	Y+25, r24	; 0x19
 9be:	89 8d       	ldd	r24, Y+25	; 0x19
 9c0:	9a 8d       	ldd	r25, Y+26	; 0x1a
 9c2:	8c 01       	movw	r16, r24
 9c4:	c8 01       	movw	r24, r16
 9c6:	01 97       	sbiw	r24, 0x01	; 1
 9c8:	f1 f7       	brne	.-4      	; 0x9c6 <LCD_cmd+0x1ea>
 9ca:	8c 01       	movw	r16, r24
 9cc:	1a 8f       	std	Y+26, r17	; 0x1a
 9ce:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 9d0:	8f 89       	ldd	r24, Y+23	; 0x17
 9d2:	98 8d       	ldd	r25, Y+24	; 0x18
 9d4:	01 97       	sbiw	r24, 0x01	; 1
 9d6:	98 8f       	std	Y+24, r25	; 0x18
 9d8:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 9da:	8f 89       	ldd	r24, Y+23	; 0x17
 9dc:	98 8d       	ldd	r25, Y+24	; 0x18
 9de:	00 97       	sbiw	r24, 0x00	; 0
 9e0:	51 f7       	brne	.-44     	; 0x9b6 <LCD_cmd+0x1da>
 9e2:	17 c0       	rjmp	.+46     	; 0xa12 <LCD_cmd+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 9e4:	6b 89       	ldd	r22, Y+19	; 0x13
 9e6:	7c 89       	ldd	r23, Y+20	; 0x14
 9e8:	8d 89       	ldd	r24, Y+21	; 0x15
 9ea:	9e 89       	ldd	r25, Y+22	; 0x16
 9ec:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fixunssfsi>
 9f0:	dc 01       	movw	r26, r24
 9f2:	cb 01       	movw	r24, r22
 9f4:	98 8f       	std	Y+24, r25	; 0x18
 9f6:	8f 8b       	std	Y+23, r24	; 0x17
 9f8:	8f 89       	ldd	r24, Y+23	; 0x17
 9fa:	98 8d       	ldd	r25, Y+24	; 0x18
 9fc:	9c 8f       	std	Y+28, r25	; 0x1c
 9fe:	8b 8f       	std	Y+27, r24	; 0x1b
 a00:	8b 8d       	ldd	r24, Y+27	; 0x1b
 a02:	9c 8d       	ldd	r25, Y+28	; 0x1c
 a04:	8c 01       	movw	r16, r24
 a06:	f8 01       	movw	r30, r16
 a08:	31 97       	sbiw	r30, 0x01	; 1
 a0a:	f1 f7       	brne	.-4      	; 0xa08 <LCD_cmd+0x22c>
 a0c:	8f 01       	movw	r16, r30
 a0e:	1c 8f       	std	Y+28, r17	; 0x1c
 a10:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(10);
	return;
}
 a12:	6d 96       	adiw	r28, 0x1d	; 29
 a14:	0f b6       	in	r0, 0x3f	; 63
 a16:	f8 94       	cli
 a18:	de bf       	out	0x3e, r29	; 62
 a1a:	0f be       	out	0x3f, r0	; 63
 a1c:	cd bf       	out	0x3d, r28	; 61
 a1e:	df 91       	pop	r29
 a20:	cf 91       	pop	r28
 a22:	1f 91       	pop	r17
 a24:	0f 91       	pop	r16
 a26:	08 95       	ret

00000a28 <LCD_write>:
 
void LCD_write(unsigned char dat)
{
 a28:	0f 93       	push	r16
 a2a:	1f 93       	push	r17
 a2c:	cf 93       	push	r28
 a2e:	df 93       	push	r29
 a30:	cd b7       	in	r28, 0x3d	; 61
 a32:	de b7       	in	r29, 0x3e	; 62
 a34:	6d 97       	sbiw	r28, 0x1d	; 29
 a36:	0f b6       	in	r0, 0x3f	; 63
 a38:	f8 94       	cli
 a3a:	de bf       	out	0x3e, r29	; 62
 a3c:	0f be       	out	0x3f, r0	; 63
 a3e:	cd bf       	out	0x3d, r28	; 61
 a40:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_DATA= dat;
 a42:	8b e3       	ldi	r24, 0x3B	; 59
 a44:	90 e0       	ldi	r25, 0x00	; 0
 a46:	2d 8d       	ldd	r18, Y+29	; 0x1d
 a48:	fc 01       	movw	r30, r24
 a4a:	20 83       	st	Z, r18
	ctrl = (1<<rs)|(0<<rw)|(1<<en);	
 a4c:	88 e3       	ldi	r24, 0x38	; 56
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	25 e0       	ldi	r18, 0x05	; 5
 a52:	fc 01       	movw	r30, r24
 a54:	20 83       	st	Z, r18
 a56:	80 e0       	ldi	r24, 0x00	; 0
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	a0 e8       	ldi	r26, 0x80	; 128
 a5c:	bf e3       	ldi	r27, 0x3F	; 63
 a5e:	89 83       	std	Y+1, r24	; 0x01
 a60:	9a 83       	std	Y+2, r25	; 0x02
 a62:	ab 83       	std	Y+3, r26	; 0x03
 a64:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 a66:	69 81       	ldd	r22, Y+1	; 0x01
 a68:	7a 81       	ldd	r23, Y+2	; 0x02
 a6a:	8b 81       	ldd	r24, Y+3	; 0x03
 a6c:	9c 81       	ldd	r25, Y+4	; 0x04
 a6e:	20 e0       	ldi	r18, 0x00	; 0
 a70:	30 e0       	ldi	r19, 0x00	; 0
 a72:	4a ef       	ldi	r20, 0xFA	; 250
 a74:	54 e4       	ldi	r21, 0x44	; 68
 a76:	0e 94 08 07 	call	0xe10	; 0xe10 <__mulsf3>
 a7a:	dc 01       	movw	r26, r24
 a7c:	cb 01       	movw	r24, r22
 a7e:	8d 83       	std	Y+5, r24	; 0x05
 a80:	9e 83       	std	Y+6, r25	; 0x06
 a82:	af 83       	std	Y+7, r26	; 0x07
 a84:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 a86:	11 e0       	ldi	r17, 0x01	; 1
 a88:	6d 81       	ldd	r22, Y+5	; 0x05
 a8a:	7e 81       	ldd	r23, Y+6	; 0x06
 a8c:	8f 81       	ldd	r24, Y+7	; 0x07
 a8e:	98 85       	ldd	r25, Y+8	; 0x08
 a90:	20 e0       	ldi	r18, 0x00	; 0
 a92:	30 e0       	ldi	r19, 0x00	; 0
 a94:	40 e8       	ldi	r20, 0x80	; 128
 a96:	5f e3       	ldi	r21, 0x3F	; 63
 a98:	0e 94 87 06 	call	0xd0e	; 0xd0e <__cmpsf2>
 a9c:	88 23       	and	r24, r24
 a9e:	0c f0       	brlt	.+2      	; 0xaa2 <LCD_write+0x7a>
 aa0:	10 e0       	ldi	r17, 0x00	; 0
 aa2:	11 23       	and	r17, r17
 aa4:	29 f0       	breq	.+10     	; 0xab0 <LCD_write+0x88>
		__ticks = 1;
 aa6:	81 e0       	ldi	r24, 0x01	; 1
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	9a 87       	std	Y+10, r25	; 0x0a
 aac:	89 87       	std	Y+9, r24	; 0x09
 aae:	46 c0       	rjmp	.+140    	; 0xb3c <LCD_write+0x114>
	else if (__tmp > 65535)
 ab0:	11 e0       	ldi	r17, 0x01	; 1
 ab2:	6d 81       	ldd	r22, Y+5	; 0x05
 ab4:	7e 81       	ldd	r23, Y+6	; 0x06
 ab6:	8f 81       	ldd	r24, Y+7	; 0x07
 ab8:	98 85       	ldd	r25, Y+8	; 0x08
 aba:	20 e0       	ldi	r18, 0x00	; 0
 abc:	3f ef       	ldi	r19, 0xFF	; 255
 abe:	4f e7       	ldi	r20, 0x7F	; 127
 ac0:	57 e4       	ldi	r21, 0x47	; 71
 ac2:	0e 94 04 07 	call	0xe08	; 0xe08 <__gesf2>
 ac6:	18 16       	cp	r1, r24
 ac8:	0c f0       	brlt	.+2      	; 0xacc <LCD_write+0xa4>
 aca:	10 e0       	ldi	r17, 0x00	; 0
 acc:	11 23       	and	r17, r17
 ace:	61 f1       	breq	.+88     	; 0xb28 <LCD_write+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 ad0:	69 81       	ldd	r22, Y+1	; 0x01
 ad2:	7a 81       	ldd	r23, Y+2	; 0x02
 ad4:	8b 81       	ldd	r24, Y+3	; 0x03
 ad6:	9c 81       	ldd	r25, Y+4	; 0x04
 ad8:	20 e0       	ldi	r18, 0x00	; 0
 ada:	30 e0       	ldi	r19, 0x00	; 0
 adc:	40 e2       	ldi	r20, 0x20	; 32
 ade:	51 e4       	ldi	r21, 0x41	; 65
 ae0:	0e 94 08 07 	call	0xe10	; 0xe10 <__mulsf3>
 ae4:	dc 01       	movw	r26, r24
 ae6:	cb 01       	movw	r24, r22
 ae8:	bc 01       	movw	r22, r24
 aea:	cd 01       	movw	r24, r26
 aec:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fixunssfsi>
 af0:	dc 01       	movw	r26, r24
 af2:	cb 01       	movw	r24, r22
 af4:	9a 87       	std	Y+10, r25	; 0x0a
 af6:	89 87       	std	Y+9, r24	; 0x09
 af8:	12 c0       	rjmp	.+36     	; 0xb1e <LCD_write+0xf6>
 afa:	88 ec       	ldi	r24, 0xC8	; 200
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	9c 87       	std	Y+12, r25	; 0x0c
 b00:	8b 87       	std	Y+11, r24	; 0x0b
 b02:	8b 85       	ldd	r24, Y+11	; 0x0b
 b04:	9c 85       	ldd	r25, Y+12	; 0x0c
 b06:	8c 01       	movw	r16, r24
 b08:	c8 01       	movw	r24, r16
 b0a:	01 97       	sbiw	r24, 0x01	; 1
 b0c:	f1 f7       	brne	.-4      	; 0xb0a <LCD_write+0xe2>
 b0e:	8c 01       	movw	r16, r24
 b10:	1c 87       	std	Y+12, r17	; 0x0c
 b12:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 b14:	89 85       	ldd	r24, Y+9	; 0x09
 b16:	9a 85       	ldd	r25, Y+10	; 0x0a
 b18:	01 97       	sbiw	r24, 0x01	; 1
 b1a:	9a 87       	std	Y+10, r25	; 0x0a
 b1c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 b1e:	89 85       	ldd	r24, Y+9	; 0x09
 b20:	9a 85       	ldd	r25, Y+10	; 0x0a
 b22:	00 97       	sbiw	r24, 0x00	; 0
 b24:	51 f7       	brne	.-44     	; 0xafa <LCD_write+0xd2>
 b26:	17 c0       	rjmp	.+46     	; 0xb56 <LCD_write+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 b28:	6d 81       	ldd	r22, Y+5	; 0x05
 b2a:	7e 81       	ldd	r23, Y+6	; 0x06
 b2c:	8f 81       	ldd	r24, Y+7	; 0x07
 b2e:	98 85       	ldd	r25, Y+8	; 0x08
 b30:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fixunssfsi>
 b34:	dc 01       	movw	r26, r24
 b36:	cb 01       	movw	r24, r22
 b38:	9a 87       	std	Y+10, r25	; 0x0a
 b3a:	89 87       	std	Y+9, r24	; 0x09
 b3c:	89 85       	ldd	r24, Y+9	; 0x09
 b3e:	9a 85       	ldd	r25, Y+10	; 0x0a
 b40:	9e 87       	std	Y+14, r25	; 0x0e
 b42:	8d 87       	std	Y+13, r24	; 0x0d
 b44:	8d 85       	ldd	r24, Y+13	; 0x0d
 b46:	9e 85       	ldd	r25, Y+14	; 0x0e
 b48:	8c 01       	movw	r16, r24
 b4a:	f8 01       	movw	r30, r16
 b4c:	31 97       	sbiw	r30, 0x01	; 1
 b4e:	f1 f7       	brne	.-4      	; 0xb4c <LCD_write+0x124>
 b50:	8f 01       	movw	r16, r30
 b52:	1e 87       	std	Y+14, r17	; 0x0e
 b54:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);
	ctrl = (1<<rs)|(0<<rw)|(0<<en);	
 b56:	88 e3       	ldi	r24, 0x38	; 56
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	21 e0       	ldi	r18, 0x01	; 1
 b5c:	fc 01       	movw	r30, r24
 b5e:	20 83       	st	Z, r18
 b60:	80 e0       	ldi	r24, 0x00	; 0
 b62:	90 e0       	ldi	r25, 0x00	; 0
 b64:	a0 e2       	ldi	r26, 0x20	; 32
 b66:	b1 e4       	ldi	r27, 0x41	; 65
 b68:	8f 87       	std	Y+15, r24	; 0x0f
 b6a:	98 8b       	std	Y+16, r25	; 0x10
 b6c:	a9 8b       	std	Y+17, r26	; 0x11
 b6e:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 b70:	6f 85       	ldd	r22, Y+15	; 0x0f
 b72:	78 89       	ldd	r23, Y+16	; 0x10
 b74:	89 89       	ldd	r24, Y+17	; 0x11
 b76:	9a 89       	ldd	r25, Y+18	; 0x12
 b78:	20 e0       	ldi	r18, 0x00	; 0
 b7a:	30 e0       	ldi	r19, 0x00	; 0
 b7c:	4a ef       	ldi	r20, 0xFA	; 250
 b7e:	54 e4       	ldi	r21, 0x44	; 68
 b80:	0e 94 08 07 	call	0xe10	; 0xe10 <__mulsf3>
 b84:	dc 01       	movw	r26, r24
 b86:	cb 01       	movw	r24, r22
 b88:	8b 8b       	std	Y+19, r24	; 0x13
 b8a:	9c 8b       	std	Y+20, r25	; 0x14
 b8c:	ad 8b       	std	Y+21, r26	; 0x15
 b8e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 b90:	11 e0       	ldi	r17, 0x01	; 1
 b92:	6b 89       	ldd	r22, Y+19	; 0x13
 b94:	7c 89       	ldd	r23, Y+20	; 0x14
 b96:	8d 89       	ldd	r24, Y+21	; 0x15
 b98:	9e 89       	ldd	r25, Y+22	; 0x16
 b9a:	20 e0       	ldi	r18, 0x00	; 0
 b9c:	30 e0       	ldi	r19, 0x00	; 0
 b9e:	40 e8       	ldi	r20, 0x80	; 128
 ba0:	5f e3       	ldi	r21, 0x3F	; 63
 ba2:	0e 94 87 06 	call	0xd0e	; 0xd0e <__cmpsf2>
 ba6:	88 23       	and	r24, r24
 ba8:	0c f0       	brlt	.+2      	; 0xbac <LCD_write+0x184>
 baa:	10 e0       	ldi	r17, 0x00	; 0
 bac:	11 23       	and	r17, r17
 bae:	29 f0       	breq	.+10     	; 0xbba <LCD_write+0x192>
		__ticks = 1;
 bb0:	81 e0       	ldi	r24, 0x01	; 1
 bb2:	90 e0       	ldi	r25, 0x00	; 0
 bb4:	98 8f       	std	Y+24, r25	; 0x18
 bb6:	8f 8b       	std	Y+23, r24	; 0x17
 bb8:	46 c0       	rjmp	.+140    	; 0xc46 <LCD_write+0x21e>
	else if (__tmp > 65535)
 bba:	11 e0       	ldi	r17, 0x01	; 1
 bbc:	6b 89       	ldd	r22, Y+19	; 0x13
 bbe:	7c 89       	ldd	r23, Y+20	; 0x14
 bc0:	8d 89       	ldd	r24, Y+21	; 0x15
 bc2:	9e 89       	ldd	r25, Y+22	; 0x16
 bc4:	20 e0       	ldi	r18, 0x00	; 0
 bc6:	3f ef       	ldi	r19, 0xFF	; 255
 bc8:	4f e7       	ldi	r20, 0x7F	; 127
 bca:	57 e4       	ldi	r21, 0x47	; 71
 bcc:	0e 94 04 07 	call	0xe08	; 0xe08 <__gesf2>
 bd0:	18 16       	cp	r1, r24
 bd2:	0c f0       	brlt	.+2      	; 0xbd6 <LCD_write+0x1ae>
 bd4:	10 e0       	ldi	r17, 0x00	; 0
 bd6:	11 23       	and	r17, r17
 bd8:	61 f1       	breq	.+88     	; 0xc32 <LCD_write+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 bda:	6f 85       	ldd	r22, Y+15	; 0x0f
 bdc:	78 89       	ldd	r23, Y+16	; 0x10
 bde:	89 89       	ldd	r24, Y+17	; 0x11
 be0:	9a 89       	ldd	r25, Y+18	; 0x12
 be2:	20 e0       	ldi	r18, 0x00	; 0
 be4:	30 e0       	ldi	r19, 0x00	; 0
 be6:	40 e2       	ldi	r20, 0x20	; 32
 be8:	51 e4       	ldi	r21, 0x41	; 65
 bea:	0e 94 08 07 	call	0xe10	; 0xe10 <__mulsf3>
 bee:	dc 01       	movw	r26, r24
 bf0:	cb 01       	movw	r24, r22
 bf2:	bc 01       	movw	r22, r24
 bf4:	cd 01       	movw	r24, r26
 bf6:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fixunssfsi>
 bfa:	dc 01       	movw	r26, r24
 bfc:	cb 01       	movw	r24, r22
 bfe:	98 8f       	std	Y+24, r25	; 0x18
 c00:	8f 8b       	std	Y+23, r24	; 0x17
 c02:	12 c0       	rjmp	.+36     	; 0xc28 <LCD_write+0x200>
 c04:	88 ec       	ldi	r24, 0xC8	; 200
 c06:	90 e0       	ldi	r25, 0x00	; 0
 c08:	9a 8f       	std	Y+26, r25	; 0x1a
 c0a:	89 8f       	std	Y+25, r24	; 0x19
 c0c:	89 8d       	ldd	r24, Y+25	; 0x19
 c0e:	9a 8d       	ldd	r25, Y+26	; 0x1a
 c10:	8c 01       	movw	r16, r24
 c12:	c8 01       	movw	r24, r16
 c14:	01 97       	sbiw	r24, 0x01	; 1
 c16:	f1 f7       	brne	.-4      	; 0xc14 <LCD_write+0x1ec>
 c18:	8c 01       	movw	r16, r24
 c1a:	1a 8f       	std	Y+26, r17	; 0x1a
 c1c:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 c1e:	8f 89       	ldd	r24, Y+23	; 0x17
 c20:	98 8d       	ldd	r25, Y+24	; 0x18
 c22:	01 97       	sbiw	r24, 0x01	; 1
 c24:	98 8f       	std	Y+24, r25	; 0x18
 c26:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 c28:	8f 89       	ldd	r24, Y+23	; 0x17
 c2a:	98 8d       	ldd	r25, Y+24	; 0x18
 c2c:	00 97       	sbiw	r24, 0x00	; 0
 c2e:	51 f7       	brne	.-44     	; 0xc04 <LCD_write+0x1dc>
 c30:	17 c0       	rjmp	.+46     	; 0xc60 <LCD_write+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 c32:	6b 89       	ldd	r22, Y+19	; 0x13
 c34:	7c 89       	ldd	r23, Y+20	; 0x14
 c36:	8d 89       	ldd	r24, Y+21	; 0x15
 c38:	9e 89       	ldd	r25, Y+22	; 0x16
 c3a:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fixunssfsi>
 c3e:	dc 01       	movw	r26, r24
 c40:	cb 01       	movw	r24, r22
 c42:	98 8f       	std	Y+24, r25	; 0x18
 c44:	8f 8b       	std	Y+23, r24	; 0x17
 c46:	8f 89       	ldd	r24, Y+23	; 0x17
 c48:	98 8d       	ldd	r25, Y+24	; 0x18
 c4a:	9c 8f       	std	Y+28, r25	; 0x1c
 c4c:	8b 8f       	std	Y+27, r24	; 0x1b
 c4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 c50:	9c 8d       	ldd	r25, Y+28	; 0x1c
 c52:	8c 01       	movw	r16, r24
 c54:	f8 01       	movw	r30, r16
 c56:	31 97       	sbiw	r30, 0x01	; 1
 c58:	f1 f7       	brne	.-4      	; 0xc56 <LCD_write+0x22e>
 c5a:	8f 01       	movw	r16, r30
 c5c:	1c 8f       	std	Y+28, r17	; 0x1c
 c5e:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(10);	
	return ;
}
 c60:	6d 96       	adiw	r28, 0x1d	; 29
 c62:	0f b6       	in	r0, 0x3f	; 63
 c64:	f8 94       	cli
 c66:	de bf       	out	0x3e, r29	; 62
 c68:	0f be       	out	0x3f, r0	; 63
 c6a:	cd bf       	out	0x3d, r28	; 61
 c6c:	df 91       	pop	r29
 c6e:	cf 91       	pop	r28
 c70:	1f 91       	pop	r17
 c72:	0f 91       	pop	r16
 c74:	08 95       	ret

00000c76 <usart_init>:
 
void usart_init()
{
 c76:	cf 93       	push	r28
 c78:	df 93       	push	r29
 c7a:	cd b7       	in	r28, 0x3d	; 61
 c7c:	de b7       	in	r29, 0x3e	; 62
	UCSRB |= (1 << TXEN) | (1 << RXEN);   
 c7e:	8a e2       	ldi	r24, 0x2A	; 42
 c80:	90 e0       	ldi	r25, 0x00	; 0
 c82:	2a e2       	ldi	r18, 0x2A	; 42
 c84:	30 e0       	ldi	r19, 0x00	; 0
 c86:	f9 01       	movw	r30, r18
 c88:	20 81       	ld	r18, Z
 c8a:	28 61       	ori	r18, 0x18	; 24
 c8c:	fc 01       	movw	r30, r24
 c8e:	20 83       	st	Z, r18
					// Turn on the transmission and reception circuitry
	//UCSRC |= (1 << URSEL) | (1<<USBS) | (1 << UCSZ0) | (1 << UCSZ1); 
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
 c90:	80 e4       	ldi	r24, 0x40	; 64
 c92:	90 e0       	ldi	r25, 0x00	; 0
 c94:	20 e4       	ldi	r18, 0x40	; 64
 c96:	30 e0       	ldi	r19, 0x00	; 0
 c98:	f9 01       	movw	r30, r18
 c9a:	20 81       	ld	r18, Z
 c9c:	26 68       	ori	r18, 0x86	; 134
 c9e:	fc 01       	movw	r30, r24
 ca0:	20 83       	st	Z, r18
					// Use 8-bit character sizes
    UBRRL=51;
 ca2:	89 e2       	ldi	r24, 0x29	; 41
 ca4:	90 e0       	ldi	r25, 0x00	; 0
 ca6:	23 e3       	ldi	r18, 0x33	; 51
 ca8:	fc 01       	movw	r30, r24
 caa:	20 83       	st	Z, r18
	//UBRRL = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value..
							// into the low byte of the UBRR register
	//UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value..
									// into the high byte of the UBRR register
}
 cac:	df 91       	pop	r29
 cae:	cf 91       	pop	r28
 cb0:	08 95       	ret

00000cb2 <usart_putch>:
 
void usart_putch(unsigned char send)
{
 cb2:	cf 93       	push	r28
 cb4:	df 93       	push	r29
 cb6:	0f 92       	push	r0
 cb8:	cd b7       	in	r28, 0x3d	; 61
 cba:	de b7       	in	r29, 0x3e	; 62
 cbc:	89 83       	std	Y+1, r24	; 0x01
	
	while(!(UCSRA & (1 << UDRE))); 
 cbe:	00 00       	nop
 cc0:	8b e2       	ldi	r24, 0x2B	; 43
 cc2:	90 e0       	ldi	r25, 0x00	; 0
 cc4:	fc 01       	movw	r30, r24
 cc6:	80 81       	ld	r24, Z
 cc8:	88 2f       	mov	r24, r24
 cca:	90 e0       	ldi	r25, 0x00	; 0
 ccc:	80 72       	andi	r24, 0x20	; 32
 cce:	90 70       	andi	r25, 0x00	; 0
 cd0:	00 97       	sbiw	r24, 0x00	; 0
 cd2:	b1 f3       	breq	.-20     	; 0xcc0 <usart_putch+0xe>
	// Do nothing until UDR is ready..
					 		// for more data to be written to it
	UDR = send; // Send the byte 
 cd4:	8c e2       	ldi	r24, 0x2C	; 44
 cd6:	90 e0       	ldi	r25, 0x00	; 0
 cd8:	29 81       	ldd	r18, Y+1	; 0x01
 cda:	fc 01       	movw	r30, r24
 cdc:	20 83       	st	Z, r18
}
 cde:	0f 90       	pop	r0
 ce0:	df 91       	pop	r29
 ce2:	cf 91       	pop	r28
 ce4:	08 95       	ret

00000ce6 <usart_getch>:
unsigned int usart_getch()
{
 ce6:	cf 93       	push	r28
 ce8:	df 93       	push	r29
 cea:	cd b7       	in	r28, 0x3d	; 61
 cec:	de b7       	in	r29, 0x3e	; 62
	while ((UCSRA & (1 << RXC)) == 0);				// Do nothing until data have been received and is ready to be read from UDR
 cee:	00 00       	nop
 cf0:	8b e2       	ldi	r24, 0x2B	; 43
 cf2:	90 e0       	ldi	r25, 0x00	; 0
 cf4:	fc 01       	movw	r30, r24
 cf6:	80 81       	ld	r24, Z
 cf8:	88 23       	and	r24, r24
 cfa:	d4 f7       	brge	.-12     	; 0xcf0 <usart_getch+0xa>
		return(UDR); // return the byte
 cfc:	8c e2       	ldi	r24, 0x2C	; 44
 cfe:	90 e0       	ldi	r25, 0x00	; 0
 d00:	fc 01       	movw	r30, r24
 d02:	80 81       	ld	r24, Z
 d04:	88 2f       	mov	r24, r24
 d06:	90 e0       	ldi	r25, 0x00	; 0

//PORTC=UDR;
 d08:	df 91       	pop	r29
 d0a:	cf 91       	pop	r28
 d0c:	08 95       	ret

00000d0e <__cmpsf2>:
 d0e:	2f d0       	rcall	.+94     	; 0xd6e <__fp_cmp>
 d10:	08 f4       	brcc	.+2      	; 0xd14 <__cmpsf2+0x6>
 d12:	81 e0       	ldi	r24, 0x01	; 1
 d14:	08 95       	ret

00000d16 <__fixunssfsi>:
 d16:	57 d0       	rcall	.+174    	; 0xdc6 <__fp_splitA>
 d18:	88 f0       	brcs	.+34     	; 0xd3c <__fixunssfsi+0x26>
 d1a:	9f 57       	subi	r25, 0x7F	; 127
 d1c:	90 f0       	brcs	.+36     	; 0xd42 <__fixunssfsi+0x2c>
 d1e:	b9 2f       	mov	r27, r25
 d20:	99 27       	eor	r25, r25
 d22:	b7 51       	subi	r27, 0x17	; 23
 d24:	a0 f0       	brcs	.+40     	; 0xd4e <__fixunssfsi+0x38>
 d26:	d1 f0       	breq	.+52     	; 0xd5c <__fixunssfsi+0x46>
 d28:	66 0f       	add	r22, r22
 d2a:	77 1f       	adc	r23, r23
 d2c:	88 1f       	adc	r24, r24
 d2e:	99 1f       	adc	r25, r25
 d30:	1a f0       	brmi	.+6      	; 0xd38 <__fixunssfsi+0x22>
 d32:	ba 95       	dec	r27
 d34:	c9 f7       	brne	.-14     	; 0xd28 <__fixunssfsi+0x12>
 d36:	12 c0       	rjmp	.+36     	; 0xd5c <__fixunssfsi+0x46>
 d38:	b1 30       	cpi	r27, 0x01	; 1
 d3a:	81 f0       	breq	.+32     	; 0xd5c <__fixunssfsi+0x46>
 d3c:	5e d0       	rcall	.+188    	; 0xdfa <__fp_zero>
 d3e:	b1 e0       	ldi	r27, 0x01	; 1
 d40:	08 95       	ret
 d42:	5b c0       	rjmp	.+182    	; 0xdfa <__fp_zero>
 d44:	67 2f       	mov	r22, r23
 d46:	78 2f       	mov	r23, r24
 d48:	88 27       	eor	r24, r24
 d4a:	b8 5f       	subi	r27, 0xF8	; 248
 d4c:	39 f0       	breq	.+14     	; 0xd5c <__fixunssfsi+0x46>
 d4e:	b9 3f       	cpi	r27, 0xF9	; 249
 d50:	cc f3       	brlt	.-14     	; 0xd44 <__fixunssfsi+0x2e>
 d52:	86 95       	lsr	r24
 d54:	77 95       	ror	r23
 d56:	67 95       	ror	r22
 d58:	b3 95       	inc	r27
 d5a:	d9 f7       	brne	.-10     	; 0xd52 <__fixunssfsi+0x3c>
 d5c:	3e f4       	brtc	.+14     	; 0xd6c <__fixunssfsi+0x56>
 d5e:	90 95       	com	r25
 d60:	80 95       	com	r24
 d62:	70 95       	com	r23
 d64:	61 95       	neg	r22
 d66:	7f 4f       	sbci	r23, 0xFF	; 255
 d68:	8f 4f       	sbci	r24, 0xFF	; 255
 d6a:	9f 4f       	sbci	r25, 0xFF	; 255
 d6c:	08 95       	ret

00000d6e <__fp_cmp>:
 d6e:	99 0f       	add	r25, r25
 d70:	00 08       	sbc	r0, r0
 d72:	55 0f       	add	r21, r21
 d74:	aa 0b       	sbc	r26, r26
 d76:	e0 e8       	ldi	r30, 0x80	; 128
 d78:	fe ef       	ldi	r31, 0xFE	; 254
 d7a:	16 16       	cp	r1, r22
 d7c:	17 06       	cpc	r1, r23
 d7e:	e8 07       	cpc	r30, r24
 d80:	f9 07       	cpc	r31, r25
 d82:	c0 f0       	brcs	.+48     	; 0xdb4 <__fp_cmp+0x46>
 d84:	12 16       	cp	r1, r18
 d86:	13 06       	cpc	r1, r19
 d88:	e4 07       	cpc	r30, r20
 d8a:	f5 07       	cpc	r31, r21
 d8c:	98 f0       	brcs	.+38     	; 0xdb4 <__fp_cmp+0x46>
 d8e:	62 1b       	sub	r22, r18
 d90:	73 0b       	sbc	r23, r19
 d92:	84 0b       	sbc	r24, r20
 d94:	95 0b       	sbc	r25, r21
 d96:	39 f4       	brne	.+14     	; 0xda6 <__fp_cmp+0x38>
 d98:	0a 26       	eor	r0, r26
 d9a:	61 f0       	breq	.+24     	; 0xdb4 <__fp_cmp+0x46>
 d9c:	23 2b       	or	r18, r19
 d9e:	24 2b       	or	r18, r20
 da0:	25 2b       	or	r18, r21
 da2:	21 f4       	brne	.+8      	; 0xdac <__fp_cmp+0x3e>
 da4:	08 95       	ret
 da6:	0a 26       	eor	r0, r26
 da8:	09 f4       	brne	.+2      	; 0xdac <__fp_cmp+0x3e>
 daa:	a1 40       	sbci	r26, 0x01	; 1
 dac:	a6 95       	lsr	r26
 dae:	8f ef       	ldi	r24, 0xFF	; 255
 db0:	81 1d       	adc	r24, r1
 db2:	81 1d       	adc	r24, r1
 db4:	08 95       	ret

00000db6 <__fp_split3>:
 db6:	57 fd       	sbrc	r21, 7
 db8:	90 58       	subi	r25, 0x80	; 128
 dba:	44 0f       	add	r20, r20
 dbc:	55 1f       	adc	r21, r21
 dbe:	59 f0       	breq	.+22     	; 0xdd6 <__fp_splitA+0x10>
 dc0:	5f 3f       	cpi	r21, 0xFF	; 255
 dc2:	71 f0       	breq	.+28     	; 0xde0 <__fp_splitA+0x1a>
 dc4:	47 95       	ror	r20

00000dc6 <__fp_splitA>:
 dc6:	88 0f       	add	r24, r24
 dc8:	97 fb       	bst	r25, 7
 dca:	99 1f       	adc	r25, r25
 dcc:	61 f0       	breq	.+24     	; 0xde6 <__fp_splitA+0x20>
 dce:	9f 3f       	cpi	r25, 0xFF	; 255
 dd0:	79 f0       	breq	.+30     	; 0xdf0 <__fp_splitA+0x2a>
 dd2:	87 95       	ror	r24
 dd4:	08 95       	ret
 dd6:	12 16       	cp	r1, r18
 dd8:	13 06       	cpc	r1, r19
 dda:	14 06       	cpc	r1, r20
 ddc:	55 1f       	adc	r21, r21
 dde:	f2 cf       	rjmp	.-28     	; 0xdc4 <__fp_split3+0xe>
 de0:	46 95       	lsr	r20
 de2:	f1 df       	rcall	.-30     	; 0xdc6 <__fp_splitA>
 de4:	08 c0       	rjmp	.+16     	; 0xdf6 <__fp_splitA+0x30>
 de6:	16 16       	cp	r1, r22
 de8:	17 06       	cpc	r1, r23
 dea:	18 06       	cpc	r1, r24
 dec:	99 1f       	adc	r25, r25
 dee:	f1 cf       	rjmp	.-30     	; 0xdd2 <__fp_splitA+0xc>
 df0:	86 95       	lsr	r24
 df2:	71 05       	cpc	r23, r1
 df4:	61 05       	cpc	r22, r1
 df6:	08 94       	sec
 df8:	08 95       	ret

00000dfa <__fp_zero>:
 dfa:	e8 94       	clt

00000dfc <__fp_szero>:
 dfc:	bb 27       	eor	r27, r27
 dfe:	66 27       	eor	r22, r22
 e00:	77 27       	eor	r23, r23
 e02:	cb 01       	movw	r24, r22
 e04:	97 f9       	bld	r25, 7
 e06:	08 95       	ret

00000e08 <__gesf2>:
 e08:	b2 df       	rcall	.-156    	; 0xd6e <__fp_cmp>
 e0a:	08 f4       	brcc	.+2      	; 0xe0e <__gesf2+0x6>
 e0c:	8f ef       	ldi	r24, 0xFF	; 255
 e0e:	08 95       	ret

00000e10 <__mulsf3>:
 e10:	0b d0       	rcall	.+22     	; 0xe28 <__mulsf3x>
 e12:	78 c0       	rjmp	.+240    	; 0xf04 <__fp_round>
 e14:	69 d0       	rcall	.+210    	; 0xee8 <__fp_pscA>
 e16:	28 f0       	brcs	.+10     	; 0xe22 <__mulsf3+0x12>
 e18:	6e d0       	rcall	.+220    	; 0xef6 <__fp_pscB>
 e1a:	18 f0       	brcs	.+6      	; 0xe22 <__mulsf3+0x12>
 e1c:	95 23       	and	r25, r21
 e1e:	09 f0       	breq	.+2      	; 0xe22 <__mulsf3+0x12>
 e20:	5a c0       	rjmp	.+180    	; 0xed6 <__fp_inf>
 e22:	5f c0       	rjmp	.+190    	; 0xee2 <__fp_nan>
 e24:	11 24       	eor	r1, r1
 e26:	ea cf       	rjmp	.-44     	; 0xdfc <__fp_szero>

00000e28 <__mulsf3x>:
 e28:	c6 df       	rcall	.-116    	; 0xdb6 <__fp_split3>
 e2a:	a0 f3       	brcs	.-24     	; 0xe14 <__mulsf3+0x4>

00000e2c <__mulsf3_pse>:
 e2c:	95 9f       	mul	r25, r21
 e2e:	d1 f3       	breq	.-12     	; 0xe24 <__mulsf3+0x14>
 e30:	95 0f       	add	r25, r21
 e32:	50 e0       	ldi	r21, 0x00	; 0
 e34:	55 1f       	adc	r21, r21
 e36:	62 9f       	mul	r22, r18
 e38:	f0 01       	movw	r30, r0
 e3a:	72 9f       	mul	r23, r18
 e3c:	bb 27       	eor	r27, r27
 e3e:	f0 0d       	add	r31, r0
 e40:	b1 1d       	adc	r27, r1
 e42:	63 9f       	mul	r22, r19
 e44:	aa 27       	eor	r26, r26
 e46:	f0 0d       	add	r31, r0
 e48:	b1 1d       	adc	r27, r1
 e4a:	aa 1f       	adc	r26, r26
 e4c:	64 9f       	mul	r22, r20
 e4e:	66 27       	eor	r22, r22
 e50:	b0 0d       	add	r27, r0
 e52:	a1 1d       	adc	r26, r1
 e54:	66 1f       	adc	r22, r22
 e56:	82 9f       	mul	r24, r18
 e58:	22 27       	eor	r18, r18
 e5a:	b0 0d       	add	r27, r0
 e5c:	a1 1d       	adc	r26, r1
 e5e:	62 1f       	adc	r22, r18
 e60:	73 9f       	mul	r23, r19
 e62:	b0 0d       	add	r27, r0
 e64:	a1 1d       	adc	r26, r1
 e66:	62 1f       	adc	r22, r18
 e68:	83 9f       	mul	r24, r19
 e6a:	a0 0d       	add	r26, r0
 e6c:	61 1d       	adc	r22, r1
 e6e:	22 1f       	adc	r18, r18
 e70:	74 9f       	mul	r23, r20
 e72:	33 27       	eor	r19, r19
 e74:	a0 0d       	add	r26, r0
 e76:	61 1d       	adc	r22, r1
 e78:	23 1f       	adc	r18, r19
 e7a:	84 9f       	mul	r24, r20
 e7c:	60 0d       	add	r22, r0
 e7e:	21 1d       	adc	r18, r1
 e80:	82 2f       	mov	r24, r18
 e82:	76 2f       	mov	r23, r22
 e84:	6a 2f       	mov	r22, r26
 e86:	11 24       	eor	r1, r1
 e88:	9f 57       	subi	r25, 0x7F	; 127
 e8a:	50 40       	sbci	r21, 0x00	; 0
 e8c:	8a f0       	brmi	.+34     	; 0xeb0 <__mulsf3_pse+0x84>
 e8e:	e1 f0       	breq	.+56     	; 0xec8 <__mulsf3_pse+0x9c>
 e90:	88 23       	and	r24, r24
 e92:	4a f0       	brmi	.+18     	; 0xea6 <__mulsf3_pse+0x7a>
 e94:	ee 0f       	add	r30, r30
 e96:	ff 1f       	adc	r31, r31
 e98:	bb 1f       	adc	r27, r27
 e9a:	66 1f       	adc	r22, r22
 e9c:	77 1f       	adc	r23, r23
 e9e:	88 1f       	adc	r24, r24
 ea0:	91 50       	subi	r25, 0x01	; 1
 ea2:	50 40       	sbci	r21, 0x00	; 0
 ea4:	a9 f7       	brne	.-22     	; 0xe90 <__mulsf3_pse+0x64>
 ea6:	9e 3f       	cpi	r25, 0xFE	; 254
 ea8:	51 05       	cpc	r21, r1
 eaa:	70 f0       	brcs	.+28     	; 0xec8 <__mulsf3_pse+0x9c>
 eac:	14 c0       	rjmp	.+40     	; 0xed6 <__fp_inf>
 eae:	a6 cf       	rjmp	.-180    	; 0xdfc <__fp_szero>
 eb0:	5f 3f       	cpi	r21, 0xFF	; 255
 eb2:	ec f3       	brlt	.-6      	; 0xeae <__mulsf3_pse+0x82>
 eb4:	98 3e       	cpi	r25, 0xE8	; 232
 eb6:	dc f3       	brlt	.-10     	; 0xeae <__mulsf3_pse+0x82>
 eb8:	86 95       	lsr	r24
 eba:	77 95       	ror	r23
 ebc:	67 95       	ror	r22
 ebe:	b7 95       	ror	r27
 ec0:	f7 95       	ror	r31
 ec2:	e7 95       	ror	r30
 ec4:	9f 5f       	subi	r25, 0xFF	; 255
 ec6:	c1 f7       	brne	.-16     	; 0xeb8 <__mulsf3_pse+0x8c>
 ec8:	fe 2b       	or	r31, r30
 eca:	88 0f       	add	r24, r24
 ecc:	91 1d       	adc	r25, r1
 ece:	96 95       	lsr	r25
 ed0:	87 95       	ror	r24
 ed2:	97 f9       	bld	r25, 7
 ed4:	08 95       	ret

00000ed6 <__fp_inf>:
 ed6:	97 f9       	bld	r25, 7
 ed8:	9f 67       	ori	r25, 0x7F	; 127
 eda:	80 e8       	ldi	r24, 0x80	; 128
 edc:	70 e0       	ldi	r23, 0x00	; 0
 ede:	60 e0       	ldi	r22, 0x00	; 0
 ee0:	08 95       	ret

00000ee2 <__fp_nan>:
 ee2:	9f ef       	ldi	r25, 0xFF	; 255
 ee4:	80 ec       	ldi	r24, 0xC0	; 192
 ee6:	08 95       	ret

00000ee8 <__fp_pscA>:
 ee8:	00 24       	eor	r0, r0
 eea:	0a 94       	dec	r0
 eec:	16 16       	cp	r1, r22
 eee:	17 06       	cpc	r1, r23
 ef0:	18 06       	cpc	r1, r24
 ef2:	09 06       	cpc	r0, r25
 ef4:	08 95       	ret

00000ef6 <__fp_pscB>:
 ef6:	00 24       	eor	r0, r0
 ef8:	0a 94       	dec	r0
 efa:	12 16       	cp	r1, r18
 efc:	13 06       	cpc	r1, r19
 efe:	14 06       	cpc	r1, r20
 f00:	05 06       	cpc	r0, r21
 f02:	08 95       	ret

00000f04 <__fp_round>:
 f04:	09 2e       	mov	r0, r25
 f06:	03 94       	inc	r0
 f08:	00 0c       	add	r0, r0
 f0a:	11 f4       	brne	.+4      	; 0xf10 <__fp_round+0xc>
 f0c:	88 23       	and	r24, r24
 f0e:	52 f0       	brmi	.+20     	; 0xf24 <__fp_round+0x20>
 f10:	bb 0f       	add	r27, r27
 f12:	40 f4       	brcc	.+16     	; 0xf24 <__fp_round+0x20>
 f14:	bf 2b       	or	r27, r31
 f16:	11 f4       	brne	.+4      	; 0xf1c <__fp_round+0x18>
 f18:	60 ff       	sbrs	r22, 0
 f1a:	04 c0       	rjmp	.+8      	; 0xf24 <__fp_round+0x20>
 f1c:	6f 5f       	subi	r22, 0xFF	; 255
 f1e:	7f 4f       	sbci	r23, 0xFF	; 255
 f20:	8f 4f       	sbci	r24, 0xFF	; 255
 f22:	9f 4f       	sbci	r25, 0xFF	; 255
 f24:	08 95       	ret

00000f26 <_exit>:
 f26:	f8 94       	cli

00000f28 <__stop_program>:
 f28:	ff cf       	rjmp	.-2      	; 0xf28 <__stop_program>
