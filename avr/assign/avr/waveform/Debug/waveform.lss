
waveform.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  000008a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000037  00000000  00000000  000008c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000ab  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000061  00000000  00000000  000009a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000122  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00000b28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000008c  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000001e  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_19>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define FREQ 12000000	// crsytal freqeuncy
#define PRECSALER 8		
#define F_OUT 5000		// output frequency
#define OCR0_VALUE ((((FREQ/2)/PRECSALER)/F_OUT)-1)	 
int main()
{				
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	t0_init();			// timer initialize
  74:	0e 94 3e 00 	call	0x7c	; 0x7c <t0_init>
	sei();				// enable global interrupts
  78:	78 94       	sei
	while(1);
  7a:	ff cf       	rjmp	.-2      	; 0x7a <main+0xe>

0000007c <t0_init>:
}
 
void t0_init()
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	// WGM0[1:0]= 10, for CTC mode
	// COM0[1:0]= 01, to toggle OC0 on compare match
	// CS0[2:0] =010. for prescaler 8
	 		
	TCCR0=(1<<WGM01)|(1<<COM00)|(1<<CS01);
  84:	83 e5       	ldi	r24, 0x53	; 83
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	2a e1       	ldi	r18, 0x1A	; 26
  8a:	fc 01       	movw	r30, r24
  8c:	20 83       	st	Z, r18
	DDRB|=(1<<PB3);			// select as output pin 
  8e:	87 e3       	ldi	r24, 0x37	; 55
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	27 e3       	ldi	r18, 0x37	; 55
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	f9 01       	movw	r30, r18
  98:	20 81       	ld	r18, Z
  9a:	28 60       	ori	r18, 0x08	; 8
  9c:	fc 01       	movw	r30, r24
  9e:	20 83       	st	Z, r18
	TIMSK|=(1<<OCIE0);		//enable output compare interrupt			
  a0:	89 e5       	ldi	r24, 0x59	; 89
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	29 e5       	ldi	r18, 0x59	; 89
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	f9 01       	movw	r30, r18
  aa:	20 81       	ld	r18, Z
  ac:	22 60       	ori	r18, 0x02	; 2
  ae:	fc 01       	movw	r30, r24
  b0:	20 83       	st	Z, r18
}
  b2:	cf 91       	pop	r28
  b4:	df 91       	pop	r29
  b6:	08 95       	ret

000000b8 <__vector_19>:
 
ISR(TIMER0_COMP_vect)			// interrupt subroutine
{
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	2f 93       	push	r18
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
  c8:	ef 93       	push	r30
  ca:	ff 93       	push	r31
  cc:	df 93       	push	r29
  ce:	cf 93       	push	r28
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
	OCR0=(uint8_t)OCR0_VALUE;	//put OCR value
  d4:	8c e5       	ldi	r24, 0x5C	; 92
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	25 e9       	ldi	r18, 0x95	; 149
  da:	fc 01       	movw	r30, r24
  dc:	20 83       	st	Z, r18
  de:	cf 91       	pop	r28
  e0:	df 91       	pop	r29
  e2:	ff 91       	pop	r31
  e4:	ef 91       	pop	r30
  e6:	9f 91       	pop	r25
  e8:	8f 91       	pop	r24
  ea:	2f 91       	pop	r18
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
