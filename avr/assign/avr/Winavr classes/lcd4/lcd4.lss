
lcd4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000001a0  00000214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000006c  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002d6  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000160  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002ac  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000994  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e9  00000000  00000000  00000a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001ad  00000000  00000000  00000afd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000caa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ea       	ldi	r30, 0xA0	; 160
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
  7a:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <writecmd>:
	
}

void writecmd(unsigned char a)
{
	lcd=a;
  82:	88 bb       	out	0x18, r24	; 24
	lcd&=~(1<<rs);
  84:	c0 98       	cbi	0x18, 0	; 24
	lcd&=~(1<<rw);
  86:	c1 98       	cbi	0x18, 1	; 24
	lcd|=(1<<en);
  88:	c2 9a       	sbi	0x18, 2	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8a:	80 e1       	ldi	r24, 0x10	; 16
  8c:	97 e2       	ldi	r25, 0x27	; 39
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <writecmd+0xc>
	_delay_ms(5);
	lcd&=~(1<<en);
  92:	c2 98       	cbi	0x18, 2	; 24
	
}
  94:	08 95       	ret

00000096 <writedata>:

void writedata(unsigned char b)
{	lcd=b;
  96:	88 bb       	out	0x18, r24	; 24
	lcd|=(1<<rs);
  98:	c0 9a       	sbi	0x18, 0	; 24
	lcd&=~(1<<rw);
  9a:	c1 98       	cbi	0x18, 1	; 24
	lcd|=(1<<en);
  9c:	c2 9a       	sbi	0x18, 2	; 24
  9e:	80 e1       	ldi	r24, 0x10	; 16
  a0:	97 e2       	ldi	r25, 0x27	; 39
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <writedata+0xc>
	_delay_ms(5);
	lcd&=~(1<<en);
  a6:	c2 98       	cbi	0x18, 2	; 24

}
  a8:	08 95       	ret

000000aa <writecmd1>:
		writedata1(*s);
		s++;
	}
}
void writecmd1(unsigned char value)
{
  aa:	1f 93       	push	r17
  ac:	18 2f       	mov	r17, r24
	unsigned char cd1;
	cd1=value & 0xf0;
	writecmd(cd1);
  ae:	80 7f       	andi	r24, 0xF0	; 240
  b0:	0e 94 41 00 	call	0x82	; 0x82 <writecmd>
	cd1=(value<<4) & 0xf0;
	writecmd(cd1);
  b4:	81 2f       	mov	r24, r17
  b6:	82 95       	swap	r24
  b8:	80 7f       	andi	r24, 0xF0	; 240
  ba:	0e 94 41 00 	call	0x82	; 0x82 <writecmd>
}	
  be:	1f 91       	pop	r17
  c0:	08 95       	ret

000000c2 <lcdinit>:
	}
	}
}
void lcdinit(void)
{
writecmd1(0x02);
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	0e 94 55 00 	call	0xaa	; 0xaa <writecmd1>
	writecmd1(0x28);
  c8:	88 e2       	ldi	r24, 0x28	; 40
  ca:	0e 94 55 00 	call	0xaa	; 0xaa <writecmd1>
	writecmd1(0x0c);
  ce:	8c e0       	ldi	r24, 0x0C	; 12
  d0:	0e 94 55 00 	call	0xaa	; 0xaa <writecmd1>
	writecmd1(0x01);
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	0e 94 55 00 	call	0xaa	; 0xaa <writecmd1>
	writecmd1(0x06);
  da:	86 e0       	ldi	r24, 0x06	; 6
  dc:	0e 94 55 00 	call	0xaa	; 0xaa <writecmd1>
	writecmd1(0x80);
  e0:	80 e8       	ldi	r24, 0x80	; 128
  e2:	0e 94 55 00 	call	0xaa	; 0xaa <writecmd1>
	
}
  e6:	08 95       	ret

000000e8 <writedata1>:
	writecmd(cd1);
	cd1=(value<<4) & 0xf0;
	writecmd(cd1);
}	
void writedata1(unsigned char value)
{
  e8:	1f 93       	push	r17
  ea:	18 2f       	mov	r17, r24
	unsigned char cd1;
	cd1=value & 0xf0;
	writedata(cd1);
  ec:	80 7f       	andi	r24, 0xF0	; 240
  ee:	0e 94 4b 00 	call	0x96	; 0x96 <writedata>
	cd1=(value<<4) & 0xf0;
	writedata(cd1);
  f2:	81 2f       	mov	r24, r17
  f4:	82 95       	swap	r24
  f6:	80 7f       	andi	r24, 0xF0	; 240
  f8:	0e 94 4b 00 	call	0x96	; 0x96 <writedata>
}	
  fc:	1f 91       	pop	r17
  fe:	08 95       	ret

00000100 <writestr>:
	_delay_ms(5);
	lcd&=~(1<<en);

}
void writestr(unsigned char *s)
{	
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	18 2f       	mov	r17, r24
	unsigned char l,i;
	l=strlen(s);
 10a:	a8 2f       	mov	r26, r24
 10c:	b9 2f       	mov	r27, r25
 10e:	fd 01       	movw	r30, r26
 110:	01 90       	ld	r0, Z+
 112:	00 20       	and	r0, r0
 114:	e9 f7       	brne	.-6      	; 0x110 <writestr+0x10>
 116:	31 97       	sbiw	r30, 0x01	; 1
 118:	0e 2f       	mov	r16, r30
 11a:	08 1b       	sub	r16, r24
 11c:	28 2f       	mov	r18, r24
 11e:	39 2f       	mov	r19, r25
 120:	c9 01       	movw	r24, r18
 122:	ec 01       	movw	r28, r24
 124:	03 c0       	rjmp	.+6      	; 0x12c <writestr+0x2c>
	for(i=0;i<l;i++)
	{
		writedata1(*s);
 126:	89 91       	ld	r24, Y+
 128:	0e 94 74 00 	call	0xe8	; 0xe8 <writedata1>
}
void writestr(unsigned char *s)
{	
	unsigned char l,i;
	l=strlen(s);
	for(i=0;i<l;i++)
 12c:	9e 01       	movw	r18, r28
 12e:	21 1b       	sub	r18, r17
 130:	20 17       	cp	r18, r16
 132:	c8 f3       	brcs	.-14     	; 0x126 <writestr+0x26>
	{
		writedata1(*s);
		s++;
	}
}
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	08 95       	ret

0000013e <main>:
void lcdinit(void);
void writecmd1(unsigned char);
void writedata1(unsigned char);

int main(void)
{
 13e:	1f 93       	push	r17
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
	unsigned char i;
	DDRB=0xff;
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	87 bb       	out	0x17, r24	; 23
	lcdinit();
 148:	0e 94 61 00 	call	0xc2	; 0xc2 <lcdinit>
	writecmd1(0x80);
 14c:	80 e8       	ldi	r24, 0x80	; 128
 14e:	0e 94 55 00 	call	0xaa	; 0xaa <writecmd1>
	//	writecmd(0xc5);
	writestr("WELCOME TO CETPA");
 152:	80 e6       	ldi	r24, 0x60	; 96
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 80 00 	call	0x100	; 0x100 <writestr>
 15a:	10 e0       	ldi	r17, 0x00	; 0
 15c:	c8 ec       	ldi	r28, 0xC8	; 200
 15e:	d0 e0       	ldi	r29, 0x00	; 0
 160:	0b c0       	rjmp	.+22     	; 0x178 <main+0x3a>
	//writedata('A');
	while(1)
	{
	for(i=0;i<16;i++)
	{
	writecmd1(0x1c);
 162:	8c e1       	ldi	r24, 0x1C	; 28
 164:	0e 94 55 00 	call	0xaa	; 0xaa <writecmd1>
 168:	80 ed       	ldi	r24, 0xD0	; 208
 16a:	97 e0       	ldi	r25, 0x07	; 7
 16c:	fe 01       	movw	r30, r28
 16e:	31 97       	sbiw	r30, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <main+0x30>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 172:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 174:	d9 f7       	brne	.-10     	; 0x16c <main+0x2e>
	//	writecmd(0xc5);
	writestr("WELCOME TO CETPA");
	//writedata('A');
	while(1)
	{
	for(i=0;i<16;i++)
 176:	1f 5f       	subi	r17, 0xFF	; 255
 178:	10 31       	cpi	r17, 0x10	; 16
 17a:	98 f3       	brcs	.-26     	; 0x162 <main+0x24>
 17c:	10 e0       	ldi	r17, 0x00	; 0
	writecmd1(0x1c);
	_delay_ms(200);
	}	
	for(i=0;i<16;i++)
	{
	writecmd1(0x18);
 17e:	88 e1       	ldi	r24, 0x18	; 24
 180:	0e 94 55 00 	call	0xaa	; 0xaa <writecmd1>
 184:	80 ed       	ldi	r24, 0xD0	; 208
 186:	97 e0       	ldi	r25, 0x07	; 7
 188:	fe 01       	movw	r30, r28
 18a:	31 97       	sbiw	r30, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <main+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 18e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 190:	d9 f7       	brne	.-10     	; 0x188 <main+0x4a>
	for(i=0;i<16;i++)
	{
	writecmd1(0x1c);
	_delay_ms(200);
	}	
	for(i=0;i<16;i++)
 192:	1f 5f       	subi	r17, 0xFF	; 255
 194:	10 31       	cpi	r17, 0x10	; 16
 196:	99 f7       	brne	.-26     	; 0x17e <main+0x40>
 198:	10 e0       	ldi	r17, 0x00	; 0
 19a:	e3 cf       	rjmp	.-58     	; 0x162 <main+0x24>

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
