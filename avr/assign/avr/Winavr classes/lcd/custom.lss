
custom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000005d  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000459  00000000  00000000  00000479  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000013b  00000000  00000000  000008d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000005c4  00000000  00000000  00000a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000070  00000000  00000000  00000fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d9  00000000  00000000  00001044  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000201  00000000  00000000  0000111d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 ab 01 	call	0x356	; 0x356 <main>
  64:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <writecmd>:
	
}

void writecmd(unsigned char a)
{
	lcd=a;
  6c:	88 bb       	out	0x18, r24	; 24
	ctrl&=~(1<<rs);
  6e:	d8 98       	cbi	0x1b, 0	; 27
	ctrl&=~(1<<rw);
  70:	d9 98       	cbi	0x1b, 1	; 27
	ctrl|=(1<<en);
  72:	da 9a       	sbi	0x1b, 2	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  74:	80 e1       	ldi	r24, 0x10	; 16
  76:	97 e2       	ldi	r25, 0x27	; 39
  78:	01 97       	sbiw	r24, 0x01	; 1
  7a:	f1 f7       	brne	.-4      	; 0x78 <writecmd+0xc>
	_delay_ms(5);
	ctrl&=~(1<<en);
  7c:	da 98       	cbi	0x1b, 2	; 27
	
}
  7e:	08 95       	ret

00000080 <lcdinit>:
	character();
	}
}
void lcdinit(void)
{
	writecmd(0x38);
  80:	88 e3       	ldi	r24, 0x38	; 56
  82:	0e 94 36 00 	call	0x6c	; 0x6c <writecmd>
	writecmd(0x0c);
  86:	8c e0       	ldi	r24, 0x0C	; 12
  88:	0e 94 36 00 	call	0x6c	; 0x6c <writecmd>
	writecmd(0x01);
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	0e 94 36 00 	call	0x6c	; 0x6c <writecmd>
	writecmd(0x06);
  92:	86 e0       	ldi	r24, 0x06	; 6
  94:	0e 94 36 00 	call	0x6c	; 0x6c <writecmd>
	writecmd(0x80);
  98:	80 e8       	ldi	r24, 0x80	; 128
  9a:	0e 94 36 00 	call	0x6c	; 0x6c <writecmd>
	
}
  9e:	08 95       	ret

000000a0 <writedata>:
	ctrl&=~(1<<en);
	
}

void writedata(unsigned char b)
{	lcd=b;
  a0:	88 bb       	out	0x18, r24	; 24
	ctrl|=(1<<rs);
  a2:	d8 9a       	sbi	0x1b, 0	; 27
	ctrl&=~(1<<rw);
  a4:	d9 98       	cbi	0x1b, 1	; 27
	ctrl|=(1<<en);
  a6:	da 9a       	sbi	0x1b, 2	; 27
  a8:	80 e1       	ldi	r24, 0x10	; 16
  aa:	97 e2       	ldi	r25, 0x27	; 39
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <writedata+0xc>
	_delay_ms(5);
	ctrl&=~(1<<en);
  b0:	da 98       	cbi	0x1b, 2	; 27
}
  b2:	08 95       	ret

000000b4 <character>:
	}
}

void character(void)
{
writecmd(64);  //Address where values of the first custom character is stored
  b4:	80 e4       	ldi	r24, 0x40	; 64
  b6:	0e 94 36 00 	call	0x6c	; 0x6c <writecmd>
writedata(0);
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(10);
  c0:	8a e0       	ldi	r24, 0x0A	; 10
  c2:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(21);
  c6:	85 e1       	ldi	r24, 0x15	; 21
  c8:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(17);
  cc:	81 e1       	ldi	r24, 0x11	; 17
  ce:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(10);
  d2:	8a e0       	ldi	r24, 0x0A	; 10
  d4:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(4);
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(0);
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(0);
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writecmd(0xC0);  //Address of the location where the character is to be displayed
  ea:	80 ec       	ldi	r24, 0xC0	; 192
  ec:	0e 94 36 00 	call	0x6c	; 0x6c <writecmd>
writedata(0);  // Displaying the character created at address 0x64 
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
  f6:	84 ef       	ldi	r24, 0xF4	; 244
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	28 ec       	ldi	r18, 0xC8	; 200
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	f9 01       	movw	r30, r18
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <character+0x4c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 104:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 106:	d9 f7       	brne	.-10     	; 0xfe <character+0x4a>
_delay_ms(50);

writecmd(72);
 108:	88 e4       	ldi	r24, 0x48	; 72
 10a:	0e 94 36 00 	call	0x6c	; 0x6c <writecmd>
writedata(0);
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(0);
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(0);
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(10);
 120:	8a e0       	ldi	r24, 0x0A	; 10
 122:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(0);
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(4);
 12c:	84 e0       	ldi	r24, 0x04	; 4
 12e:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(17);
 132:	81 e1       	ldi	r24, 0x11	; 17
 134:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(14);
 138:	8e e0       	ldi	r24, 0x0E	; 14
 13a:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writecmd(0x80);
 13e:	80 e8       	ldi	r24, 0x80	; 128
 140:	0e 94 36 00 	call	0x6c	; 0x6c <writecmd>
writedata(1);
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
 14a:	84 ef       	ldi	r24, 0xF4	; 244
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	28 ec       	ldi	r18, 0xC8	; 200
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	f9 01       	movw	r30, r18
 154:	31 97       	sbiw	r30, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <character+0xa0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 158:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 15a:	d9 f7       	brne	.-10     	; 0x152 <character+0x9e>
_delay_ms(50);

writecmd(80);
 15c:	80 e5       	ldi	r24, 0x50	; 80
 15e:	0e 94 36 00 	call	0x6c	; 0x6c <writecmd>
writedata(0);
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(0);
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(10);
 16e:	8a e0       	ldi	r24, 0x0A	; 10
 170:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(0);
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(4);
 17a:	84 e0       	ldi	r24, 0x04	; 4
 17c:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(0);
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(14);
 186:	8e e0       	ldi	r24, 0x0E	; 14
 188:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(17);
 18c:	81 e1       	ldi	r24, 0x11	; 17
 18e:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writecmd(0x82);
 192:	82 e8       	ldi	r24, 0x82	; 130
 194:	0e 94 36 00 	call	0x6c	; 0x6c <writecmd>
writedata(2);
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
 19e:	84 ef       	ldi	r24, 0xF4	; 244
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	28 ec       	ldi	r18, 0xC8	; 200
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	f9 01       	movw	r30, r18
 1a8:	31 97       	sbiw	r30, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <character+0xf4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ae:	d9 f7       	brne	.-10     	; 0x1a6 <character+0xf2>
_delay_ms(50);
writecmd(88);
 1b0:	88 e5       	ldi	r24, 0x58	; 88
 1b2:	0e 94 36 00 	call	0x6c	; 0x6c <writecmd>
writedata(1);
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(3);
 1bc:	83 e0       	ldi	r24, 0x03	; 3
 1be:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(5);
 1c2:	85 e0       	ldi	r24, 0x05	; 5
 1c4:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(9);
 1c8:	89 e0       	ldi	r24, 0x09	; 9
 1ca:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(9);
 1ce:	89 e0       	ldi	r24, 0x09	; 9
 1d0:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(11);
 1d4:	8b e0       	ldi	r24, 0x0B	; 11
 1d6:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(27);
 1da:	8b e1       	ldi	r24, 0x1B	; 27
 1dc:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(24);
 1e0:	88 e1       	ldi	r24, 0x18	; 24
 1e2:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writecmd(0x84);
 1e6:	84 e8       	ldi	r24, 0x84	; 132
 1e8:	0e 94 36 00 	call	0x6c	; 0x6c <writecmd>
writedata(3);
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
 1f2:	84 ef       	ldi	r24, 0xF4	; 244
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	28 ec       	ldi	r18, 0xC8	; 200
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	f9 01       	movw	r30, r18
 1fc:	31 97       	sbiw	r30, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <character+0x148>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 200:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 202:	d9 f7       	brne	.-10     	; 0x1fa <character+0x146>
_delay_ms(50);

writecmd(96);
 204:	80 e6       	ldi	r24, 0x60	; 96
 206:	0e 94 36 00 	call	0x6c	; 0x6c <writecmd>
writedata(0);
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(10);
 210:	8a e0       	ldi	r24, 0x0A	; 10
 212:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(0);
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(31);
 21c:	8f e1       	ldi	r24, 0x1F	; 31
 21e:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(17);
 222:	81 e1       	ldi	r24, 0x11	; 17
 224:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(14);
 228:	8e e0       	ldi	r24, 0x0E	; 14
 22a:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(0);
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(0);
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writecmd(0x86);
 23a:	86 e8       	ldi	r24, 0x86	; 134
 23c:	0e 94 36 00 	call	0x6c	; 0x6c <writecmd>
writedata(4);
 240:	84 e0       	ldi	r24, 0x04	; 4
 242:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
 246:	84 ef       	ldi	r24, 0xF4	; 244
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	28 ec       	ldi	r18, 0xC8	; 200
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	f9 01       	movw	r30, r18
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <character+0x19c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 254:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 256:	d9 f7       	brne	.-10     	; 0x24e <character+0x19a>
_delay_ms(50);

writecmd(104);
 258:	88 e6       	ldi	r24, 0x68	; 104
 25a:	0e 94 36 00 	call	0x6c	; 0x6c <writecmd>
writedata(10);
 25e:	8a e0       	ldi	r24, 0x0A	; 10
 260:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(0);
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(4);
 26a:	84 e0       	ldi	r24, 0x04	; 4
 26c:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(0);
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(14);
 276:	8e e0       	ldi	r24, 0x0E	; 14
 278:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(17);
 27c:	81 e1       	ldi	r24, 0x11	; 17
 27e:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(17);
 282:	81 e1       	ldi	r24, 0x11	; 17
 284:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(14);
 288:	8e e0       	ldi	r24, 0x0E	; 14
 28a:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writecmd(0xC2);
 28e:	82 ec       	ldi	r24, 0xC2	; 194
 290:	0e 94 36 00 	call	0x6c	; 0x6c <writecmd>
writedata(5);
 294:	85 e0       	ldi	r24, 0x05	; 5
 296:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
 29a:	84 ef       	ldi	r24, 0xF4	; 244
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	28 ec       	ldi	r18, 0xC8	; 200
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	f9 01       	movw	r30, r18
 2a4:	31 97       	sbiw	r30, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <character+0x1f0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2aa:	d9 f7       	brne	.-10     	; 0x2a2 <character+0x1ee>
_delay_ms(50);

writecmd(112);
 2ac:	80 e7       	ldi	r24, 0x70	; 112
 2ae:	0e 94 36 00 	call	0x6c	; 0x6c <writecmd>
writedata(0);
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(10);
 2b8:	8a e0       	ldi	r24, 0x0A	; 10
 2ba:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(0);
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(0);
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(4);
 2ca:	84 e0       	ldi	r24, 0x04	; 4
 2cc:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(0);
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(31);
 2d6:	8f e1       	ldi	r24, 0x1F	; 31
 2d8:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(0);
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writecmd(0xC4);
 2e2:	84 ec       	ldi	r24, 0xC4	; 196
 2e4:	0e 94 36 00 	call	0x6c	; 0x6c <writecmd>
writedata(6);
 2e8:	86 e0       	ldi	r24, 0x06	; 6
 2ea:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
 2ee:	84 ef       	ldi	r24, 0xF4	; 244
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	28 ec       	ldi	r18, 0xC8	; 200
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	f9 01       	movw	r30, r18
 2f8:	31 97       	sbiw	r30, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <character+0x244>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2fc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2fe:	d9 f7       	brne	.-10     	; 0x2f6 <character+0x242>
_delay_ms(50);

writecmd(120);
 300:	88 e7       	ldi	r24, 0x78	; 120
 302:	0e 94 36 00 	call	0x6c	; 0x6c <writecmd>
writedata(0);
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(17);
 30c:	81 e1       	ldi	r24, 0x11	; 17
 30e:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(10);
 312:	8a e0       	ldi	r24, 0x0A	; 10
 314:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(17);
 318:	81 e1       	ldi	r24, 0x11	; 17
 31a:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(4);
 31e:	84 e0       	ldi	r24, 0x04	; 4
 320:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(0);
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(14);
 32a:	8e e0       	ldi	r24, 0x0E	; 14
 32c:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writedata(17);
 330:	81 e1       	ldi	r24, 0x11	; 17
 332:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
writecmd(0xC6);
 336:	86 ec       	ldi	r24, 0xC6	; 198
 338:	0e 94 36 00 	call	0x6c	; 0x6c <writecmd>
writedata(7);
 33c:	87 e0       	ldi	r24, 0x07	; 7
 33e:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
 342:	84 ef       	ldi	r24, 0xF4	; 244
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	28 ec       	ldi	r18, 0xC8	; 200
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	f9 01       	movw	r30, r18
 34c:	31 97       	sbiw	r30, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <character+0x298>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 350:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 352:	d9 f7       	brne	.-10     	; 0x34a <character+0x296>
_delay_ms(50);
 354:	08 95       	ret

00000356 <main>:
void character(void);

int main(void)
{
	unsigned char i;
	DDRB=0xff;
 356:	8f ef       	ldi	r24, 0xFF	; 255
 358:	87 bb       	out	0x17, r24	; 23
	DDRA=0xff;
 35a:	8a bb       	out	0x1a, r24	; 26
	lcdinit();
 35c:	0e 94 40 00 	call	0x80	; 0x80 <lcdinit>
	while(1)
	{
	character();
 360:	0e 94 5a 00 	call	0xb4	; 0xb4 <character>
 364:	fd cf       	rjmp	.-6      	; 0x360 <main+0xa>

00000366 <writestr>:
	ctrl|=(1<<en);
	_delay_ms(5);
	ctrl&=~(1<<en);
}
void writestr(unsigned char *s)
{	
 366:	0f 93       	push	r16
 368:	1f 93       	push	r17
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	18 2f       	mov	r17, r24
	unsigned char l,i;
	l=strlen(s);
 370:	a8 2f       	mov	r26, r24
 372:	b9 2f       	mov	r27, r25
 374:	fd 01       	movw	r30, r26
 376:	01 90       	ld	r0, Z+
 378:	00 20       	and	r0, r0
 37a:	e9 f7       	brne	.-6      	; 0x376 <writestr+0x10>
 37c:	31 97       	sbiw	r30, 0x01	; 1
 37e:	0e 2f       	mov	r16, r30
 380:	08 1b       	sub	r16, r24
 382:	28 2f       	mov	r18, r24
 384:	39 2f       	mov	r19, r25
 386:	c9 01       	movw	r24, r18
 388:	ec 01       	movw	r28, r24
 38a:	03 c0       	rjmp	.+6      	; 0x392 <writestr+0x2c>
	for(i=0;i<l;i++)
	{
		writedata(*s);
 38c:	89 91       	ld	r24, Y+
 38e:	0e 94 50 00 	call	0xa0	; 0xa0 <writedata>
}
void writestr(unsigned char *s)
{	
	unsigned char l,i;
	l=strlen(s);
	for(i=0;i<l;i++)
 392:	9e 01       	movw	r18, r28
 394:	21 1b       	sub	r18, r17
 396:	20 17       	cp	r18, r16
 398:	c8 f3       	brcs	.-14     	; 0x38c <writestr+0x26>
	{
		writedata(*s);
		s++;
	}
}
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	1f 91       	pop	r17
 3a0:	0f 91       	pop	r16
 3a2:	08 95       	ret

000003a4 <_exit>:
 3a4:	f8 94       	cli

000003a6 <__stop_program>:
 3a6:	ff cf       	rjmp	.-2      	; 0x3a6 <__stop_program>
