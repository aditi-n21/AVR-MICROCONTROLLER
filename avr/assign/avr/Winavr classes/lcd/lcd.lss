
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000016c  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000004f  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000270  00000000  00000000  00000261  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000151  00000000  00000000  000004d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000269  00000000  00000000  00000622  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  0000088c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000cc  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000171  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000b29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e6       	ldi	r30, 0x6C	; 108
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 84 00 	call	0x108	; 0x108 <main>
  7a:	0c 94 b4 00 	jmp	0x168	; 0x168 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <writecmd>:
	
}

void writecmd(unsigned char a)
{
	lcd=a;
  82:	88 bb       	out	0x18, r24	; 24
	ctrl&=~(1<<rs);
  84:	d8 98       	cbi	0x1b, 0	; 27
	ctrl&=~(1<<rw);
  86:	d9 98       	cbi	0x1b, 1	; 27
	ctrl|=(1<<en);
  88:	da 9a       	sbi	0x1b, 2	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8a:	80 e1       	ldi	r24, 0x10	; 16
  8c:	97 e2       	ldi	r25, 0x27	; 39
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <writecmd+0xc>
	_delay_ms(5);
	ctrl&=~(1<<en);
  92:	da 98       	cbi	0x1b, 2	; 27
	
}
  94:	08 95       	ret

00000096 <lcdinit>:
	}
	}
}
void lcdinit(void)
{
	writecmd(0x38);
  96:	88 e3       	ldi	r24, 0x38	; 56
  98:	0e 94 41 00 	call	0x82	; 0x82 <writecmd>
	writecmd(0x0c);
  9c:	8c e0       	ldi	r24, 0x0C	; 12
  9e:	0e 94 41 00 	call	0x82	; 0x82 <writecmd>
	writecmd(0x01);
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	0e 94 41 00 	call	0x82	; 0x82 <writecmd>
	writecmd(0x06);
  a8:	86 e0       	ldi	r24, 0x06	; 6
  aa:	0e 94 41 00 	call	0x82	; 0x82 <writecmd>
	writecmd(0x80);
  ae:	80 e8       	ldi	r24, 0x80	; 128
  b0:	0e 94 41 00 	call	0x82	; 0x82 <writecmd>
	
}
  b4:	08 95       	ret

000000b6 <writedata>:
	ctrl&=~(1<<en);
	
}

void writedata(unsigned char b)
{	lcd=b;
  b6:	88 bb       	out	0x18, r24	; 24
	ctrl|=(1<<rs);
  b8:	d8 9a       	sbi	0x1b, 0	; 27
	ctrl&=~(1<<rw);
  ba:	d9 98       	cbi	0x1b, 1	; 27
	ctrl|=(1<<en);
  bc:	da 9a       	sbi	0x1b, 2	; 27
  be:	80 e1       	ldi	r24, 0x10	; 16
  c0:	97 e2       	ldi	r25, 0x27	; 39
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <writedata+0xc>
	_delay_ms(5);
	ctrl&=~(1<<en);
  c6:	da 98       	cbi	0x1b, 2	; 27
}
  c8:	08 95       	ret

000000ca <writestr>:
void writestr(unsigned char *s)
{	
  ca:	0f 93       	push	r16
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	18 2f       	mov	r17, r24
	unsigned char l,i;
	l=strlen(s);
  d4:	a8 2f       	mov	r26, r24
  d6:	b9 2f       	mov	r27, r25
  d8:	fd 01       	movw	r30, r26
  da:	01 90       	ld	r0, Z+
  dc:	00 20       	and	r0, r0
  de:	e9 f7       	brne	.-6      	; 0xda <writestr+0x10>
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	0e 2f       	mov	r16, r30
  e4:	08 1b       	sub	r16, r24
  e6:	28 2f       	mov	r18, r24
  e8:	39 2f       	mov	r19, r25
  ea:	c9 01       	movw	r24, r18
  ec:	ec 01       	movw	r28, r24
  ee:	03 c0       	rjmp	.+6      	; 0xf6 <writestr+0x2c>
	for(i=0;i<l;i++)
	{
		writedata(*s);
  f0:	89 91       	ld	r24, Y+
  f2:	0e 94 5b 00 	call	0xb6	; 0xb6 <writedata>
}
void writestr(unsigned char *s)
{	
	unsigned char l,i;
	l=strlen(s);
	for(i=0;i<l;i++)
  f6:	9e 01       	movw	r18, r28
  f8:	21 1b       	sub	r18, r17
  fa:	20 17       	cp	r18, r16
  fc:	c8 f3       	brcs	.-14     	; 0xf0 <writestr+0x26>
	{
		writedata(*s);
		s++;
	}
}
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	1f 91       	pop	r17
 104:	0f 91       	pop	r16
 106:	08 95       	ret

00000108 <main>:
void writedata(unsigned char);
void writestr(unsigned char *);
void lcdinit(void);

int main(void)
{
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
	unsigned char i;
	DDRB=0xff;
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	87 bb       	out	0x17, r24	; 23
	DDRA=0xff;
 112:	8a bb       	out	0x1a, r24	; 26
	lcdinit();
 114:	0e 94 4b 00 	call	0x96	; 0x96 <lcdinit>
	writecmd(0x80);
 118:	80 e8       	ldi	r24, 0x80	; 128
 11a:	0e 94 41 00 	call	0x82	; 0x82 <writecmd>
	//	writecmd(0xc5);
	writestr("WELCOME TO CETPA");
 11e:	80 e6       	ldi	r24, 0x60	; 96
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 65 00 	call	0xca	; 0xca <writestr>
 126:	10 e0       	ldi	r17, 0x00	; 0
 128:	c8 ec       	ldi	r28, 0xC8	; 200
 12a:	d0 e0       	ldi	r29, 0x00	; 0
 12c:	0b c0       	rjmp	.+22     	; 0x144 <main+0x3c>
	//writedata('A');
	while(1)
	{
	for(i=0;i<16;i++)
	{
	writecmd(0x1c);
 12e:	8c e1       	ldi	r24, 0x1C	; 28
 130:	0e 94 41 00 	call	0x82	; 0x82 <writecmd>
 134:	80 ed       	ldi	r24, 0xD0	; 208
 136:	97 e0       	ldi	r25, 0x07	; 7
 138:	fe 01       	movw	r30, r28
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <main+0x32>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 13e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 140:	d9 f7       	brne	.-10     	; 0x138 <main+0x30>
	//	writecmd(0xc5);
	writestr("WELCOME TO CETPA");
	//writedata('A');
	while(1)
	{
	for(i=0;i<16;i++)
 142:	1f 5f       	subi	r17, 0xFF	; 255
 144:	10 31       	cpi	r17, 0x10	; 16
 146:	98 f3       	brcs	.-26     	; 0x12e <main+0x26>
 148:	10 e0       	ldi	r17, 0x00	; 0
	writecmd(0x1c);
	_delay_ms(200);
	}	
	for(i=0;i<16;i++)
	{
	writecmd(0x18);
 14a:	88 e1       	ldi	r24, 0x18	; 24
 14c:	0e 94 41 00 	call	0x82	; 0x82 <writecmd>
 150:	80 ed       	ldi	r24, 0xD0	; 208
 152:	97 e0       	ldi	r25, 0x07	; 7
 154:	fe 01       	movw	r30, r28
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <main+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 15a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 15c:	d9 f7       	brne	.-10     	; 0x154 <main+0x4c>
	for(i=0;i<16;i++)
	{
	writecmd(0x1c);
	_delay_ms(200);
	}	
	for(i=0;i<16;i++)
 15e:	1f 5f       	subi	r17, 0xFF	; 255
 160:	10 31       	cpi	r17, 0x10	; 16
 162:	99 f7       	brne	.-26     	; 0x14a <main+0x42>
 164:	10 e0       	ldi	r17, 0x00	; 0
 166:	e3 cf       	rjmp	.-58     	; 0x12e <main+0x26>

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
