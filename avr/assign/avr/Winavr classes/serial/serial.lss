
serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000036  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002ab  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000015c  00000000  00000000  00000445  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000021e  00000000  00000000  000005a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  000007c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c6  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000e0  00000000  00000000  000008c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000a8  00000000  00000000  000009a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

	
}
void uart_ini()
{
	UCSRB|=(1<<TXEN);
  6c:	53 9a       	sbi	0x0a, 3	; 10
	UCSRC|=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);	//Tx using 8-bit format
  6e:	80 b5       	in	r24, 0x20	; 32
  70:	86 68       	ori	r24, 0x86	; 134
  72:	80 bd       	out	0x20, r24	; 32
	UBRRL=0x33;			//Baud rate =9600
  74:	83 e3       	ldi	r24, 0x33	; 51
  76:	89 b9       	out	0x09, r24	; 9
}

void uart_send(unsigned char ch)
{	UDR=ch;
  78:	7d e0       	ldi	r23, 0x0D	; 13
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7a:	28 ec       	ldi	r18, 0xC8	; 200
  7c:	30 e0       	ldi	r19, 0x00	; 0
  7e:	62 e4       	ldi	r22, 0x42	; 66
	while(!(UCSRA & (1<<TXC)));
  80:	59 e5       	ldi	r21, 0x59	; 89
  82:	45 e4       	ldi	r20, 0x45	; 69
	UCSRC|=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);	//Tx using 8-bit format
	UBRRL=0x33;			//Baud rate =9600
}

void uart_send(unsigned char ch)
{	UDR=ch;
  84:	7c b9       	out	0x0c, r23	; 12
	while(!(UCSRA & (1<<TXC)));
  86:	5e 9b       	sbis	0x0b, 6	; 11
  88:	fe cf       	rjmp	.-4      	; 0x86 <main+0x1a>
  8a:	88 ee       	ldi	r24, 0xE8	; 232
  8c:	93 e0       	ldi	r25, 0x03	; 3
  8e:	f9 01       	movw	r30, r18
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <main+0x24>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  94:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  96:	d9 f7       	brne	.-10     	; 0x8e <main+0x22>
	UCSRC|=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);	//Tx using 8-bit format
	UBRRL=0x33;			//Baud rate =9600
}

void uart_send(unsigned char ch)
{	UDR=ch;
  98:	6c b9       	out	0x0c, r22	; 12
	while(!(UCSRA & (1<<TXC)));
  9a:	5e 9b       	sbis	0x0b, 6	; 11
  9c:	fe cf       	rjmp	.-4      	; 0x9a <main+0x2e>
  9e:	88 ee       	ldi	r24, 0xE8	; 232
  a0:	93 e0       	ldi	r25, 0x03	; 3
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <main+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  aa:	d9 f7       	brne	.-10     	; 0xa2 <main+0x36>
	UCSRC|=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);	//Tx using 8-bit format
	UBRRL=0x33;			//Baud rate =9600
}

void uart_send(unsigned char ch)
{	UDR=ch;
  ac:	5c b9       	out	0x0c, r21	; 12
	while(!(UCSRA & (1<<TXC)));
  ae:	5e 9b       	sbis	0x0b, 6	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <main+0x42>
  b2:	88 ee       	ldi	r24, 0xE8	; 232
  b4:	93 e0       	ldi	r25, 0x03	; 3
  b6:	f9 01       	movw	r30, r18
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <main+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  be:	d9 f7       	brne	.-10     	; 0xb6 <main+0x4a>
	UCSRC|=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);	//Tx using 8-bit format
	UBRRL=0x33;			//Baud rate =9600
}

void uart_send(unsigned char ch)
{	UDR=ch;
  c0:	4c b9       	out	0x0c, r20	; 12
	while(!(UCSRA & (1<<TXC)));
  c2:	5e 9b       	sbis	0x0b, 6	; 11
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <main+0x56>
  c6:	88 ee       	ldi	r24, 0xE8	; 232
  c8:	93 e0       	ldi	r25, 0x03	; 3
  ca:	f9 01       	movw	r30, r18
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x60>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d2:	d9 f7       	brne	.-10     	; 0xca <main+0x5e>
  d4:	d7 cf       	rjmp	.-82     	; 0x84 <main+0x18>

000000d6 <uart_ini>:

	
}
void uart_ini()
{
	UCSRB|=(1<<TXEN);
  d6:	53 9a       	sbi	0x0a, 3	; 10
	UCSRC|=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);	//Tx using 8-bit format
  d8:	80 b5       	in	r24, 0x20	; 32
  da:	86 68       	ori	r24, 0x86	; 134
  dc:	80 bd       	out	0x20, r24	; 32
	UBRRL=0x33;			//Baud rate =9600
  de:	83 e3       	ldi	r24, 0x33	; 51
  e0:	89 b9       	out	0x09, r24	; 9
}
  e2:	08 95       	ret

000000e4 <uart_send>:

void uart_send(unsigned char ch)
{	UDR=ch;
  e4:	8c b9       	out	0x0c, r24	; 12
	while(!(UCSRA & (1<<TXC)));
  e6:	5e 9b       	sbis	0x0b, 6	; 11
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <uart_send+0x2>
				//data is Txed using UDR reg. like SBUF in 8051			
  ea:	08 95       	ret

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
