
dtmf robo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000130  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  000008d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004c4  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000139  00000000  00000000  00000e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000359  00000000  00000000  00000f55  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  000012b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f3  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000016e  00000000  00000000  000013c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#define mot1_d PC3
#define sense PINB
#define sense_ddr DDRB
int main(void)
{
	sense_ddr&=0xf0;
  92:	87 b3       	in	r24, 0x17	; 23
  94:	80 7f       	andi	r24, 0xF0	; 240
  96:	87 bb       	out	0x17, r24	; 23
	motor_ddr|=0x0f;
  98:	84 b3       	in	r24, 0x14	; 20
  9a:	8f 60       	ori	r24, 0x0F	; 15
  9c:	84 bb       	out	0x14, r24	; 20
	unsigned char input;
	
    while(1)
    {  
		input=sense;
  9e:	86 b3       	in	r24, 0x16	; 22
		input=input & 0x0f;
  a0:	8f 70       	andi	r24, 0x0F	; 15
        switch(input)
  a2:	85 30       	cpi	r24, 0x05	; 5
  a4:	c1 f1       	breq	.+112    	; 0x116 <main+0x84>
  a6:	86 30       	cpi	r24, 0x06	; 6
  a8:	28 f4       	brcc	.+10     	; 0xb4 <main+0x22>
  aa:	82 30       	cpi	r24, 0x02	; 2
  ac:	41 f0       	breq	.+16     	; 0xbe <main+0x2c>
  ae:	84 30       	cpi	r24, 0x04	; 4
  b0:	b1 f7       	brne	.-20     	; 0x9e <main+0xc>
  b2:	10 c0       	rjmp	.+32     	; 0xd4 <main+0x42>
  b4:	86 30       	cpi	r24, 0x06	; 6
  b6:	c9 f0       	breq	.+50     	; 0xea <main+0x58>
  b8:	88 30       	cpi	r24, 0x08	; 8
  ba:	89 f7       	brne	.-30     	; 0x9e <main+0xc>
  bc:	21 c0       	rjmp	.+66     	; 0x100 <main+0x6e>
		   {
			   case 0x02:   
			              PORTC|=(1<<mot1_a);
  be:	a8 9a       	sbi	0x15, 0	; 21
			              PORTC&=~(1<<mot1_b);
  c0:	a9 98       	cbi	0x15, 1	; 21
			              PORTC|=(1<<mot1_c);
  c2:	aa 9a       	sbi	0x15, 2	; 21
			              PORTC&=~(1<<mot1_d);
  c4:	ab 98       	cbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	87 ea       	ldi	r24, 0xA7	; 167
  c8:	91 e6       	ldi	r25, 0x61	; 97
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <main+0x38>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x3e>
  d0:	00 00       	nop
  d2:	e5 cf       	rjmp	.-54     	; 0x9e <main+0xc>
			              _delay_ms(100);
						  break;
				case 0x04:
				            PORTC|=(1<<mot1_a);
  d4:	a8 9a       	sbi	0x15, 0	; 21
				            PORTC&=~(1<<mot1_b);
  d6:	a9 98       	cbi	0x15, 1	; 21
				            PORTC|=(1<<mot1_c);
  d8:	aa 9a       	sbi	0x15, 2	; 21
				            PORTC|=(1<<mot1_d);
  da:	ab 9a       	sbi	0x15, 3	; 21
  dc:	87 ea       	ldi	r24, 0xA7	; 167
  de:	91 e6       	ldi	r25, 0x61	; 97
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x4e>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x54>
  e6:	00 00       	nop
  e8:	da cf       	rjmp	.-76     	; 0x9e <main+0xc>
				            _delay_ms(100);
							break;
				case 0x06:
				           PORTC|=(1<<mot1_a);
  ea:	a8 9a       	sbi	0x15, 0	; 21
				           PORTC|=(1<<mot1_b);
  ec:	a9 9a       	sbi	0x15, 1	; 21
				           PORTC|=(1<<mot1_c);
  ee:	aa 9a       	sbi	0x15, 2	; 21
				           PORTC&=~(1<<mot1_d);
  f0:	ab 98       	cbi	0x15, 3	; 21
  f2:	87 ea       	ldi	r24, 0xA7	; 167
  f4:	91 e6       	ldi	r25, 0x61	; 97
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <main+0x64>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x6a>
  fc:	00 00       	nop
  fe:	cf cf       	rjmp	.-98     	; 0x9e <main+0xc>
				           _delay_ms(100);
						   break;					  
			    case 0x08:
				           PORTC&=~(1<<mot1_a);
 100:	a8 98       	cbi	0x15, 0	; 21
				           PORTC|=(1<<mot1_b);
 102:	a9 9a       	sbi	0x15, 1	; 21
				           PORTC&=~(1<<mot1_c);
 104:	aa 98       	cbi	0x15, 2	; 21
				           PORTC|=(1<<mot1_d);
 106:	ab 9a       	sbi	0x15, 3	; 21
 108:	87 ea       	ldi	r24, 0xA7	; 167
 10a:	91 e6       	ldi	r25, 0x61	; 97
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <main+0x7a>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x80>
 112:	00 00       	nop
 114:	c4 cf       	rjmp	.-120    	; 0x9e <main+0xc>
				           _delay_ms(100);          
							break;
				case 0x05:
				           PORTC|=(1<<mot1_a);
 116:	a8 9a       	sbi	0x15, 0	; 21
				           PORTC|=(1<<mot1_b);
 118:	a9 9a       	sbi	0x15, 1	; 21
				           PORTC|=(1<<mot1_c);
 11a:	aa 9a       	sbi	0x15, 2	; 21
				           PORTC|=(1<<mot1_d);
 11c:	ab 9a       	sbi	0x15, 3	; 21
 11e:	87 ea       	ldi	r24, 0xA7	; 167
 120:	91 e6       	ldi	r25, 0x61	; 97
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <main+0x90>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x96>
 128:	00 00       	nop
 12a:	b9 cf       	rjmp	.-142    	; 0x9e <main+0xc>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
