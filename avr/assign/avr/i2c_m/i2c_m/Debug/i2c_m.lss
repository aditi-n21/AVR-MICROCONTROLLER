
i2c_m.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000001a4  00000238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800064  00800064  0000023c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000990  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000057e  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000180  00000000  00000000  00000f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000392  00000000  00000000  0000110e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  000014a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000162  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000005d  00000000  00000000  000016a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ea       	ldi	r30, 0xA4	; 164
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  8a:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TWI_init_master>:
    }
}

void TWI_init_master(void)
{
	TWBR=0x01;
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	80 b9       	out	0x00, r24	; 0
	TWSR=(0<<TWPS1)|(0<<TWPS0);
  96:	11 b8       	out	0x01, r1	; 1
}
  98:	08 95       	ret

0000009a <TWI_start>:

void TWI_start()
{
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  9a:	84 ea       	ldi	r24, 0xA4	; 164
  9c:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
  9e:	06 b6       	in	r0, 0x36	; 54
  a0:	07 fe       	sbrs	r0, 7
  a2:	fd cf       	rjmp	.-6      	; 0x9e <TWI_start+0x4>
	while((TWSR & 0xf8)!= 0x08);
  a4:	81 b1       	in	r24, 0x01	; 1
  a6:	88 7f       	andi	r24, 0xF8	; 248
  a8:	88 30       	cpi	r24, 0x08	; 8
  aa:	e1 f7       	brne	.-8      	; 0xa4 <TWI_start+0xa>
}
  ac:	08 95       	ret

000000ae <TWI_repeated_start>:

void TWI_repeated_start()
{
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  ae:	84 ea       	ldi	r24, 0xA4	; 164
  b0:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
  b2:	06 b6       	in	r0, 0x36	; 54
  b4:	07 fe       	sbrs	r0, 7
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <TWI_repeated_start+0x4>
	while((TWSR & 0xf8)!= 0x10);
  b8:	81 b1       	in	r24, 0x01	; 1
  ba:	88 7f       	andi	r24, 0xF8	; 248
  bc:	80 31       	cpi	r24, 0x10	; 16
  be:	e1 f7       	brne	.-8      	; 0xb8 <TWI_repeated_start+0xa>
}
  c0:	08 95       	ret

000000c2 <TWI_write_address>:
void TWI_write_address(unsigned char data)
{
	TWDR=data;
  c2:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWINT)|(1<<TWEN);
  c4:	84 e8       	ldi	r24, 0x84	; 132
  c6:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
  c8:	06 b6       	in	r0, 0x36	; 54
  ca:	07 fe       	sbrs	r0, 7
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <TWI_write_address+0x6>
	while((TWSR & 0xf8)!= 0x18);
  ce:	81 b1       	in	r24, 0x01	; 1
  d0:	88 7f       	andi	r24, 0xF8	; 248
  d2:	88 31       	cpi	r24, 0x18	; 24
  d4:	e1 f7       	brne	.-8      	; 0xce <TWI_write_address+0xc>
}
  d6:	08 95       	ret

000000d8 <TWI_read_address>:
void TWI_read_address(unsigned char data)
{
	TWDR=data;
  d8:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWINT)|(1<<TWEN);
  da:	84 e8       	ldi	r24, 0x84	; 132
  dc:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
  de:	06 b6       	in	r0, 0x36	; 54
  e0:	07 fe       	sbrs	r0, 7
  e2:	fd cf       	rjmp	.-6      	; 0xde <TWI_read_address+0x6>
	while((TWSR & 0xf8)!= 0x40);
  e4:	81 b1       	in	r24, 0x01	; 1
  e6:	88 7f       	andi	r24, 0xF8	; 248
  e8:	80 34       	cpi	r24, 0x40	; 64
  ea:	e1 f7       	brne	.-8      	; 0xe4 <TWI_read_address+0xc>
}
  ec:	08 95       	ret

000000ee <TWI_write_data>:
void TWI_write_data(unsigned char data)
{
	TWDR=data;
  ee:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWINT)|(1<<TWEN);
  f0:	84 e8       	ldi	r24, 0x84	; 132
  f2:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
  f4:	06 b6       	in	r0, 0x36	; 54
  f6:	07 fe       	sbrs	r0, 7
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <TWI_write_data+0x6>
	while((TWSR & 0xf8)!= 0x28);
  fa:	81 b1       	in	r24, 0x01	; 1
  fc:	88 7f       	andi	r24, 0xF8	; 248
  fe:	88 32       	cpi	r24, 0x28	; 40
 100:	e1 f7       	brne	.-8      	; 0xfa <TWI_write_data+0xc>
}
 102:	08 95       	ret

00000104 <TWI_read_data>:
void TWI_read_data()
{
	TWCR=(1<<TWINT)|(1<<TWEN);
 104:	84 e8       	ldi	r24, 0x84	; 132
 106:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
 108:	06 b6       	in	r0, 0x36	; 54
 10a:	07 fe       	sbrs	r0, 7
 10c:	fd cf       	rjmp	.-6      	; 0x108 <TWI_read_data+0x4>
	while((TWSR & 0xf8)!= 0x58);
 10e:	81 b1       	in	r24, 0x01	; 1
 110:	88 7f       	andi	r24, 0xF8	; 248
 112:	88 35       	cpi	r24, 0x58	; 88
 114:	e1 f7       	brne	.-8      	; 0x10e <TWI_read_data+0xa>
	recv_data=TWDR;
 116:	83 b1       	in	r24, 0x03	; 3
 118:	80 93 65 00 	sts	0x0065, r24
	PORTB=recv_data;
 11c:	88 bb       	out	0x18, r24	; 24
}
 11e:	08 95       	ret

00000120 <TWI_stop>:

void TWI_stop()
{
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 120:	84 e9       	ldi	r24, 0x94	; 148
 122:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWSTO)));
 124:	06 b6       	in	r0, 0x36	; 54
 126:	04 fe       	sbrs	r0, 4
 128:	fd cf       	rjmp	.-6      	; 0x124 <TWI_stop+0x4>
	
}
 12a:	08 95       	ret

0000012c <main>:
unsigned char write_data=0x01,recv_data;

int main(void)
{
	//_delay_ms(2000);
	DDRB=0xff;
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	87 bb       	out	0x17, r24	; 23
	DDRC=0xff;
 130:	84 bb       	out	0x14, r24	; 20
	TWI_init_master();
 132:	0e 94 49 00 	call	0x92	; 0x92 <TWI_init_master>
    while(1)
    {
       if(write_data==0x00)
	       write_data=1;
 136:	c1 e0       	ldi	r28, 0x01	; 1
	DDRB=0xff;
	DDRC=0xff;
	TWI_init_master();
    while(1)
    {
       if(write_data==0x00)
 138:	80 91 60 00 	lds	r24, 0x0060
 13c:	88 23       	and	r24, r24
 13e:	11 f4       	brne	.+4      	; 0x144 <main+0x18>
	       write_data=1;
 140:	c0 93 60 00 	sts	0x0060, r28
		   
	TWI_start();
 144:	0e 94 4d 00 	call	0x9a	; 0x9a <TWI_start>
	TWI_write_address(address+write);
 148:	90 91 64 00 	lds	r25, 0x0064
 14c:	80 91 62 00 	lds	r24, 0x0062
 150:	89 0f       	add	r24, r25
 152:	0e 94 61 00 	call	0xc2	; 0xc2 <TWI_write_address>
	TWI_write_data(write_data);
 156:	80 91 60 00 	lds	r24, 0x0060
 15a:	0e 94 77 00 	call	0xee	; 0xee <TWI_write_data>
	TWI_stop();
 15e:	0e 94 90 00 	call	0x120	; 0x120 <TWI_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	83 ec       	ldi	r24, 0xC3	; 195
 164:	99 e0       	ldi	r25, 0x09	; 9
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <main+0x3a>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0x40>
 16c:	00 00       	nop
	_delay_ms(10);
	
	TWI_start();
 16e:	0e 94 4d 00 	call	0x9a	; 0x9a <TWI_start>
	TWI_read_address(address+read);
 172:	90 91 61 00 	lds	r25, 0x0061
 176:	80 91 62 00 	lds	r24, 0x0062
 17a:	89 0f       	add	r24, r25
 17c:	0e 94 6c 00 	call	0xd8	; 0xd8 <TWI_read_address>
	TWI_read_data();
 180:	0e 94 82 00 	call	0x104	; 0x104 <TWI_read_data>
	TWI_stop();
 184:	0e 94 90 00 	call	0x120	; 0x120 <TWI_stop>
 188:	87 ea       	ldi	r24, 0xA7	; 167
 18a:	91 e6       	ldi	r25, 0x61	; 97
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <main+0x60>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x66>
 192:	00 00       	nop
	
	_delay_ms(100);
	write_data=write_data * 2;	   
 194:	80 91 60 00 	lds	r24, 0x0060
 198:	88 0f       	add	r24, r24
 19a:	80 93 60 00 	sts	0x0060, r24
    }
 19e:	cc cf       	rjmp	.-104    	; 0x138 <main+0xc>

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
