
i2c_s.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000120  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000194  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000008e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003c0  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000c1  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ca  00000000  00000000  00000de9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000010b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000e9  00000000  00000000  00001128  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  8a:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TWI_init_slave>:
	   TWI_write_slave(); 
    }
}
void TWI_init_slave()
{
	TWAR=0x20;
  92:	80 e2       	ldi	r24, 0x20	; 32
  94:	82 b9       	out	0x02, r24	; 2
}
  96:	08 95       	ret

00000098 <TWI_write_slave>:
void TWI_write_slave()
{
	TWDR=write_data;
  98:	80 91 61 00 	lds	r24, 0x0061
  9c:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWEN)|(1<<TWINT);
  9e:	84 e8       	ldi	r24, 0x84	; 132
  a0:	86 bf       	out	0x36, r24	; 54
	while((TWSR & 0xf8)!=0xc0);
  a2:	81 b1       	in	r24, 0x01	; 1
  a4:	88 7f       	andi	r24, 0xF8	; 248
  a6:	80 3c       	cpi	r24, 0xC0	; 192
  a8:	e1 f7       	brne	.-8      	; 0xa2 <TWI_write_slave+0xa>
}
  aa:	08 95       	ret

000000ac <TWI_match_write_slave>:
void TWI_match_write_slave(void)
{
	while((TWSR & 0xF8)!=0xA8)
	{
		TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWINT);
  ac:	94 ec       	ldi	r25, 0xC4	; 196
	TWCR=(1<<TWEN)|(1<<TWINT);
	while((TWSR & 0xf8)!=0xc0);
}
void TWI_match_write_slave(void)
{
	while((TWSR & 0xF8)!=0xA8)
  ae:	04 c0       	rjmp	.+8      	; 0xb8 <TWI_match_write_slave+0xc>
	{
		TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWINT);
  b0:	96 bf       	out	0x36, r25	; 54
		while(!(TWCR & (1<<TWINT)));
  b2:	06 b6       	in	r0, 0x36	; 54
  b4:	07 fe       	sbrs	r0, 7
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <TWI_match_write_slave+0x6>
	TWCR=(1<<TWEN)|(1<<TWINT);
	while((TWSR & 0xf8)!=0xc0);
}
void TWI_match_write_slave(void)
{
	while((TWSR & 0xF8)!=0xA8)
  b8:	81 b1       	in	r24, 0x01	; 1
  ba:	88 7f       	andi	r24, 0xF8	; 248
  bc:	88 3a       	cpi	r24, 0xA8	; 168
  be:	c1 f7       	brne	.-16     	; 0xb0 <TWI_match_write_slave+0x4>
	{
		TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWINT);
		while(!(TWCR & (1<<TWINT)));
	}
}
  c0:	08 95       	ret

000000c2 <TWI_read_slave>:
void TWI_read_slave(void)
{
	TWCR=(1<<TWINT)|(1<<TWEA)|(1<<TWEN);
  c2:	84 ec       	ldi	r24, 0xC4	; 196
  c4:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
  c6:	06 b6       	in	r0, 0x36	; 54
  c8:	07 fe       	sbrs	r0, 7
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <TWI_read_slave+0x4>
	while((TWSR & 0xF8)!=0x80);
  cc:	81 b1       	in	r24, 0x01	; 1
  ce:	88 7f       	andi	r24, 0xF8	; 248
  d0:	80 38       	cpi	r24, 0x80	; 128
  d2:	e1 f7       	brne	.-8      	; 0xcc <TWI_read_slave+0xa>
	recv_data=TWDR;
  d4:	83 b1       	in	r24, 0x03	; 3
  d6:	80 93 60 00 	sts	0x0060, r24
	PORTB=recv_data;
  da:	88 bb       	out	0x18, r24	; 24
	
}
  dc:	08 95       	ret

000000de <TWI_match_read_slave>:
void TWI_match_read_slave(void)
{
	while((TWSR & 0xF8)!=0x60)
	{
		TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWINT);
  de:	94 ec       	ldi	r25, 0xC4	; 196
	PORTB=recv_data;
	
}
void TWI_match_read_slave(void)
{
	while((TWSR & 0xF8)!=0x60)
  e0:	04 c0       	rjmp	.+8      	; 0xea <TWI_match_read_slave+0xc>
	{
		TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWINT);
  e2:	96 bf       	out	0x36, r25	; 54
		while(!(TWCR & (1<<TWINT)));
  e4:	06 b6       	in	r0, 0x36	; 54
  e6:	07 fe       	sbrs	r0, 7
  e8:	fd cf       	rjmp	.-6      	; 0xe4 <TWI_match_read_slave+0x6>
	PORTB=recv_data;
	
}
void TWI_match_read_slave(void)
{
	while((TWSR & 0xF8)!=0x60)
  ea:	81 b1       	in	r24, 0x01	; 1
  ec:	88 7f       	andi	r24, 0xF8	; 248
  ee:	80 36       	cpi	r24, 0x60	; 96
  f0:	c1 f7       	brne	.-16     	; 0xe2 <TWI_match_read_slave+0x4>
	{
		TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWINT);
		while(!(TWCR & (1<<TWINT)));
	}
}
  f2:	08 95       	ret

000000f4 <main>:

unsigned char write_data,recv_data;

int main(void)
{
	DDRB=0xff;
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	87 bb       	out	0x17, r24	; 23
	DDRC=0xfc;
  f8:	8c ef       	ldi	r24, 0xFC	; 252
  fa:	84 bb       	out	0x14, r24	; 20
	TWI_init_slave();
  fc:	0e 94 49 00 	call	0x92	; 0x92 <TWI_init_slave>
    while(1)
    {
       TWI_match_read_slave();
 100:	0e 94 6f 00 	call	0xde	; 0xde <TWI_match_read_slave>
	   TWI_read_slave();
 104:	0e 94 61 00 	call	0xc2	; 0xc2 <TWI_read_slave>
	   write_data=~recv_data;
 108:	80 91 60 00 	lds	r24, 0x0060
 10c:	80 95       	com	r24
 10e:	80 93 61 00 	sts	0x0061, r24
	   TWI_match_write_slave();
 112:	0e 94 56 00 	call	0xac	; 0xac <TWI_match_write_slave>
	   TWI_write_slave(); 
 116:	0e 94 4c 00 	call	0x98	; 0x98 <TWI_write_slave>
 11a:	f2 cf       	rjmp	.-28     	; 0x100 <main+0xc>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
