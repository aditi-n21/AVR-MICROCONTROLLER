
led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000053c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00001638  00000000  00000000  00000590  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000057e  00000000  00000000  00001bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00002148  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000444  00000000  00000000  000021c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000f0  00000000  00000000  0000260c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003a8  00000000  00000000  000026fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000003c  00000000  00000000  00002aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000b8  00000000  00000000  00002ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000055  00000000  00000000  00002b98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e3       	ldi	r30, 0x3C	; 60
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 9c 02 	jmp	0x538	; 0x538 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#include <avr/io.h>
#include <util/delay.h>
//#define led 0
int main(void)
{
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	6c 97       	sbiw	r28, 0x1c	; 28
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
    DDRA=0xff;
  aa:	8a e3       	ldi	r24, 0x3A	; 58
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	fc 01       	movw	r30, r24
  b2:	20 83       	st	Z, r18
	DDRB=0xff;
  b4:	87 e3       	ldi	r24, 0x37	; 55
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	2f ef       	ldi	r18, 0xFF	; 255
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18
	DDRC=0xff;
  be:	84 e3       	ldi	r24, 0x34	; 52
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
	DDRD=0xff;
  c8:	81 e3       	ldi	r24, 0x31	; 49
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	fc 01       	movw	r30, r24
  d0:	20 83       	st	Z, r18
	//MCUCSR|=(1<<JTD);
	//MCUCSR|=(1<<JTD);
    while(1)
    {
        PORTA=0X00;   //TODO:: Please write your application code
  d2:	8b e3       	ldi	r24, 0x3B	; 59
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	fc 01       	movw	r30, r24
  d8:	10 82       	st	Z, r1
		PORTB=0X00;   //TODO:: Please write your application code
  da:	88 e3       	ldi	r24, 0x38	; 56
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	fc 01       	movw	r30, r24
  e0:	10 82       	st	Z, r1
		PORTC=0X55;   //TODO:: Please write your application code
  e2:	85 e3       	ldi	r24, 0x35	; 53
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	25 e5       	ldi	r18, 0x55	; 85
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
		PORTD=0X00;   //TODO:: Please write your application code
  ec:	82 e3       	ldi	r24, 0x32	; 50
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	fc 01       	movw	r30, r24
  f2:	10 82       	st	Z, r1
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	aa e7       	ldi	r26, 0x7A	; 122
  fa:	b4 e4       	ldi	r27, 0x44	; 68
  fc:	89 83       	std	Y+1, r24	; 0x01
  fe:	9a 83       	std	Y+2, r25	; 0x02
 100:	ab 83       	std	Y+3, r26	; 0x03
 102:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 104:	69 81       	ldd	r22, Y+1	; 0x01
 106:	7a 81       	ldd	r23, Y+2	; 0x02
 108:	8b 81       	ldd	r24, Y+3	; 0x03
 10a:	9c 81       	ldd	r25, Y+4	; 0x04
 10c:	20 e0       	ldi	r18, 0x00	; 0
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	4a e7       	ldi	r20, 0x7A	; 122
 112:	53 e4       	ldi	r21, 0x43	; 67
 114:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
 118:	dc 01       	movw	r26, r24
 11a:	cb 01       	movw	r24, r22
 11c:	8d 83       	std	Y+5, r24	; 0x05
 11e:	9e 83       	std	Y+6, r25	; 0x06
 120:	af 83       	std	Y+7, r26	; 0x07
 122:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 124:	11 e0       	ldi	r17, 0x01	; 1
 126:	6d 81       	ldd	r22, Y+5	; 0x05
 128:	7e 81       	ldd	r23, Y+6	; 0x06
 12a:	8f 81       	ldd	r24, Y+7	; 0x07
 12c:	98 85       	ldd	r25, Y+8	; 0x08
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	40 e8       	ldi	r20, 0x80	; 128
 134:	5f e3       	ldi	r21, 0x3F	; 63
 136:	0e 94 90 01 	call	0x320	; 0x320 <__cmpsf2>
 13a:	88 23       	and	r24, r24
 13c:	0c f0       	brlt	.+2      	; 0x140 <main+0xae>
 13e:	10 e0       	ldi	r17, 0x00	; 0
 140:	11 23       	and	r17, r17
 142:	29 f0       	breq	.+10     	; 0x14e <main+0xbc>
		__ticks = 1;
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	9a 87       	std	Y+10, r25	; 0x0a
 14a:	89 87       	std	Y+9, r24	; 0x09
 14c:	46 c0       	rjmp	.+140    	; 0x1da <main+0x148>
	else if (__tmp > 65535)
 14e:	11 e0       	ldi	r17, 0x01	; 1
 150:	6d 81       	ldd	r22, Y+5	; 0x05
 152:	7e 81       	ldd	r23, Y+6	; 0x06
 154:	8f 81       	ldd	r24, Y+7	; 0x07
 156:	98 85       	ldd	r25, Y+8	; 0x08
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	3f ef       	ldi	r19, 0xFF	; 255
 15c:	4f e7       	ldi	r20, 0x7F	; 127
 15e:	57 e4       	ldi	r21, 0x47	; 71
 160:	0e 94 0d 02 	call	0x41a	; 0x41a <__gesf2>
 164:	18 16       	cp	r1, r24
 166:	0c f0       	brlt	.+2      	; 0x16a <main+0xd8>
 168:	10 e0       	ldi	r17, 0x00	; 0
 16a:	11 23       	and	r17, r17
 16c:	61 f1       	breq	.+88     	; 0x1c6 <main+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 16e:	69 81       	ldd	r22, Y+1	; 0x01
 170:	7a 81       	ldd	r23, Y+2	; 0x02
 172:	8b 81       	ldd	r24, Y+3	; 0x03
 174:	9c 81       	ldd	r25, Y+4	; 0x04
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	40 e2       	ldi	r20, 0x20	; 32
 17c:	51 e4       	ldi	r21, 0x41	; 65
 17e:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
 182:	dc 01       	movw	r26, r24
 184:	cb 01       	movw	r24, r22
 186:	bc 01       	movw	r22, r24
 188:	cd 01       	movw	r24, r26
 18a:	0e 94 94 01 	call	0x328	; 0x328 <__fixunssfsi>
 18e:	dc 01       	movw	r26, r24
 190:	cb 01       	movw	r24, r22
 192:	9a 87       	std	Y+10, r25	; 0x0a
 194:	89 87       	std	Y+9, r24	; 0x09
 196:	12 c0       	rjmp	.+36     	; 0x1bc <main+0x12a>
 198:	89 e1       	ldi	r24, 0x19	; 25
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	9c 87       	std	Y+12, r25	; 0x0c
 19e:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1a0:	8b 85       	ldd	r24, Y+11	; 0x0b
 1a2:	9c 85       	ldd	r25, Y+12	; 0x0c
 1a4:	8c 01       	movw	r16, r24
 1a6:	c8 01       	movw	r24, r16
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <main+0x116>
 1ac:	8c 01       	movw	r16, r24
 1ae:	1c 87       	std	Y+12, r17	; 0x0c
 1b0:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b2:	89 85       	ldd	r24, Y+9	; 0x09
 1b4:	9a 85       	ldd	r25, Y+10	; 0x0a
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	9a 87       	std	Y+10, r25	; 0x0a
 1ba:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1bc:	89 85       	ldd	r24, Y+9	; 0x09
 1be:	9a 85       	ldd	r25, Y+10	; 0x0a
 1c0:	00 97       	sbiw	r24, 0x00	; 0
 1c2:	51 f7       	brne	.-44     	; 0x198 <main+0x106>
 1c4:	17 c0       	rjmp	.+46     	; 0x1f4 <main+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1c6:	6d 81       	ldd	r22, Y+5	; 0x05
 1c8:	7e 81       	ldd	r23, Y+6	; 0x06
 1ca:	8f 81       	ldd	r24, Y+7	; 0x07
 1cc:	98 85       	ldd	r25, Y+8	; 0x08
 1ce:	0e 94 94 01 	call	0x328	; 0x328 <__fixunssfsi>
 1d2:	dc 01       	movw	r26, r24
 1d4:	cb 01       	movw	r24, r22
 1d6:	9a 87       	std	Y+10, r25	; 0x0a
 1d8:	89 87       	std	Y+9, r24	; 0x09
 1da:	89 85       	ldd	r24, Y+9	; 0x09
 1dc:	9a 85       	ldd	r25, Y+10	; 0x0a
 1de:	9e 87       	std	Y+14, r25	; 0x0e
 1e0:	8d 87       	std	Y+13, r24	; 0x0d
 1e2:	8d 85       	ldd	r24, Y+13	; 0x0d
 1e4:	9e 85       	ldd	r25, Y+14	; 0x0e
 1e6:	8c 01       	movw	r16, r24
 1e8:	f8 01       	movw	r30, r16
 1ea:	31 97       	sbiw	r30, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <main+0x158>
 1ee:	8f 01       	movw	r16, r30
 1f0:	1e 87       	std	Y+14, r17	; 0x0e
 1f2:	0d 87       	std	Y+13, r16	; 0x0d
		_delay_ms(1000); 
		PORTA=0XFF;   //TODO:: Please write your application code
 1f4:	8b e3       	ldi	r24, 0x3B	; 59
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
 1fa:	fc 01       	movw	r30, r24
 1fc:	20 83       	st	Z, r18
		PORTB=0XFF;   //TODO:: Please write your application code
 1fe:	88 e3       	ldi	r24, 0x38	; 56
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	2f ef       	ldi	r18, 0xFF	; 255
 204:	fc 01       	movw	r30, r24
 206:	20 83       	st	Z, r18
		PORTC=0XAA;   //TODO:: Please write your application code
 208:	85 e3       	ldi	r24, 0x35	; 53
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	2a ea       	ldi	r18, 0xAA	; 170
 20e:	fc 01       	movw	r30, r24
 210:	20 83       	st	Z, r18
		PORTD=0XFF;   //TODO:: Please write your application code
 212:	82 e3       	ldi	r24, 0x32	; 50
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	2f ef       	ldi	r18, 0xFF	; 255
 218:	fc 01       	movw	r30, r24
 21a:	20 83       	st	Z, r18
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	aa e7       	ldi	r26, 0x7A	; 122
 222:	b4 e4       	ldi	r27, 0x44	; 68
 224:	8f 87       	std	Y+15, r24	; 0x0f
 226:	98 8b       	std	Y+16, r25	; 0x10
 228:	a9 8b       	std	Y+17, r26	; 0x11
 22a:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 22c:	6f 85       	ldd	r22, Y+15	; 0x0f
 22e:	78 89       	ldd	r23, Y+16	; 0x10
 230:	89 89       	ldd	r24, Y+17	; 0x11
 232:	9a 89       	ldd	r25, Y+18	; 0x12
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	4a e7       	ldi	r20, 0x7A	; 122
 23a:	53 e4       	ldi	r21, 0x43	; 67
 23c:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
 240:	dc 01       	movw	r26, r24
 242:	cb 01       	movw	r24, r22
 244:	8b 8b       	std	Y+19, r24	; 0x13
 246:	9c 8b       	std	Y+20, r25	; 0x14
 248:	ad 8b       	std	Y+21, r26	; 0x15
 24a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 24c:	11 e0       	ldi	r17, 0x01	; 1
 24e:	6b 89       	ldd	r22, Y+19	; 0x13
 250:	7c 89       	ldd	r23, Y+20	; 0x14
 252:	8d 89       	ldd	r24, Y+21	; 0x15
 254:	9e 89       	ldd	r25, Y+22	; 0x16
 256:	20 e0       	ldi	r18, 0x00	; 0
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	40 e8       	ldi	r20, 0x80	; 128
 25c:	5f e3       	ldi	r21, 0x3F	; 63
 25e:	0e 94 90 01 	call	0x320	; 0x320 <__cmpsf2>
 262:	88 23       	and	r24, r24
 264:	0c f0       	brlt	.+2      	; 0x268 <main+0x1d6>
 266:	10 e0       	ldi	r17, 0x00	; 0
 268:	11 23       	and	r17, r17
 26a:	29 f0       	breq	.+10     	; 0x276 <main+0x1e4>
		__ticks = 1;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	98 8f       	std	Y+24, r25	; 0x18
 272:	8f 8b       	std	Y+23, r24	; 0x17
 274:	46 c0       	rjmp	.+140    	; 0x302 <main+0x270>
	else if (__tmp > 65535)
 276:	11 e0       	ldi	r17, 0x01	; 1
 278:	6b 89       	ldd	r22, Y+19	; 0x13
 27a:	7c 89       	ldd	r23, Y+20	; 0x14
 27c:	8d 89       	ldd	r24, Y+21	; 0x15
 27e:	9e 89       	ldd	r25, Y+22	; 0x16
 280:	20 e0       	ldi	r18, 0x00	; 0
 282:	3f ef       	ldi	r19, 0xFF	; 255
 284:	4f e7       	ldi	r20, 0x7F	; 127
 286:	57 e4       	ldi	r21, 0x47	; 71
 288:	0e 94 0d 02 	call	0x41a	; 0x41a <__gesf2>
 28c:	18 16       	cp	r1, r24
 28e:	0c f0       	brlt	.+2      	; 0x292 <main+0x200>
 290:	10 e0       	ldi	r17, 0x00	; 0
 292:	11 23       	and	r17, r17
 294:	61 f1       	breq	.+88     	; 0x2ee <main+0x25c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 296:	6f 85       	ldd	r22, Y+15	; 0x0f
 298:	78 89       	ldd	r23, Y+16	; 0x10
 29a:	89 89       	ldd	r24, Y+17	; 0x11
 29c:	9a 89       	ldd	r25, Y+18	; 0x12
 29e:	20 e0       	ldi	r18, 0x00	; 0
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	40 e2       	ldi	r20, 0x20	; 32
 2a4:	51 e4       	ldi	r21, 0x41	; 65
 2a6:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
 2aa:	dc 01       	movw	r26, r24
 2ac:	cb 01       	movw	r24, r22
 2ae:	bc 01       	movw	r22, r24
 2b0:	cd 01       	movw	r24, r26
 2b2:	0e 94 94 01 	call	0x328	; 0x328 <__fixunssfsi>
 2b6:	dc 01       	movw	r26, r24
 2b8:	cb 01       	movw	r24, r22
 2ba:	98 8f       	std	Y+24, r25	; 0x18
 2bc:	8f 8b       	std	Y+23, r24	; 0x17
 2be:	12 c0       	rjmp	.+36     	; 0x2e4 <main+0x252>
 2c0:	89 e1       	ldi	r24, 0x19	; 25
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	9a 8f       	std	Y+26, r25	; 0x1a
 2c6:	89 8f       	std	Y+25, r24	; 0x19
 2c8:	89 8d       	ldd	r24, Y+25	; 0x19
 2ca:	9a 8d       	ldd	r25, Y+26	; 0x1a
 2cc:	8c 01       	movw	r16, r24
 2ce:	c8 01       	movw	r24, r16
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <main+0x23e>
 2d4:	8c 01       	movw	r16, r24
 2d6:	1a 8f       	std	Y+26, r17	; 0x1a
 2d8:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2da:	8f 89       	ldd	r24, Y+23	; 0x17
 2dc:	98 8d       	ldd	r25, Y+24	; 0x18
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	98 8f       	std	Y+24, r25	; 0x18
 2e2:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2e4:	8f 89       	ldd	r24, Y+23	; 0x17
 2e6:	98 8d       	ldd	r25, Y+24	; 0x18
 2e8:	00 97       	sbiw	r24, 0x00	; 0
 2ea:	51 f7       	brne	.-44     	; 0x2c0 <main+0x22e>
 2ec:	18 c0       	rjmp	.+48     	; 0x31e <main+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2ee:	6b 89       	ldd	r22, Y+19	; 0x13
 2f0:	7c 89       	ldd	r23, Y+20	; 0x14
 2f2:	8d 89       	ldd	r24, Y+21	; 0x15
 2f4:	9e 89       	ldd	r25, Y+22	; 0x16
 2f6:	0e 94 94 01 	call	0x328	; 0x328 <__fixunssfsi>
 2fa:	dc 01       	movw	r26, r24
 2fc:	cb 01       	movw	r24, r22
 2fe:	98 8f       	std	Y+24, r25	; 0x18
 300:	8f 8b       	std	Y+23, r24	; 0x17
 302:	8f 89       	ldd	r24, Y+23	; 0x17
 304:	98 8d       	ldd	r25, Y+24	; 0x18
 306:	9c 8f       	std	Y+28, r25	; 0x1c
 308:	8b 8f       	std	Y+27, r24	; 0x1b
 30a:	8b 8d       	ldd	r24, Y+27	; 0x1b
 30c:	9c 8d       	ldd	r25, Y+28	; 0x1c
 30e:	8c 01       	movw	r16, r24
 310:	f8 01       	movw	r30, r16
 312:	31 97       	sbiw	r30, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <main+0x280>
 316:	8f 01       	movw	r16, r30
 318:	1c 8f       	std	Y+28, r17	; 0x1c
 31a:	0b 8f       	std	Y+27, r16	; 0x1b
		_delay_ms(1000); 

    }
 31c:	da ce       	rjmp	.-588    	; 0xd2 <main+0x40>
 31e:	d9 ce       	rjmp	.-590    	; 0xd2 <main+0x40>

00000320 <__cmpsf2>:
 320:	2f d0       	rcall	.+94     	; 0x380 <__fp_cmp>
 322:	08 f4       	brcc	.+2      	; 0x326 <__cmpsf2+0x6>
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	08 95       	ret

00000328 <__fixunssfsi>:
 328:	57 d0       	rcall	.+174    	; 0x3d8 <__fp_splitA>
 32a:	88 f0       	brcs	.+34     	; 0x34e <__fixunssfsi+0x26>
 32c:	9f 57       	subi	r25, 0x7F	; 127
 32e:	90 f0       	brcs	.+36     	; 0x354 <__fixunssfsi+0x2c>
 330:	b9 2f       	mov	r27, r25
 332:	99 27       	eor	r25, r25
 334:	b7 51       	subi	r27, 0x17	; 23
 336:	a0 f0       	brcs	.+40     	; 0x360 <__fixunssfsi+0x38>
 338:	d1 f0       	breq	.+52     	; 0x36e <__fixunssfsi+0x46>
 33a:	66 0f       	add	r22, r22
 33c:	77 1f       	adc	r23, r23
 33e:	88 1f       	adc	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	1a f0       	brmi	.+6      	; 0x34a <__fixunssfsi+0x22>
 344:	ba 95       	dec	r27
 346:	c9 f7       	brne	.-14     	; 0x33a <__fixunssfsi+0x12>
 348:	12 c0       	rjmp	.+36     	; 0x36e <__fixunssfsi+0x46>
 34a:	b1 30       	cpi	r27, 0x01	; 1
 34c:	81 f0       	breq	.+32     	; 0x36e <__fixunssfsi+0x46>
 34e:	5e d0       	rcall	.+188    	; 0x40c <__fp_zero>
 350:	b1 e0       	ldi	r27, 0x01	; 1
 352:	08 95       	ret
 354:	5b c0       	rjmp	.+182    	; 0x40c <__fp_zero>
 356:	67 2f       	mov	r22, r23
 358:	78 2f       	mov	r23, r24
 35a:	88 27       	eor	r24, r24
 35c:	b8 5f       	subi	r27, 0xF8	; 248
 35e:	39 f0       	breq	.+14     	; 0x36e <__fixunssfsi+0x46>
 360:	b9 3f       	cpi	r27, 0xF9	; 249
 362:	cc f3       	brlt	.-14     	; 0x356 <__fixunssfsi+0x2e>
 364:	86 95       	lsr	r24
 366:	77 95       	ror	r23
 368:	67 95       	ror	r22
 36a:	b3 95       	inc	r27
 36c:	d9 f7       	brne	.-10     	; 0x364 <__fixunssfsi+0x3c>
 36e:	3e f4       	brtc	.+14     	; 0x37e <__fixunssfsi+0x56>
 370:	90 95       	com	r25
 372:	80 95       	com	r24
 374:	70 95       	com	r23
 376:	61 95       	neg	r22
 378:	7f 4f       	sbci	r23, 0xFF	; 255
 37a:	8f 4f       	sbci	r24, 0xFF	; 255
 37c:	9f 4f       	sbci	r25, 0xFF	; 255
 37e:	08 95       	ret

00000380 <__fp_cmp>:
 380:	99 0f       	add	r25, r25
 382:	00 08       	sbc	r0, r0
 384:	55 0f       	add	r21, r21
 386:	aa 0b       	sbc	r26, r26
 388:	e0 e8       	ldi	r30, 0x80	; 128
 38a:	fe ef       	ldi	r31, 0xFE	; 254
 38c:	16 16       	cp	r1, r22
 38e:	17 06       	cpc	r1, r23
 390:	e8 07       	cpc	r30, r24
 392:	f9 07       	cpc	r31, r25
 394:	c0 f0       	brcs	.+48     	; 0x3c6 <__fp_cmp+0x46>
 396:	12 16       	cp	r1, r18
 398:	13 06       	cpc	r1, r19
 39a:	e4 07       	cpc	r30, r20
 39c:	f5 07       	cpc	r31, r21
 39e:	98 f0       	brcs	.+38     	; 0x3c6 <__fp_cmp+0x46>
 3a0:	62 1b       	sub	r22, r18
 3a2:	73 0b       	sbc	r23, r19
 3a4:	84 0b       	sbc	r24, r20
 3a6:	95 0b       	sbc	r25, r21
 3a8:	39 f4       	brne	.+14     	; 0x3b8 <__fp_cmp+0x38>
 3aa:	0a 26       	eor	r0, r26
 3ac:	61 f0       	breq	.+24     	; 0x3c6 <__fp_cmp+0x46>
 3ae:	23 2b       	or	r18, r19
 3b0:	24 2b       	or	r18, r20
 3b2:	25 2b       	or	r18, r21
 3b4:	21 f4       	brne	.+8      	; 0x3be <__fp_cmp+0x3e>
 3b6:	08 95       	ret
 3b8:	0a 26       	eor	r0, r26
 3ba:	09 f4       	brne	.+2      	; 0x3be <__fp_cmp+0x3e>
 3bc:	a1 40       	sbci	r26, 0x01	; 1
 3be:	a6 95       	lsr	r26
 3c0:	8f ef       	ldi	r24, 0xFF	; 255
 3c2:	81 1d       	adc	r24, r1
 3c4:	81 1d       	adc	r24, r1
 3c6:	08 95       	ret

000003c8 <__fp_split3>:
 3c8:	57 fd       	sbrc	r21, 7
 3ca:	90 58       	subi	r25, 0x80	; 128
 3cc:	44 0f       	add	r20, r20
 3ce:	55 1f       	adc	r21, r21
 3d0:	59 f0       	breq	.+22     	; 0x3e8 <__fp_splitA+0x10>
 3d2:	5f 3f       	cpi	r21, 0xFF	; 255
 3d4:	71 f0       	breq	.+28     	; 0x3f2 <__fp_splitA+0x1a>
 3d6:	47 95       	ror	r20

000003d8 <__fp_splitA>:
 3d8:	88 0f       	add	r24, r24
 3da:	97 fb       	bst	r25, 7
 3dc:	99 1f       	adc	r25, r25
 3de:	61 f0       	breq	.+24     	; 0x3f8 <__fp_splitA+0x20>
 3e0:	9f 3f       	cpi	r25, 0xFF	; 255
 3e2:	79 f0       	breq	.+30     	; 0x402 <__fp_splitA+0x2a>
 3e4:	87 95       	ror	r24
 3e6:	08 95       	ret
 3e8:	12 16       	cp	r1, r18
 3ea:	13 06       	cpc	r1, r19
 3ec:	14 06       	cpc	r1, r20
 3ee:	55 1f       	adc	r21, r21
 3f0:	f2 cf       	rjmp	.-28     	; 0x3d6 <__fp_split3+0xe>
 3f2:	46 95       	lsr	r20
 3f4:	f1 df       	rcall	.-30     	; 0x3d8 <__fp_splitA>
 3f6:	08 c0       	rjmp	.+16     	; 0x408 <__fp_splitA+0x30>
 3f8:	16 16       	cp	r1, r22
 3fa:	17 06       	cpc	r1, r23
 3fc:	18 06       	cpc	r1, r24
 3fe:	99 1f       	adc	r25, r25
 400:	f1 cf       	rjmp	.-30     	; 0x3e4 <__fp_splitA+0xc>
 402:	86 95       	lsr	r24
 404:	71 05       	cpc	r23, r1
 406:	61 05       	cpc	r22, r1
 408:	08 94       	sec
 40a:	08 95       	ret

0000040c <__fp_zero>:
 40c:	e8 94       	clt

0000040e <__fp_szero>:
 40e:	bb 27       	eor	r27, r27
 410:	66 27       	eor	r22, r22
 412:	77 27       	eor	r23, r23
 414:	cb 01       	movw	r24, r22
 416:	97 f9       	bld	r25, 7
 418:	08 95       	ret

0000041a <__gesf2>:
 41a:	b2 df       	rcall	.-156    	; 0x380 <__fp_cmp>
 41c:	08 f4       	brcc	.+2      	; 0x420 <__gesf2+0x6>
 41e:	8f ef       	ldi	r24, 0xFF	; 255
 420:	08 95       	ret

00000422 <__mulsf3>:
 422:	0b d0       	rcall	.+22     	; 0x43a <__mulsf3x>
 424:	78 c0       	rjmp	.+240    	; 0x516 <__fp_round>
 426:	69 d0       	rcall	.+210    	; 0x4fa <__fp_pscA>
 428:	28 f0       	brcs	.+10     	; 0x434 <__mulsf3+0x12>
 42a:	6e d0       	rcall	.+220    	; 0x508 <__fp_pscB>
 42c:	18 f0       	brcs	.+6      	; 0x434 <__mulsf3+0x12>
 42e:	95 23       	and	r25, r21
 430:	09 f0       	breq	.+2      	; 0x434 <__mulsf3+0x12>
 432:	5a c0       	rjmp	.+180    	; 0x4e8 <__fp_inf>
 434:	5f c0       	rjmp	.+190    	; 0x4f4 <__fp_nan>
 436:	11 24       	eor	r1, r1
 438:	ea cf       	rjmp	.-44     	; 0x40e <__fp_szero>

0000043a <__mulsf3x>:
 43a:	c6 df       	rcall	.-116    	; 0x3c8 <__fp_split3>
 43c:	a0 f3       	brcs	.-24     	; 0x426 <__mulsf3+0x4>

0000043e <__mulsf3_pse>:
 43e:	95 9f       	mul	r25, r21
 440:	d1 f3       	breq	.-12     	; 0x436 <__mulsf3+0x14>
 442:	95 0f       	add	r25, r21
 444:	50 e0       	ldi	r21, 0x00	; 0
 446:	55 1f       	adc	r21, r21
 448:	62 9f       	mul	r22, r18
 44a:	f0 01       	movw	r30, r0
 44c:	72 9f       	mul	r23, r18
 44e:	bb 27       	eor	r27, r27
 450:	f0 0d       	add	r31, r0
 452:	b1 1d       	adc	r27, r1
 454:	63 9f       	mul	r22, r19
 456:	aa 27       	eor	r26, r26
 458:	f0 0d       	add	r31, r0
 45a:	b1 1d       	adc	r27, r1
 45c:	aa 1f       	adc	r26, r26
 45e:	64 9f       	mul	r22, r20
 460:	66 27       	eor	r22, r22
 462:	b0 0d       	add	r27, r0
 464:	a1 1d       	adc	r26, r1
 466:	66 1f       	adc	r22, r22
 468:	82 9f       	mul	r24, r18
 46a:	22 27       	eor	r18, r18
 46c:	b0 0d       	add	r27, r0
 46e:	a1 1d       	adc	r26, r1
 470:	62 1f       	adc	r22, r18
 472:	73 9f       	mul	r23, r19
 474:	b0 0d       	add	r27, r0
 476:	a1 1d       	adc	r26, r1
 478:	62 1f       	adc	r22, r18
 47a:	83 9f       	mul	r24, r19
 47c:	a0 0d       	add	r26, r0
 47e:	61 1d       	adc	r22, r1
 480:	22 1f       	adc	r18, r18
 482:	74 9f       	mul	r23, r20
 484:	33 27       	eor	r19, r19
 486:	a0 0d       	add	r26, r0
 488:	61 1d       	adc	r22, r1
 48a:	23 1f       	adc	r18, r19
 48c:	84 9f       	mul	r24, r20
 48e:	60 0d       	add	r22, r0
 490:	21 1d       	adc	r18, r1
 492:	82 2f       	mov	r24, r18
 494:	76 2f       	mov	r23, r22
 496:	6a 2f       	mov	r22, r26
 498:	11 24       	eor	r1, r1
 49a:	9f 57       	subi	r25, 0x7F	; 127
 49c:	50 40       	sbci	r21, 0x00	; 0
 49e:	8a f0       	brmi	.+34     	; 0x4c2 <__stack+0x63>
 4a0:	e1 f0       	breq	.+56     	; 0x4da <__stack+0x7b>
 4a2:	88 23       	and	r24, r24
 4a4:	4a f0       	brmi	.+18     	; 0x4b8 <__stack+0x59>
 4a6:	ee 0f       	add	r30, r30
 4a8:	ff 1f       	adc	r31, r31
 4aa:	bb 1f       	adc	r27, r27
 4ac:	66 1f       	adc	r22, r22
 4ae:	77 1f       	adc	r23, r23
 4b0:	88 1f       	adc	r24, r24
 4b2:	91 50       	subi	r25, 0x01	; 1
 4b4:	50 40       	sbci	r21, 0x00	; 0
 4b6:	a9 f7       	brne	.-22     	; 0x4a2 <__stack+0x43>
 4b8:	9e 3f       	cpi	r25, 0xFE	; 254
 4ba:	51 05       	cpc	r21, r1
 4bc:	70 f0       	brcs	.+28     	; 0x4da <__stack+0x7b>
 4be:	14 c0       	rjmp	.+40     	; 0x4e8 <__fp_inf>
 4c0:	a6 cf       	rjmp	.-180    	; 0x40e <__fp_szero>
 4c2:	5f 3f       	cpi	r21, 0xFF	; 255
 4c4:	ec f3       	brlt	.-6      	; 0x4c0 <__stack+0x61>
 4c6:	98 3e       	cpi	r25, 0xE8	; 232
 4c8:	dc f3       	brlt	.-10     	; 0x4c0 <__stack+0x61>
 4ca:	86 95       	lsr	r24
 4cc:	77 95       	ror	r23
 4ce:	67 95       	ror	r22
 4d0:	b7 95       	ror	r27
 4d2:	f7 95       	ror	r31
 4d4:	e7 95       	ror	r30
 4d6:	9f 5f       	subi	r25, 0xFF	; 255
 4d8:	c1 f7       	brne	.-16     	; 0x4ca <__stack+0x6b>
 4da:	fe 2b       	or	r31, r30
 4dc:	88 0f       	add	r24, r24
 4de:	91 1d       	adc	r25, r1
 4e0:	96 95       	lsr	r25
 4e2:	87 95       	ror	r24
 4e4:	97 f9       	bld	r25, 7
 4e6:	08 95       	ret

000004e8 <__fp_inf>:
 4e8:	97 f9       	bld	r25, 7
 4ea:	9f 67       	ori	r25, 0x7F	; 127
 4ec:	80 e8       	ldi	r24, 0x80	; 128
 4ee:	70 e0       	ldi	r23, 0x00	; 0
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	08 95       	ret

000004f4 <__fp_nan>:
 4f4:	9f ef       	ldi	r25, 0xFF	; 255
 4f6:	80 ec       	ldi	r24, 0xC0	; 192
 4f8:	08 95       	ret

000004fa <__fp_pscA>:
 4fa:	00 24       	eor	r0, r0
 4fc:	0a 94       	dec	r0
 4fe:	16 16       	cp	r1, r22
 500:	17 06       	cpc	r1, r23
 502:	18 06       	cpc	r1, r24
 504:	09 06       	cpc	r0, r25
 506:	08 95       	ret

00000508 <__fp_pscB>:
 508:	00 24       	eor	r0, r0
 50a:	0a 94       	dec	r0
 50c:	12 16       	cp	r1, r18
 50e:	13 06       	cpc	r1, r19
 510:	14 06       	cpc	r1, r20
 512:	05 06       	cpc	r0, r21
 514:	08 95       	ret

00000516 <__fp_round>:
 516:	09 2e       	mov	r0, r25
 518:	03 94       	inc	r0
 51a:	00 0c       	add	r0, r0
 51c:	11 f4       	brne	.+4      	; 0x522 <__fp_round+0xc>
 51e:	88 23       	and	r24, r24
 520:	52 f0       	brmi	.+20     	; 0x536 <__fp_round+0x20>
 522:	bb 0f       	add	r27, r27
 524:	40 f4       	brcc	.+16     	; 0x536 <__fp_round+0x20>
 526:	bf 2b       	or	r27, r31
 528:	11 f4       	brne	.+4      	; 0x52e <__fp_round+0x18>
 52a:	60 ff       	sbrs	r22, 0
 52c:	04 c0       	rjmp	.+8      	; 0x536 <__fp_round+0x20>
 52e:	6f 5f       	subi	r22, 0xFF	; 255
 530:	7f 4f       	sbci	r23, 0xFF	; 255
 532:	8f 4f       	sbci	r24, 0xFF	; 255
 534:	9f 4f       	sbci	r25, 0xFF	; 255
 536:	08 95       	ret

00000538 <_exit>:
 538:	f8 94       	cli

0000053a <__stop_program>:
 53a:	ff cf       	rjmp	.-2      	; 0x53a <__stop_program>
