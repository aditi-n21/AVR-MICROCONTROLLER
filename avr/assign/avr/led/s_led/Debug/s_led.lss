
s_led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000500  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00001638  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000057e  00000000  00000000  00001b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00002110  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000444  00000000  00000000  00002190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000f0  00000000  00000000  000025d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000389  00000000  00000000  000026c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000003c  00000000  00000000  00002a50  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000bc  00000000  00000000  00002a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000055  00000000  00000000  00002b48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e0       	ldi	r30, 0x00	; 0
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#include <avr/io.h>
#include <util/delay.h>
#define led 0
int main(void)
{
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	6c 97       	sbiw	r28, 0x1c	; 28
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
    DDRC|=0x01;    // data direction register
  aa:	84 e3       	ldi	r24, 0x34	; 52
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	24 e3       	ldi	r18, 0x34	; 52
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	f9 01       	movw	r30, r18
  b4:	20 81       	ld	r18, Z
  b6:	21 60       	ori	r18, 0x01	; 1
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
	//MCUCSR|=(1<<JTD);
	//MCUCSR|=(1<<JTD);
    while(1)
    {
		
       PORTC|=(1<<led);
  bc:	85 e3       	ldi	r24, 0x35	; 53
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	25 e3       	ldi	r18, 0x35	; 53
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	f9 01       	movw	r30, r18
  c6:	20 81       	ld	r18, Z
  c8:	21 60       	ori	r18, 0x01	; 1
  ca:	fc 01       	movw	r30, r24
  cc:	20 83       	st	Z, r18
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	aa e7       	ldi	r26, 0x7A	; 122
  d4:	b4 e4       	ldi	r27, 0x44	; 68
  d6:	89 83       	std	Y+1, r24	; 0x01
  d8:	9a 83       	std	Y+2, r25	; 0x02
  da:	ab 83       	std	Y+3, r26	; 0x03
  dc:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
  de:	69 81       	ldd	r22, Y+1	; 0x01
  e0:	7a 81       	ldd	r23, Y+2	; 0x02
  e2:	8b 81       	ldd	r24, Y+3	; 0x03
  e4:	9c 81       	ldd	r25, Y+4	; 0x04
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	4a e7       	ldi	r20, 0x7A	; 122
  ec:	53 e4       	ldi	r21, 0x43	; 67
  ee:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__mulsf3>
  f2:	dc 01       	movw	r26, r24
  f4:	cb 01       	movw	r24, r22
  f6:	8d 83       	std	Y+5, r24	; 0x05
  f8:	9e 83       	std	Y+6, r25	; 0x06
  fa:	af 83       	std	Y+7, r26	; 0x07
  fc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
  fe:	11 e0       	ldi	r17, 0x01	; 1
 100:	6d 81       	ldd	r22, Y+5	; 0x05
 102:	7e 81       	ldd	r23, Y+6	; 0x06
 104:	8f 81       	ldd	r24, Y+7	; 0x07
 106:	98 85       	ldd	r25, Y+8	; 0x08
 108:	20 e0       	ldi	r18, 0x00	; 0
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	40 e8       	ldi	r20, 0x80	; 128
 10e:	5f e3       	ldi	r21, 0x3F	; 63
 110:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__cmpsf2>
 114:	88 23       	and	r24, r24
 116:	0c f0       	brlt	.+2      	; 0x11a <main+0x88>
 118:	10 e0       	ldi	r17, 0x00	; 0
 11a:	11 23       	and	r17, r17
 11c:	29 f0       	breq	.+10     	; 0x128 <main+0x96>
		__ticks = 1;
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	9a 87       	std	Y+10, r25	; 0x0a
 124:	89 87       	std	Y+9, r24	; 0x09
 126:	46 c0       	rjmp	.+140    	; 0x1b4 <main+0x122>
	else if (__tmp > 65535)
 128:	11 e0       	ldi	r17, 0x01	; 1
 12a:	6d 81       	ldd	r22, Y+5	; 0x05
 12c:	7e 81       	ldd	r23, Y+6	; 0x06
 12e:	8f 81       	ldd	r24, Y+7	; 0x07
 130:	98 85       	ldd	r25, Y+8	; 0x08
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	3f ef       	ldi	r19, 0xFF	; 255
 136:	4f e7       	ldi	r20, 0x7F	; 127
 138:	57 e4       	ldi	r21, 0x47	; 71
 13a:	0e 94 ef 01 	call	0x3de	; 0x3de <__gesf2>
 13e:	18 16       	cp	r1, r24
 140:	0c f0       	brlt	.+2      	; 0x144 <main+0xb2>
 142:	10 e0       	ldi	r17, 0x00	; 0
 144:	11 23       	and	r17, r17
 146:	61 f1       	breq	.+88     	; 0x1a0 <main+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 148:	69 81       	ldd	r22, Y+1	; 0x01
 14a:	7a 81       	ldd	r23, Y+2	; 0x02
 14c:	8b 81       	ldd	r24, Y+3	; 0x03
 14e:	9c 81       	ldd	r25, Y+4	; 0x04
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	40 e2       	ldi	r20, 0x20	; 32
 156:	51 e4       	ldi	r21, 0x41	; 65
 158:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__mulsf3>
 15c:	dc 01       	movw	r26, r24
 15e:	cb 01       	movw	r24, r22
 160:	bc 01       	movw	r22, r24
 162:	cd 01       	movw	r24, r26
 164:	0e 94 76 01 	call	0x2ec	; 0x2ec <__fixunssfsi>
 168:	dc 01       	movw	r26, r24
 16a:	cb 01       	movw	r24, r22
 16c:	9a 87       	std	Y+10, r25	; 0x0a
 16e:	89 87       	std	Y+9, r24	; 0x09
 170:	12 c0       	rjmp	.+36     	; 0x196 <main+0x104>
 172:	89 e1       	ldi	r24, 0x19	; 25
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	9c 87       	std	Y+12, r25	; 0x0c
 178:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 17a:	8b 85       	ldd	r24, Y+11	; 0x0b
 17c:	9c 85       	ldd	r25, Y+12	; 0x0c
 17e:	8c 01       	movw	r16, r24
 180:	c8 01       	movw	r24, r16
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <main+0xf0>
 186:	8c 01       	movw	r16, r24
 188:	1c 87       	std	Y+12, r17	; 0x0c
 18a:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 18c:	89 85       	ldd	r24, Y+9	; 0x09
 18e:	9a 85       	ldd	r25, Y+10	; 0x0a
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	9a 87       	std	Y+10, r25	; 0x0a
 194:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 196:	89 85       	ldd	r24, Y+9	; 0x09
 198:	9a 85       	ldd	r25, Y+10	; 0x0a
 19a:	00 97       	sbiw	r24, 0x00	; 0
 19c:	51 f7       	brne	.-44     	; 0x172 <main+0xe0>
 19e:	17 c0       	rjmp	.+46     	; 0x1ce <main+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1a0:	6d 81       	ldd	r22, Y+5	; 0x05
 1a2:	7e 81       	ldd	r23, Y+6	; 0x06
 1a4:	8f 81       	ldd	r24, Y+7	; 0x07
 1a6:	98 85       	ldd	r25, Y+8	; 0x08
 1a8:	0e 94 76 01 	call	0x2ec	; 0x2ec <__fixunssfsi>
 1ac:	dc 01       	movw	r26, r24
 1ae:	cb 01       	movw	r24, r22
 1b0:	9a 87       	std	Y+10, r25	; 0x0a
 1b2:	89 87       	std	Y+9, r24	; 0x09
 1b4:	89 85       	ldd	r24, Y+9	; 0x09
 1b6:	9a 85       	ldd	r25, Y+10	; 0x0a
 1b8:	9e 87       	std	Y+14, r25	; 0x0e
 1ba:	8d 87       	std	Y+13, r24	; 0x0d
 1bc:	8d 85       	ldd	r24, Y+13	; 0x0d
 1be:	9e 85       	ldd	r25, Y+14	; 0x0e
 1c0:	8c 01       	movw	r16, r24
 1c2:	f8 01       	movw	r30, r16
 1c4:	31 97       	sbiw	r30, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <main+0x132>
 1c8:	8f 01       	movw	r16, r30
 1ca:	1e 87       	std	Y+14, r17	; 0x0e
 1cc:	0d 87       	std	Y+13, r16	; 0x0d
	
		_delay_ms(1000); 
		
	PORTC&=~(1<<led);
 1ce:	85 e3       	ldi	r24, 0x35	; 53
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	25 e3       	ldi	r18, 0x35	; 53
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	f9 01       	movw	r30, r18
 1d8:	20 81       	ld	r18, Z
 1da:	2e 7f       	andi	r18, 0xFE	; 254
 1dc:	fc 01       	movw	r30, r24
 1de:	20 83       	st	Z, r18
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	aa e7       	ldi	r26, 0x7A	; 122
 1e6:	b4 e4       	ldi	r27, 0x44	; 68
 1e8:	8f 87       	std	Y+15, r24	; 0x0f
 1ea:	98 8b       	std	Y+16, r25	; 0x10
 1ec:	a9 8b       	std	Y+17, r26	; 0x11
 1ee:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 1f0:	6f 85       	ldd	r22, Y+15	; 0x0f
 1f2:	78 89       	ldd	r23, Y+16	; 0x10
 1f4:	89 89       	ldd	r24, Y+17	; 0x11
 1f6:	9a 89       	ldd	r25, Y+18	; 0x12
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	4a e7       	ldi	r20, 0x7A	; 122
 1fe:	53 e4       	ldi	r21, 0x43	; 67
 200:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__mulsf3>
 204:	dc 01       	movw	r26, r24
 206:	cb 01       	movw	r24, r22
 208:	8b 8b       	std	Y+19, r24	; 0x13
 20a:	9c 8b       	std	Y+20, r25	; 0x14
 20c:	ad 8b       	std	Y+21, r26	; 0x15
 20e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 210:	11 e0       	ldi	r17, 0x01	; 1
 212:	6b 89       	ldd	r22, Y+19	; 0x13
 214:	7c 89       	ldd	r23, Y+20	; 0x14
 216:	8d 89       	ldd	r24, Y+21	; 0x15
 218:	9e 89       	ldd	r25, Y+22	; 0x16
 21a:	20 e0       	ldi	r18, 0x00	; 0
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	40 e8       	ldi	r20, 0x80	; 128
 220:	5f e3       	ldi	r21, 0x3F	; 63
 222:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__cmpsf2>
 226:	88 23       	and	r24, r24
 228:	0c f0       	brlt	.+2      	; 0x22c <main+0x19a>
 22a:	10 e0       	ldi	r17, 0x00	; 0
 22c:	11 23       	and	r17, r17
 22e:	29 f0       	breq	.+10     	; 0x23a <main+0x1a8>
		__ticks = 1;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	98 8f       	std	Y+24, r25	; 0x18
 236:	8f 8b       	std	Y+23, r24	; 0x17
 238:	46 c0       	rjmp	.+140    	; 0x2c6 <main+0x234>
	else if (__tmp > 65535)
 23a:	11 e0       	ldi	r17, 0x01	; 1
 23c:	6b 89       	ldd	r22, Y+19	; 0x13
 23e:	7c 89       	ldd	r23, Y+20	; 0x14
 240:	8d 89       	ldd	r24, Y+21	; 0x15
 242:	9e 89       	ldd	r25, Y+22	; 0x16
 244:	20 e0       	ldi	r18, 0x00	; 0
 246:	3f ef       	ldi	r19, 0xFF	; 255
 248:	4f e7       	ldi	r20, 0x7F	; 127
 24a:	57 e4       	ldi	r21, 0x47	; 71
 24c:	0e 94 ef 01 	call	0x3de	; 0x3de <__gesf2>
 250:	18 16       	cp	r1, r24
 252:	0c f0       	brlt	.+2      	; 0x256 <main+0x1c4>
 254:	10 e0       	ldi	r17, 0x00	; 0
 256:	11 23       	and	r17, r17
 258:	61 f1       	breq	.+88     	; 0x2b2 <main+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 25a:	6f 85       	ldd	r22, Y+15	; 0x0f
 25c:	78 89       	ldd	r23, Y+16	; 0x10
 25e:	89 89       	ldd	r24, Y+17	; 0x11
 260:	9a 89       	ldd	r25, Y+18	; 0x12
 262:	20 e0       	ldi	r18, 0x00	; 0
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	40 e2       	ldi	r20, 0x20	; 32
 268:	51 e4       	ldi	r21, 0x41	; 65
 26a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__mulsf3>
 26e:	dc 01       	movw	r26, r24
 270:	cb 01       	movw	r24, r22
 272:	bc 01       	movw	r22, r24
 274:	cd 01       	movw	r24, r26
 276:	0e 94 76 01 	call	0x2ec	; 0x2ec <__fixunssfsi>
 27a:	dc 01       	movw	r26, r24
 27c:	cb 01       	movw	r24, r22
 27e:	98 8f       	std	Y+24, r25	; 0x18
 280:	8f 8b       	std	Y+23, r24	; 0x17
 282:	12 c0       	rjmp	.+36     	; 0x2a8 <main+0x216>
 284:	89 e1       	ldi	r24, 0x19	; 25
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	9a 8f       	std	Y+26, r25	; 0x1a
 28a:	89 8f       	std	Y+25, r24	; 0x19
 28c:	89 8d       	ldd	r24, Y+25	; 0x19
 28e:	9a 8d       	ldd	r25, Y+26	; 0x1a
 290:	8c 01       	movw	r16, r24
 292:	c8 01       	movw	r24, r16
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <main+0x202>
 298:	8c 01       	movw	r16, r24
 29a:	1a 8f       	std	Y+26, r17	; 0x1a
 29c:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 29e:	8f 89       	ldd	r24, Y+23	; 0x17
 2a0:	98 8d       	ldd	r25, Y+24	; 0x18
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	98 8f       	std	Y+24, r25	; 0x18
 2a6:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2a8:	8f 89       	ldd	r24, Y+23	; 0x17
 2aa:	98 8d       	ldd	r25, Y+24	; 0x18
 2ac:	00 97       	sbiw	r24, 0x00	; 0
 2ae:	51 f7       	brne	.-44     	; 0x284 <main+0x1f2>
 2b0:	18 c0       	rjmp	.+48     	; 0x2e2 <main+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2b2:	6b 89       	ldd	r22, Y+19	; 0x13
 2b4:	7c 89       	ldd	r23, Y+20	; 0x14
 2b6:	8d 89       	ldd	r24, Y+21	; 0x15
 2b8:	9e 89       	ldd	r25, Y+22	; 0x16
 2ba:	0e 94 76 01 	call	0x2ec	; 0x2ec <__fixunssfsi>
 2be:	dc 01       	movw	r26, r24
 2c0:	cb 01       	movw	r24, r22
 2c2:	98 8f       	std	Y+24, r25	; 0x18
 2c4:	8f 8b       	std	Y+23, r24	; 0x17
 2c6:	8f 89       	ldd	r24, Y+23	; 0x17
 2c8:	98 8d       	ldd	r25, Y+24	; 0x18
 2ca:	9c 8f       	std	Y+28, r25	; 0x1c
 2cc:	8b 8f       	std	Y+27, r24	; 0x1b
 2ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
 2d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
 2d2:	8c 01       	movw	r16, r24
 2d4:	f8 01       	movw	r30, r16
 2d6:	31 97       	sbiw	r30, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <main+0x244>
 2da:	8f 01       	movw	r16, r30
 2dc:	1c 8f       	std	Y+28, r17	; 0x1c
 2de:	0b 8f       	std	Y+27, r16	; 0x1b
		_delay_ms(1000); 

    }
 2e0:	ed ce       	rjmp	.-550    	; 0xbc <main+0x2a>
 2e2:	ec ce       	rjmp	.-552    	; 0xbc <main+0x2a>

000002e4 <__cmpsf2>:
 2e4:	2f d0       	rcall	.+94     	; 0x344 <__fp_cmp>
 2e6:	08 f4       	brcc	.+2      	; 0x2ea <__cmpsf2+0x6>
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	08 95       	ret

000002ec <__fixunssfsi>:
 2ec:	57 d0       	rcall	.+174    	; 0x39c <__fp_splitA>
 2ee:	88 f0       	brcs	.+34     	; 0x312 <__fixunssfsi+0x26>
 2f0:	9f 57       	subi	r25, 0x7F	; 127
 2f2:	90 f0       	brcs	.+36     	; 0x318 <__fixunssfsi+0x2c>
 2f4:	b9 2f       	mov	r27, r25
 2f6:	99 27       	eor	r25, r25
 2f8:	b7 51       	subi	r27, 0x17	; 23
 2fa:	a0 f0       	brcs	.+40     	; 0x324 <__fixunssfsi+0x38>
 2fc:	d1 f0       	breq	.+52     	; 0x332 <__fixunssfsi+0x46>
 2fe:	66 0f       	add	r22, r22
 300:	77 1f       	adc	r23, r23
 302:	88 1f       	adc	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	1a f0       	brmi	.+6      	; 0x30e <__fixunssfsi+0x22>
 308:	ba 95       	dec	r27
 30a:	c9 f7       	brne	.-14     	; 0x2fe <__fixunssfsi+0x12>
 30c:	12 c0       	rjmp	.+36     	; 0x332 <__fixunssfsi+0x46>
 30e:	b1 30       	cpi	r27, 0x01	; 1
 310:	81 f0       	breq	.+32     	; 0x332 <__fixunssfsi+0x46>
 312:	5e d0       	rcall	.+188    	; 0x3d0 <__fp_zero>
 314:	b1 e0       	ldi	r27, 0x01	; 1
 316:	08 95       	ret
 318:	5b c0       	rjmp	.+182    	; 0x3d0 <__fp_zero>
 31a:	67 2f       	mov	r22, r23
 31c:	78 2f       	mov	r23, r24
 31e:	88 27       	eor	r24, r24
 320:	b8 5f       	subi	r27, 0xF8	; 248
 322:	39 f0       	breq	.+14     	; 0x332 <__fixunssfsi+0x46>
 324:	b9 3f       	cpi	r27, 0xF9	; 249
 326:	cc f3       	brlt	.-14     	; 0x31a <__fixunssfsi+0x2e>
 328:	86 95       	lsr	r24
 32a:	77 95       	ror	r23
 32c:	67 95       	ror	r22
 32e:	b3 95       	inc	r27
 330:	d9 f7       	brne	.-10     	; 0x328 <__fixunssfsi+0x3c>
 332:	3e f4       	brtc	.+14     	; 0x342 <__fixunssfsi+0x56>
 334:	90 95       	com	r25
 336:	80 95       	com	r24
 338:	70 95       	com	r23
 33a:	61 95       	neg	r22
 33c:	7f 4f       	sbci	r23, 0xFF	; 255
 33e:	8f 4f       	sbci	r24, 0xFF	; 255
 340:	9f 4f       	sbci	r25, 0xFF	; 255
 342:	08 95       	ret

00000344 <__fp_cmp>:
 344:	99 0f       	add	r25, r25
 346:	00 08       	sbc	r0, r0
 348:	55 0f       	add	r21, r21
 34a:	aa 0b       	sbc	r26, r26
 34c:	e0 e8       	ldi	r30, 0x80	; 128
 34e:	fe ef       	ldi	r31, 0xFE	; 254
 350:	16 16       	cp	r1, r22
 352:	17 06       	cpc	r1, r23
 354:	e8 07       	cpc	r30, r24
 356:	f9 07       	cpc	r31, r25
 358:	c0 f0       	brcs	.+48     	; 0x38a <__fp_cmp+0x46>
 35a:	12 16       	cp	r1, r18
 35c:	13 06       	cpc	r1, r19
 35e:	e4 07       	cpc	r30, r20
 360:	f5 07       	cpc	r31, r21
 362:	98 f0       	brcs	.+38     	; 0x38a <__fp_cmp+0x46>
 364:	62 1b       	sub	r22, r18
 366:	73 0b       	sbc	r23, r19
 368:	84 0b       	sbc	r24, r20
 36a:	95 0b       	sbc	r25, r21
 36c:	39 f4       	brne	.+14     	; 0x37c <__fp_cmp+0x38>
 36e:	0a 26       	eor	r0, r26
 370:	61 f0       	breq	.+24     	; 0x38a <__fp_cmp+0x46>
 372:	23 2b       	or	r18, r19
 374:	24 2b       	or	r18, r20
 376:	25 2b       	or	r18, r21
 378:	21 f4       	brne	.+8      	; 0x382 <__fp_cmp+0x3e>
 37a:	08 95       	ret
 37c:	0a 26       	eor	r0, r26
 37e:	09 f4       	brne	.+2      	; 0x382 <__fp_cmp+0x3e>
 380:	a1 40       	sbci	r26, 0x01	; 1
 382:	a6 95       	lsr	r26
 384:	8f ef       	ldi	r24, 0xFF	; 255
 386:	81 1d       	adc	r24, r1
 388:	81 1d       	adc	r24, r1
 38a:	08 95       	ret

0000038c <__fp_split3>:
 38c:	57 fd       	sbrc	r21, 7
 38e:	90 58       	subi	r25, 0x80	; 128
 390:	44 0f       	add	r20, r20
 392:	55 1f       	adc	r21, r21
 394:	59 f0       	breq	.+22     	; 0x3ac <__fp_splitA+0x10>
 396:	5f 3f       	cpi	r21, 0xFF	; 255
 398:	71 f0       	breq	.+28     	; 0x3b6 <__fp_splitA+0x1a>
 39a:	47 95       	ror	r20

0000039c <__fp_splitA>:
 39c:	88 0f       	add	r24, r24
 39e:	97 fb       	bst	r25, 7
 3a0:	99 1f       	adc	r25, r25
 3a2:	61 f0       	breq	.+24     	; 0x3bc <__fp_splitA+0x20>
 3a4:	9f 3f       	cpi	r25, 0xFF	; 255
 3a6:	79 f0       	breq	.+30     	; 0x3c6 <__fp_splitA+0x2a>
 3a8:	87 95       	ror	r24
 3aa:	08 95       	ret
 3ac:	12 16       	cp	r1, r18
 3ae:	13 06       	cpc	r1, r19
 3b0:	14 06       	cpc	r1, r20
 3b2:	55 1f       	adc	r21, r21
 3b4:	f2 cf       	rjmp	.-28     	; 0x39a <__fp_split3+0xe>
 3b6:	46 95       	lsr	r20
 3b8:	f1 df       	rcall	.-30     	; 0x39c <__fp_splitA>
 3ba:	08 c0       	rjmp	.+16     	; 0x3cc <__fp_splitA+0x30>
 3bc:	16 16       	cp	r1, r22
 3be:	17 06       	cpc	r1, r23
 3c0:	18 06       	cpc	r1, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	f1 cf       	rjmp	.-30     	; 0x3a8 <__fp_splitA+0xc>
 3c6:	86 95       	lsr	r24
 3c8:	71 05       	cpc	r23, r1
 3ca:	61 05       	cpc	r22, r1
 3cc:	08 94       	sec
 3ce:	08 95       	ret

000003d0 <__fp_zero>:
 3d0:	e8 94       	clt

000003d2 <__fp_szero>:
 3d2:	bb 27       	eor	r27, r27
 3d4:	66 27       	eor	r22, r22
 3d6:	77 27       	eor	r23, r23
 3d8:	cb 01       	movw	r24, r22
 3da:	97 f9       	bld	r25, 7
 3dc:	08 95       	ret

000003de <__gesf2>:
 3de:	b2 df       	rcall	.-156    	; 0x344 <__fp_cmp>
 3e0:	08 f4       	brcc	.+2      	; 0x3e4 <__gesf2+0x6>
 3e2:	8f ef       	ldi	r24, 0xFF	; 255
 3e4:	08 95       	ret

000003e6 <__mulsf3>:
 3e6:	0b d0       	rcall	.+22     	; 0x3fe <__mulsf3x>
 3e8:	78 c0       	rjmp	.+240    	; 0x4da <__fp_round>
 3ea:	69 d0       	rcall	.+210    	; 0x4be <__fp_pscA>
 3ec:	28 f0       	brcs	.+10     	; 0x3f8 <__mulsf3+0x12>
 3ee:	6e d0       	rcall	.+220    	; 0x4cc <__fp_pscB>
 3f0:	18 f0       	brcs	.+6      	; 0x3f8 <__mulsf3+0x12>
 3f2:	95 23       	and	r25, r21
 3f4:	09 f0       	breq	.+2      	; 0x3f8 <__mulsf3+0x12>
 3f6:	5a c0       	rjmp	.+180    	; 0x4ac <__fp_inf>
 3f8:	5f c0       	rjmp	.+190    	; 0x4b8 <__fp_nan>
 3fa:	11 24       	eor	r1, r1
 3fc:	ea cf       	rjmp	.-44     	; 0x3d2 <__fp_szero>

000003fe <__mulsf3x>:
 3fe:	c6 df       	rcall	.-116    	; 0x38c <__fp_split3>
 400:	a0 f3       	brcs	.-24     	; 0x3ea <__mulsf3+0x4>

00000402 <__mulsf3_pse>:
 402:	95 9f       	mul	r25, r21
 404:	d1 f3       	breq	.-12     	; 0x3fa <__mulsf3+0x14>
 406:	95 0f       	add	r25, r21
 408:	50 e0       	ldi	r21, 0x00	; 0
 40a:	55 1f       	adc	r21, r21
 40c:	62 9f       	mul	r22, r18
 40e:	f0 01       	movw	r30, r0
 410:	72 9f       	mul	r23, r18
 412:	bb 27       	eor	r27, r27
 414:	f0 0d       	add	r31, r0
 416:	b1 1d       	adc	r27, r1
 418:	63 9f       	mul	r22, r19
 41a:	aa 27       	eor	r26, r26
 41c:	f0 0d       	add	r31, r0
 41e:	b1 1d       	adc	r27, r1
 420:	aa 1f       	adc	r26, r26
 422:	64 9f       	mul	r22, r20
 424:	66 27       	eor	r22, r22
 426:	b0 0d       	add	r27, r0
 428:	a1 1d       	adc	r26, r1
 42a:	66 1f       	adc	r22, r22
 42c:	82 9f       	mul	r24, r18
 42e:	22 27       	eor	r18, r18
 430:	b0 0d       	add	r27, r0
 432:	a1 1d       	adc	r26, r1
 434:	62 1f       	adc	r22, r18
 436:	73 9f       	mul	r23, r19
 438:	b0 0d       	add	r27, r0
 43a:	a1 1d       	adc	r26, r1
 43c:	62 1f       	adc	r22, r18
 43e:	83 9f       	mul	r24, r19
 440:	a0 0d       	add	r26, r0
 442:	61 1d       	adc	r22, r1
 444:	22 1f       	adc	r18, r18
 446:	74 9f       	mul	r23, r20
 448:	33 27       	eor	r19, r19
 44a:	a0 0d       	add	r26, r0
 44c:	61 1d       	adc	r22, r1
 44e:	23 1f       	adc	r18, r19
 450:	84 9f       	mul	r24, r20
 452:	60 0d       	add	r22, r0
 454:	21 1d       	adc	r18, r1
 456:	82 2f       	mov	r24, r18
 458:	76 2f       	mov	r23, r22
 45a:	6a 2f       	mov	r22, r26
 45c:	11 24       	eor	r1, r1
 45e:	9f 57       	subi	r25, 0x7F	; 127
 460:	50 40       	sbci	r21, 0x00	; 0
 462:	8a f0       	brmi	.+34     	; 0x486 <__stack+0x27>
 464:	e1 f0       	breq	.+56     	; 0x49e <__stack+0x3f>
 466:	88 23       	and	r24, r24
 468:	4a f0       	brmi	.+18     	; 0x47c <__stack+0x1d>
 46a:	ee 0f       	add	r30, r30
 46c:	ff 1f       	adc	r31, r31
 46e:	bb 1f       	adc	r27, r27
 470:	66 1f       	adc	r22, r22
 472:	77 1f       	adc	r23, r23
 474:	88 1f       	adc	r24, r24
 476:	91 50       	subi	r25, 0x01	; 1
 478:	50 40       	sbci	r21, 0x00	; 0
 47a:	a9 f7       	brne	.-22     	; 0x466 <__stack+0x7>
 47c:	9e 3f       	cpi	r25, 0xFE	; 254
 47e:	51 05       	cpc	r21, r1
 480:	70 f0       	brcs	.+28     	; 0x49e <__stack+0x3f>
 482:	14 c0       	rjmp	.+40     	; 0x4ac <__fp_inf>
 484:	a6 cf       	rjmp	.-180    	; 0x3d2 <__fp_szero>
 486:	5f 3f       	cpi	r21, 0xFF	; 255
 488:	ec f3       	brlt	.-6      	; 0x484 <__stack+0x25>
 48a:	98 3e       	cpi	r25, 0xE8	; 232
 48c:	dc f3       	brlt	.-10     	; 0x484 <__stack+0x25>
 48e:	86 95       	lsr	r24
 490:	77 95       	ror	r23
 492:	67 95       	ror	r22
 494:	b7 95       	ror	r27
 496:	f7 95       	ror	r31
 498:	e7 95       	ror	r30
 49a:	9f 5f       	subi	r25, 0xFF	; 255
 49c:	c1 f7       	brne	.-16     	; 0x48e <__stack+0x2f>
 49e:	fe 2b       	or	r31, r30
 4a0:	88 0f       	add	r24, r24
 4a2:	91 1d       	adc	r25, r1
 4a4:	96 95       	lsr	r25
 4a6:	87 95       	ror	r24
 4a8:	97 f9       	bld	r25, 7
 4aa:	08 95       	ret

000004ac <__fp_inf>:
 4ac:	97 f9       	bld	r25, 7
 4ae:	9f 67       	ori	r25, 0x7F	; 127
 4b0:	80 e8       	ldi	r24, 0x80	; 128
 4b2:	70 e0       	ldi	r23, 0x00	; 0
 4b4:	60 e0       	ldi	r22, 0x00	; 0
 4b6:	08 95       	ret

000004b8 <__fp_nan>:
 4b8:	9f ef       	ldi	r25, 0xFF	; 255
 4ba:	80 ec       	ldi	r24, 0xC0	; 192
 4bc:	08 95       	ret

000004be <__fp_pscA>:
 4be:	00 24       	eor	r0, r0
 4c0:	0a 94       	dec	r0
 4c2:	16 16       	cp	r1, r22
 4c4:	17 06       	cpc	r1, r23
 4c6:	18 06       	cpc	r1, r24
 4c8:	09 06       	cpc	r0, r25
 4ca:	08 95       	ret

000004cc <__fp_pscB>:
 4cc:	00 24       	eor	r0, r0
 4ce:	0a 94       	dec	r0
 4d0:	12 16       	cp	r1, r18
 4d2:	13 06       	cpc	r1, r19
 4d4:	14 06       	cpc	r1, r20
 4d6:	05 06       	cpc	r0, r21
 4d8:	08 95       	ret

000004da <__fp_round>:
 4da:	09 2e       	mov	r0, r25
 4dc:	03 94       	inc	r0
 4de:	00 0c       	add	r0, r0
 4e0:	11 f4       	brne	.+4      	; 0x4e6 <__fp_round+0xc>
 4e2:	88 23       	and	r24, r24
 4e4:	52 f0       	brmi	.+20     	; 0x4fa <__fp_round+0x20>
 4e6:	bb 0f       	add	r27, r27
 4e8:	40 f4       	brcc	.+16     	; 0x4fa <__fp_round+0x20>
 4ea:	bf 2b       	or	r27, r31
 4ec:	11 f4       	brne	.+4      	; 0x4f2 <__fp_round+0x18>
 4ee:	60 ff       	sbrs	r22, 0
 4f0:	04 c0       	rjmp	.+8      	; 0x4fa <__fp_round+0x20>
 4f2:	6f 5f       	subi	r22, 0xFF	; 255
 4f4:	7f 4f       	sbci	r23, 0xFF	; 255
 4f6:	8f 4f       	sbci	r24, 0xFF	; 255
 4f8:	9f 4f       	sbci	r25, 0xFF	; 255
 4fa:	08 95       	ret

000004fc <_exit>:
 4fc:	f8 94       	cli

000004fe <__stop_program>:
 4fe:	ff cf       	rjmp	.-2      	; 0x4fe <__stop_program>
