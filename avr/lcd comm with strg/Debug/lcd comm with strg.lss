
lcd comm with strg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000100  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000008d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000449  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000018e  00000000  00000000  00000d99  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034f  00000000  00000000  00000f27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001278  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000011f  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b2  00000000  00000000  00001407  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e0       	ldi	r30, 0x00	; 0
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  8a:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <usart_int>:

#include <avr/io.h>
#include <util/delay.h>
void usart_int (void)
{
	UCSRB=(1<<TXEN)|(1<<RXEN);
  92:	88 e1       	ldi	r24, 0x18	; 24
  94:	8a b9       	out	0x0a, r24	; 10
	UCSRC=(1<<UCSZ1)|(1<<UCSZ0)|(1<<URSEL);
  96:	86 e8       	ldi	r24, 0x86	; 134
  98:	80 bd       	out	0x20, r24	; 32
	UBRRL=0X33;
  9a:	83 e3       	ldi	r24, 0x33	; 51
  9c:	89 b9       	out	0x09, r24	; 9
}
  9e:	08 95       	ret

000000a0 <usart_send>:
void usart_send (unsigned char ch)
{
	while (!((UCSRA)&(1<<UDRE)));
  a0:	5d 9b       	sbis	0x0b, 5	; 11
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <usart_send>
	UDR=ch;
  a4:	8c b9       	out	0x0c, r24	; 12
}
  a6:	08 95       	ret

000000a8 <usart_get>:
unsigned char usart_get (void)
{	
	while (!((UCSRA)&(1<<RXC)));
  a8:	5f 9b       	sbis	0x0b, 7	; 11
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <usart_get>
		return UDR;
  ac:	8c b1       	in	r24, 0x0c	; 12
}
  ae:	08 95       	ret

000000b0 <str>:

void str(unsigned char *s)
{
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	ec 01       	movw	r28, r24
	while(*s)
  b6:	88 81       	ld	r24, Y
  b8:	88 23       	and	r24, r24
  ba:	79 f0       	breq	.+30     	; 0xda <str+0x2a>
{	
	while (!((UCSRA)&(1<<RXC)));
		return UDR;
}

void str(unsigned char *s)
  bc:	21 96       	adiw	r28, 0x01	; 1
{
	while(*s)
	{
		usart_send(*s);
  be:	0e 94 50 00 	call	0xa0	; 0xa0 <usart_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	8f e9       	ldi	r24, 0x9F	; 159
  c4:	96 e8       	ldi	r25, 0x86	; 134
  c6:	a1 e0       	ldi	r26, 0x01	; 1
  c8:	81 50       	subi	r24, 0x01	; 1
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	a0 40       	sbci	r26, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <str+0x18>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <str+0x22>
  d2:	00 00       	nop
		return UDR;
}

void str(unsigned char *s)
{
	while(*s)
  d4:	89 91       	ld	r24, Y+
  d6:	88 23       	and	r24, r24
  d8:	91 f7       	brne	.-28     	; 0xbe <str+0xe>
	{
		usart_send(*s);
		s++;
		_delay_ms(500);
	}
}	
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <main>:
int main(void)
{
	DDRD=0xfe;
  e0:	8e ef       	ldi	r24, 0xFE	; 254
  e2:	81 bb       	out	0x11, r24	; 17
	unsigned char k;
	usart_int();
  e4:	0e 94 49 00 	call	0x92	; 0x92 <usart_int>
	while(1)
	{
		k= usart_get();
		usart_send(k);
		str(" vipul ");
  e8:	c0 e6       	ldi	r28, 0x60	; 96
  ea:	d0 e0       	ldi	r29, 0x00	; 0
	DDRD=0xfe;
	unsigned char k;
	usart_int();
	while(1)
	{
		k= usart_get();
  ec:	0e 94 54 00 	call	0xa8	; 0xa8 <usart_get>
		usart_send(k);
  f0:	0e 94 50 00 	call	0xa0	; 0xa0 <usart_send>
		str(" vipul ");
  f4:	ce 01       	movw	r24, r28
  f6:	0e 94 58 00 	call	0xb0	; 0xb0 <str>
  fa:	f8 cf       	rjmp	.-16     	; 0xec <main+0xc>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
