
spi_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00000878  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000319  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000008a  00000000  00000000  00000c11  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000291  00000000  00000000  00000c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00000f2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000093  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ec       	ldi	r30, 0xCC	; 204
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#define MOSI 5
#define SCK 7
//#define ss1 PC0
//#define  ss2 PC1
int main(void)
{ DDRB|=((1<<MOSI)|(1<<SCK));
  92:	87 b3       	in	r24, 0x17	; 23
  94:	80 6a       	ori	r24, 0xA0	; 160
  96:	87 bb       	out	0x17, r24	; 23
	//DDRA=0xff;
	DDRC|= ((1<<PC1)|(1<<PC0));
  98:	84 b3       	in	r24, 0x14	; 20
  9a:	83 60       	ori	r24, 0x03	; 3
  9c:	84 bb       	out	0x14, r24	; 20
	SPCR|=((1<<SPE)|(1<<SPR0)|(1<<MSTR));
  9e:	8d b1       	in	r24, 0x0d	; 13
  a0:	81 65       	ori	r24, 0x51	; 81
  a2:	8d b9       	out	0x0d, r24	; 13
    while(1)
    {  PORTC|=(1<<PC0);
		 PORTC&=~(1<<PC1);
		SPDR=0x07;
  a4:	27 e0       	ldi	r18, 0x07	; 7
		while(!(SPSR&(1<<SPIF)));
		PORTA=SPDR;
		PORTC|=(1<<PC1);
		PORTC&=~(1<<PC0);
    SPCR|=(1<<SPE);
	 SPDR=0x6f;
  a6:	9f e6       	ldi	r25, 0x6F	; 111
{ DDRB|=((1<<MOSI)|(1<<SCK));
	//DDRA=0xff;
	DDRC|= ((1<<PC1)|(1<<PC0));
	SPCR|=((1<<SPE)|(1<<SPR0)|(1<<MSTR));
    while(1)
    {  PORTC|=(1<<PC0);
  a8:	a8 9a       	sbi	0x15, 0	; 21
		 PORTC&=~(1<<PC1);
  aa:	a9 98       	cbi	0x15, 1	; 21
		SPDR=0x07;
  ac:	2f b9       	out	0x0f, r18	; 15
		while(!(SPSR&(1<<SPIF)));
  ae:	77 9b       	sbis	0x0e, 7	; 14
  b0:	fe cf       	rjmp	.-4      	; 0xae <main+0x1c>
		PORTA=SPDR;
  b2:	8f b1       	in	r24, 0x0f	; 15
  b4:	8b bb       	out	0x1b, r24	; 27
		PORTC|=(1<<PC1);
  b6:	a9 9a       	sbi	0x15, 1	; 21
		PORTC&=~(1<<PC0);
  b8:	a8 98       	cbi	0x15, 0	; 21
    SPCR|=(1<<SPE);
  ba:	6e 9a       	sbi	0x0d, 6	; 13
	 SPDR=0x6f;
  bc:	9f b9       	out	0x0f, r25	; 15
     while(!(SPSR&(1<<SPIF)));
  be:	77 9b       	sbis	0x0e, 7	; 14
  c0:	fe cf       	rjmp	.-4      	; 0xbe <main+0x2c>
     PORTA=SPDR;
  c2:	8f b1       	in	r24, 0x0f	; 15
  c4:	8b bb       	out	0x1b, r24	; 27
    }
  c6:	f0 cf       	rjmp	.-32     	; 0xa8 <main+0x16>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
