
gsm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  000002f0  00000364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000b20  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000880  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000201  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d8  00000000  00000000  00001621  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  000019fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000154  00000000  00000000  00001b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000209  00000000  00000000  00001c5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ef       	ldi	r30, 0xF0	; 240
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3c       	cpi	r26, 0xC4	; 196
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 ec       	ldi	r26, 0xC4	; 196
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3c       	cpi	r26, 0xC4	; 196
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ca 00 	call	0x194	; 0x194 <main>
  8a:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:



void ADC_init(void)		// Initialization of ADC
{
	ADMUX=(1<<REFS0);	// AVcc with external capacitor at AREF
  92:	80 e4       	ldi	r24, 0x40	; 64
  94:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  96:	87 e8       	ldi	r24, 0x87	; 135
  98:	86 b9       	out	0x06, r24	; 6
	// Enable ADC and set Pre-scaler division factor as 128
}
  9a:	08 95       	ret

0000009c <ADC_read>:

unsigned int ADC_read(unsigned char ch)
{
	ch= ch & 0b00000111;		// channel must be b/w 0 to 7
	ADMUX |= ch;				// selecting channel
  9c:	97 b1       	in	r25, 0x07	; 7
	// Enable ADC and set Pre-scaler division factor as 128
}

unsigned int ADC_read(unsigned char ch)
{
	ch= ch & 0b00000111;		// channel must be b/w 0 to 7
  9e:	87 70       	andi	r24, 0x07	; 7
	ADMUX |= ch;				// selecting channel
  a0:	98 2b       	or	r25, r24
  a2:	97 b9       	out	0x07, r25	; 7
	ADCSRA|=(1<<ADSC);			// start conversion
  a4:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & (1<<ADIF)));	// waiting for ADIF, conversion complete
  a6:	34 9b       	sbis	0x06, 4	; 6
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <ADC_read+0xa>
	ADCSRA|=(1<<ADIF);			// clearing of ADIF, it is done by writing 1 to it
  aa:	34 9a       	sbi	0x06, 4	; 6
	return (ADC);
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	95 b1       	in	r25, 0x05	; 5
}
  b0:	08 95       	ret

000000b2 <usart_init>:


void usart_init()
{
	UCSRB |= (1 << TXEN) | (1 << RXEN);
  b2:	8a b1       	in	r24, 0x0a	; 10
  b4:	88 61       	ori	r24, 0x18	; 24
  b6:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
  b8:	80 b5       	in	r24, 0x20	; 32
  ba:	86 68       	ori	r24, 0x86	; 134
  bc:	80 bd       	out	0x20, r24	; 32
	UBRRL=51;
  be:	83 e3       	ldi	r24, 0x33	; 51
  c0:	89 b9       	out	0x09, r24	; 9
	
}
  c2:	08 95       	ret

000000c4 <usart_putch>:

void usart_putch(unsigned char send)
{
	
	while(!(UCSRA & (1 << UDRE)));
  c4:	5d 9b       	sbis	0x0b, 5	; 11
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <usart_putch>
	UDR = send;
  c8:	8c b9       	out	0x0c, r24	; 12
}
  ca:	08 95       	ret

000000cc <send_str>:
void send_str(unsigned char *str)
{
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	ec 01       	movw	r28, r24
	while (*str!='\0')
  d2:	88 81       	ld	r24, Y
  d4:	88 23       	and	r24, r24
  d6:	31 f0       	breq	.+12     	; 0xe4 <send_str+0x18>
{
	
	while(!(UCSRA & (1 << UDRE)));
	UDR = send;
}
void send_str(unsigned char *str)
  d8:	21 96       	adiw	r28, 0x01	; 1
{
	while (*str!='\0')
	{
		usart_putch(*str++);
  da:	0e 94 62 00 	call	0xc4	; 0xc4 <usart_putch>
	while(!(UCSRA & (1 << UDRE)));
	UDR = send;
}
void send_str(unsigned char *str)
{
	while (*str!='\0')
  de:	89 91       	ld	r24, Y+
  e0:	88 23       	and	r24, r24
  e2:	d9 f7       	brne	.-10     	; 0xda <send_str+0xe>
	{
		usart_putch(*str++);
	}
}
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <usart_getch>:
unsigned int usart_getch()
{
	while ((UCSRA & (1 << RXC)) == 0);				// Do nothing until data have been received and is ready to be read from UDR
  ea:	5f 9b       	sbis	0x0b, 7	; 11
  ec:	fe cf       	rjmp	.-4      	; 0xea <usart_getch>
	return(UDR); // return the byte
  ee:	8c b1       	in	r24, 0x0c	; 12

	//PORTC=UDR;
}
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	08 95       	ret

000000f4 <command>:
	y=cd<<4 & 0xf0;
	command(y);
}
void command(unsigned char c)
{
	data=c;
  f4:	88 bb       	out	0x18, r24	; 24
	data &=~(1<<rs);
  f6:	c0 98       	cbi	0x18, 0	; 24
	data|=(1<<en);
  f8:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	83 ed       	ldi	r24, 0xD3	; 211
  fc:	90 e3       	ldi	r25, 0x30	; 48
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <command+0xa>
 102:	00 c0       	rjmp	.+0      	; 0x104 <command+0x10>
 104:	00 00       	nop
	_delay_ms(50);
	data&=~(1<<en);
 106:	c2 98       	cbi	0x18, 2	; 24
}
 108:	08 95       	ret

0000010a <cmd>:
	cmd(0x06);
	cmd(0x0e);
	cmd(0x80);
}
void cmd(unsigned char cd)
{
 10a:	cf 93       	push	r28
 10c:	c8 2f       	mov	r28, r24
	unsigned char y;
	y=cd & 0xf0;
	command(y);
 10e:	80 7f       	andi	r24, 0xF0	; 240
 110:	0e 94 7a 00 	call	0xf4	; 0xf4 <command>
	y=cd<<4 & 0xf0;
	command(y);
 114:	8c 2f       	mov	r24, r28
 116:	82 95       	swap	r24
 118:	80 7f       	andi	r24, 0xF0	; 240
 11a:	0e 94 7a 00 	call	0xf4	; 0xf4 <command>
}
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <lcd_init>:
}


void lcd_init(void)
{
	cmd(0x02);
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	0e 94 85 00 	call	0x10a	; 0x10a <cmd>
	cmd(0x28);
 128:	88 e2       	ldi	r24, 0x28	; 40
 12a:	0e 94 85 00 	call	0x10a	; 0x10a <cmd>
	cmd(0x01);
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 85 00 	call	0x10a	; 0x10a <cmd>
	cmd(0x06);
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	0e 94 85 00 	call	0x10a	; 0x10a <cmd>
	cmd(0x0e);
 13a:	8e e0       	ldi	r24, 0x0E	; 14
 13c:	0e 94 85 00 	call	0x10a	; 0x10a <cmd>
	cmd(0x80);
 140:	80 e8       	ldi	r24, 0x80	; 128
 142:	0e 94 85 00 	call	0x10a	; 0x10a <cmd>
}
 146:	08 95       	ret

00000148 <display>:
	display(x);
}

void display(unsigned char d)
{
	data=d;
 148:	88 bb       	out	0x18, r24	; 24
	data|=(1<<rs);
 14a:	c0 9a       	sbi	0x18, 0	; 24
	data|=(1<<en);
 14c:	c2 9a       	sbi	0x18, 2	; 24
 14e:	83 ed       	ldi	r24, 0xD3	; 211
 150:	90 e3       	ldi	r25, 0x30	; 48
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <display+0xa>
 156:	00 c0       	rjmp	.+0      	; 0x158 <display+0x10>
 158:	00 00       	nop
	_delay_ms(50);
	data&=~(1<<en);
 15a:	c2 98       	cbi	0x18, 2	; 24
}
 15c:	08 95       	ret

0000015e <dis>:
	_delay_ms(50);
	data&=~(1<<en);
}

void dis(unsigned char ds)
{
 15e:	cf 93       	push	r28
 160:	c8 2f       	mov	r28, r24
	unsigned char x;
	x=ds & 0xf0;
	display(x);
 162:	80 7f       	andi	r24, 0xF0	; 240
 164:	0e 94 a4 00 	call	0x148	; 0x148 <display>
	x=ds<<4 & 0xf0;
	display(x);
 168:	8c 2f       	mov	r24, r28
 16a:	82 95       	swap	r24
 16c:	80 7f       	andi	r24, 0xF0	; 240
 16e:	0e 94 a4 00 	call	0x148	; 0x148 <display>
}
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <print>:
	_delay_ms(50);
	data&=~(1<<en);
}

void print(unsigned char *str)
{
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	ec 01       	movw	r28, r24
	while (!(*str=='\0'))
 17c:	88 81       	ld	r24, Y
 17e:	88 23       	and	r24, r24
 180:	31 f0       	breq	.+12     	; 0x18e <print+0x18>
	data|=(1<<en);
	_delay_ms(50);
	data&=~(1<<en);
}

void print(unsigned char *str)
 182:	21 96       	adiw	r28, 0x01	; 1
{
	while (!(*str=='\0'))
	{
		dis(*str++);
 184:	0e 94 af 00 	call	0x15e	; 0x15e <dis>
	data&=~(1<<en);
}

void print(unsigned char *str)
{
	while (!(*str=='\0'))
 188:	89 91       	ld	r24, Y+
 18a:	88 23       	and	r24, r24
 18c:	d9 f7       	brne	.-10     	; 0x184 <print+0xe>
	{
		dis(*str++);
	}
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <main>:
	//PORTC=UDR;
}

int main(void)
{
	DDRB=0xff; // lcd
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	87 bb       	out	0x17, r24	; 23
	unsigned int value;
	ADC_init();
 198:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>
	usart_init();
 19c:	0e 94 59 00 	call	0xb2	; 0xb2 <usart_init>
	lcd_init();
 1a0:	0e 94 91 00 	call	0x122	; 0x122 <lcd_init>
	print("welcome to gsm");
 1a4:	80 e6       	ldi	r24, 0x60	; 96
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 bb 00 	call	0x176	; 0x176 <print>
	cmd(0xc0);
 1ac:	80 ec       	ldi	r24, 0xC0	; 192
 1ae:	0e 94 85 00 	call	0x10a	; 0x10a <cmd>
	print("based system");
 1b2:	8f e6       	ldi	r24, 0x6F	; 111
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 bb 00 	call	0x176	; 0x176 <print>
 1ba:	8f e9       	ldi	r24, 0x9F	; 159
 1bc:	96 e8       	ldi	r25, 0x86	; 134
 1be:	a1 e0       	ldi	r26, 0x01	; 1
 1c0:	81 50       	subi	r24, 0x01	; 1
 1c2:	90 40       	sbci	r25, 0x00	; 0
 1c4:	a0 40       	sbci	r26, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <main+0x2c>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <main+0x36>
 1ca:	00 00       	nop
	
	_delay_ms(500);
	cmd(0x01);
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 85 00 	call	0x10a	; 0x10a <cmd>
	cmd(0x80);
 1d2:	80 e8       	ldi	r24, 0x80	; 128
 1d4:	0e 94 85 00 	call	0x10a	; 0x10a <cmd>
	while(1)
	{
		value=ADC_read(0);
		if (value>=728)
		{
			print("accident occur!!");
 1d8:	0c e7       	ldi	r16, 0x7C	; 124
 1da:	10 e0       	ldi	r17, 0x00	; 0
			send_str("AT\r");
 1dc:	cd e8       	ldi	r28, 0x8D	; 141
 1de:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_ms(1000);
			send_str("AT\r");
			//send_str("13");
			_delay_ms(1000);
			_delay_ms(1000);
			send_str("AT+CMGF=1\r");
 1e0:	0f 2e       	mov	r0, r31
 1e2:	f1 e9       	ldi	r31, 0x91	; 145
 1e4:	ef 2e       	mov	r14, r31
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	ff 2e       	mov	r15, r31
 1ea:	f0 2d       	mov	r31, r0
			_delay_ms(1000);
			_delay_ms(1000);
			send_str("AT+CMGS=7838621969;\r");
 1ec:	0f 2e       	mov	r0, r31
 1ee:	fc e9       	ldi	r31, 0x9C	; 156
 1f0:	cf 2e       	mov	r12, r31
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	df 2e       	mov	r13, r31
 1f6:	f0 2d       	mov	r31, r0
			_delay_ms(1000);
			_delay_ms(1000);
			send_str("ACCIDENT OCCURED\r");
 1f8:	0f 2e       	mov	r0, r31
 1fa:	f1 eb       	ldi	r31, 0xB1	; 177
 1fc:	af 2e       	mov	r10, r31
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	bf 2e       	mov	r11, r31
 202:	f0 2d       	mov	r31, r0
	cmd(0x01);
	cmd(0x80);
	
	while(1)
	{
		value=ADC_read(0);
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	0e 94 4e 00 	call	0x9c	; 0x9c <ADC_read>
		if (value>=728)
 20a:	a2 e0       	ldi	r26, 0x02	; 2
 20c:	88 3d       	cpi	r24, 0xD8	; 216
 20e:	9a 07       	cpc	r25, r26
 210:	c8 f3       	brcs	.-14     	; 0x204 <main+0x70>
		{
			print("accident occur!!");
 212:	c8 01       	movw	r24, r16
 214:	0e 94 bb 00 	call	0x176	; 0x176 <print>
			send_str("AT\r");
 218:	ce 01       	movw	r24, r28
 21a:	0e 94 66 00 	call	0xcc	; 0xcc <send_str>
 21e:	8f e3       	ldi	r24, 0x3F	; 63
 220:	9d e0       	ldi	r25, 0x0D	; 13
 222:	a3 e0       	ldi	r26, 0x03	; 3
 224:	81 50       	subi	r24, 0x01	; 1
 226:	90 40       	sbci	r25, 0x00	; 0
 228:	a0 40       	sbci	r26, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <main+0x90>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <main+0x9a>
 22e:	00 00       	nop
 230:	8f e3       	ldi	r24, 0x3F	; 63
 232:	9d e0       	ldi	r25, 0x0D	; 13
 234:	a3 e0       	ldi	r26, 0x03	; 3
 236:	81 50       	subi	r24, 0x01	; 1
 238:	90 40       	sbci	r25, 0x00	; 0
 23a:	a0 40       	sbci	r26, 0x00	; 0
 23c:	e1 f7       	brne	.-8      	; 0x236 <main+0xa2>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <main+0xac>
 240:	00 00       	nop
			
			_delay_ms(1000);
			_delay_ms(1000);
			send_str("AT\r");
 242:	ce 01       	movw	r24, r28
 244:	0e 94 66 00 	call	0xcc	; 0xcc <send_str>
 248:	8f e3       	ldi	r24, 0x3F	; 63
 24a:	9d e0       	ldi	r25, 0x0D	; 13
 24c:	a3 e0       	ldi	r26, 0x03	; 3
 24e:	81 50       	subi	r24, 0x01	; 1
 250:	90 40       	sbci	r25, 0x00	; 0
 252:	a0 40       	sbci	r26, 0x00	; 0
 254:	e1 f7       	brne	.-8      	; 0x24e <main+0xba>
 256:	00 c0       	rjmp	.+0      	; 0x258 <main+0xc4>
 258:	00 00       	nop
 25a:	8f e3       	ldi	r24, 0x3F	; 63
 25c:	9d e0       	ldi	r25, 0x0D	; 13
 25e:	a3 e0       	ldi	r26, 0x03	; 3
 260:	81 50       	subi	r24, 0x01	; 1
 262:	90 40       	sbci	r25, 0x00	; 0
 264:	a0 40       	sbci	r26, 0x00	; 0
 266:	e1 f7       	brne	.-8      	; 0x260 <main+0xcc>
 268:	00 c0       	rjmp	.+0      	; 0x26a <main+0xd6>
 26a:	00 00       	nop
			//send_str("13");
			_delay_ms(1000);
			_delay_ms(1000);
			send_str("AT+CMGF=1\r");
 26c:	c7 01       	movw	r24, r14
 26e:	0e 94 66 00 	call	0xcc	; 0xcc <send_str>
 272:	8f e3       	ldi	r24, 0x3F	; 63
 274:	9d e0       	ldi	r25, 0x0D	; 13
 276:	a3 e0       	ldi	r26, 0x03	; 3
 278:	81 50       	subi	r24, 0x01	; 1
 27a:	90 40       	sbci	r25, 0x00	; 0
 27c:	a0 40       	sbci	r26, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <main+0xe4>
 280:	00 c0       	rjmp	.+0      	; 0x282 <main+0xee>
 282:	00 00       	nop
 284:	8f e3       	ldi	r24, 0x3F	; 63
 286:	9d e0       	ldi	r25, 0x0D	; 13
 288:	a3 e0       	ldi	r26, 0x03	; 3
 28a:	81 50       	subi	r24, 0x01	; 1
 28c:	90 40       	sbci	r25, 0x00	; 0
 28e:	a0 40       	sbci	r26, 0x00	; 0
 290:	e1 f7       	brne	.-8      	; 0x28a <main+0xf6>
 292:	00 c0       	rjmp	.+0      	; 0x294 <main+0x100>
 294:	00 00       	nop
			_delay_ms(1000);
			_delay_ms(1000);
			send_str("AT+CMGS=7838621969;\r");
 296:	c6 01       	movw	r24, r12
 298:	0e 94 66 00 	call	0xcc	; 0xcc <send_str>
 29c:	8f e3       	ldi	r24, 0x3F	; 63
 29e:	9d e0       	ldi	r25, 0x0D	; 13
 2a0:	a3 e0       	ldi	r26, 0x03	; 3
 2a2:	81 50       	subi	r24, 0x01	; 1
 2a4:	90 40       	sbci	r25, 0x00	; 0
 2a6:	a0 40       	sbci	r26, 0x00	; 0
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <main+0x10e>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <main+0x118>
 2ac:	00 00       	nop
 2ae:	8f e3       	ldi	r24, 0x3F	; 63
 2b0:	9d e0       	ldi	r25, 0x0D	; 13
 2b2:	a3 e0       	ldi	r26, 0x03	; 3
 2b4:	81 50       	subi	r24, 0x01	; 1
 2b6:	90 40       	sbci	r25, 0x00	; 0
 2b8:	a0 40       	sbci	r26, 0x00	; 0
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <main+0x120>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <main+0x12a>
 2be:	00 00       	nop
			_delay_ms(1000);
			_delay_ms(1000);
			send_str("ACCIDENT OCCURED\r");
 2c0:	c5 01       	movw	r24, r10
 2c2:	0e 94 66 00 	call	0xcc	; 0xcc <send_str>
 2c6:	af e4       	ldi	r26, 0x4F	; 79
 2c8:	b3 ec       	ldi	r27, 0xC3	; 195
 2ca:	11 97       	sbiw	r26, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <main+0x136>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <main+0x13c>
 2d0:	00 00       	nop
			_delay_ms(200);
			usart_putch(0x1a);
 2d2:	8a e1       	ldi	r24, 0x1A	; 26
 2d4:	0e 94 62 00 	call	0xc4	; 0xc4 <usart_putch>
 2d8:	8f e3       	ldi	r24, 0x3F	; 63
 2da:	9d e0       	ldi	r25, 0x0D	; 13
 2dc:	a3 e0       	ldi	r26, 0x03	; 3
 2de:	81 50       	subi	r24, 0x01	; 1
 2e0:	90 40       	sbci	r25, 0x00	; 0
 2e2:	a0 40       	sbci	r26, 0x00	; 0
 2e4:	e1 f7       	brne	.-8      	; 0x2de <main+0x14a>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <main+0x154>
 2e8:	00 00       	nop
 2ea:	8c cf       	rjmp	.-232    	; 0x204 <main+0x70>

000002ec <_exit>:
 2ec:	f8 94       	cli

000002ee <__stop_program>:
 2ee:	ff cf       	rjmp	.-2      	; 0x2ee <__stop_program>
