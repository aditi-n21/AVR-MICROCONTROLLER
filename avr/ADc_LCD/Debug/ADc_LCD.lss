
ADc_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000958  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000958  000009cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001638  00000000  00000000  000009dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000057e  00000000  00000000  00002014  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00002598  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000072b  00000000  00000000  00002638  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000184  00000000  00000000  00002d63  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a6  00000000  00000000  00002ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  00003390  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000131  00000000  00000000  000034fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002d0  00000000  00000000  0000362d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 aa 04 	jmp	0x954	; 0x954 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
void lcd_data1(unsigned char);
void lcd_str(unsigned char *);
void character(void);

int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x6>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
   	unsigned int value;
	   unsigned char i;
	DDRD=0xFF;
  9c:	81 e3       	ldi	r24, 0x31	; 49
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	fc 01       	movw	r30, r24
  a4:	20 83       	st	Z, r18
	lcd_init();
  a6:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_init>
	ADC_init();	
  aa:	0e 94 73 00 	call	0xe6	; 0xe6 <ADC_init>
	lcd_str("TEMP IS...");
  ae:	80 e6       	ldi	r24, 0x60	; 96
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 de 02 	call	0x5bc	; 0x5bc <lcd_str>
lcd_cmd1(0xca);
  b6:	8a ec       	ldi	r24, 0xCA	; 202
  b8:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <lcd_cmd1>
lcd_str(" 'C");
  bc:	8b e6       	ldi	r24, 0x6B	; 107
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 de 02 	call	0x5bc	; 0x5bc <lcd_str>
	
	while(1)
	{
	value=ADC_read(5);
  c4:	85 e0       	ldi	r24, 0x05	; 5
  c6:	0e 94 8c 00 	call	0x118	; 0x118 <ADC_read>
  ca:	9a 83       	std	Y+2, r25	; 0x02
  cc:	89 83       	std	Y+1, r24	; 0x01
	value=value/2;
  ce:	89 81       	ldd	r24, Y+1	; 0x01
  d0:	9a 81       	ldd	r25, Y+2	; 0x02
  d2:	96 95       	lsr	r25
  d4:	87 95       	ror	r24
  d6:	9a 83       	std	Y+2, r25	; 0x02
  d8:	89 83       	std	Y+1, r24	; 0x01
		adc_conversion(value,0xc9);		
  da:	89 81       	ldd	r24, Y+1	; 0x01
  dc:	9a 81       	ldd	r25, Y+2	; 0x02
  de:	69 ec       	ldi	r22, 0xC9	; 201
  e0:	0e 94 c5 00 	call	0x18a	; 0x18a <adc_conversion>
	}
  e4:	ef cf       	rjmp	.-34     	; 0xc4 <main+0x32>

000000e6 <ADC_init>:
}		
void ADC_init(void)		// Initialization of ADC
{
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
	ADMUX|=(1<<REFS0)|(1<<REFS1);	// AVcc with external capacitor at AREF
  ee:	87 e2       	ldi	r24, 0x27	; 39
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	27 e2       	ldi	r18, 0x27	; 39
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	f9 01       	movw	r30, r18
  f8:	20 81       	ld	r18, Z
  fa:	20 6c       	ori	r18, 0xC0	; 192
  fc:	fc 01       	movw	r30, r24
  fe:	20 83       	st	Z, r18
	ADCSRA|=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);	
 100:	86 e2       	ldi	r24, 0x26	; 38
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	26 e2       	ldi	r18, 0x26	; 38
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	f9 01       	movw	r30, r18
 10a:	20 81       	ld	r18, Z
 10c:	27 68       	ori	r18, 0x87	; 135
 10e:	fc 01       	movw	r30, r24
 110:	20 83       	st	Z, r18
						// Enable ADC and set Prescaler division factor as 128
}
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <ADC_read>:
 
unsigned int ADC_read(unsigned char ch)
{
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	0f 92       	push	r0
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
 122:	89 83       	std	Y+1, r24	; 0x01
	ch= ch & 0b00000111;		// channel must be b/w 0 to 7
 124:	89 81       	ldd	r24, Y+1	; 0x01
 126:	87 70       	andi	r24, 0x07	; 7
 128:	89 83       	std	Y+1, r24	; 0x01
	ADMUX |= ch;				// selecting channel
 12a:	87 e2       	ldi	r24, 0x27	; 39
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	27 e2       	ldi	r18, 0x27	; 39
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	f9 01       	movw	r30, r18
 134:	30 81       	ld	r19, Z
 136:	29 81       	ldd	r18, Y+1	; 0x01
 138:	23 2b       	or	r18, r19
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
 
	ADCSRA|=(1<<ADSC);			// start conversion
 13e:	86 e2       	ldi	r24, 0x26	; 38
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	26 e2       	ldi	r18, 0x26	; 38
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	f9 01       	movw	r30, r18
 148:	20 81       	ld	r18, Z
 14a:	20 64       	ori	r18, 0x40	; 64
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18
	while((ADCSRA & (1<<ADIF))==0);	// waiting for ADIF, conversion complete
 150:	00 00       	nop
 152:	86 e2       	ldi	r24, 0x26	; 38
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	fc 01       	movw	r30, r24
 158:	80 81       	ld	r24, Z
 15a:	88 2f       	mov	r24, r24
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	80 71       	andi	r24, 0x10	; 16
 160:	90 70       	andi	r25, 0x00	; 0
 162:	00 97       	sbiw	r24, 0x00	; 0
 164:	b1 f3       	breq	.-20     	; 0x152 <ADC_read+0x3a>
	ADCSRA|=(1<<ADIF);			// clearing of ADIF, it is done by writing 1 to it
 166:	86 e2       	ldi	r24, 0x26	; 38
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	26 e2       	ldi	r18, 0x26	; 38
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	f9 01       	movw	r30, r18
 170:	20 81       	ld	r18, Z
 172:	20 61       	ori	r18, 0x10	; 16
 174:	fc 01       	movw	r30, r24
 176:	20 83       	st	Z, r18
   	   return (ADC);
 178:	84 e2       	ldi	r24, 0x24	; 36
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	fc 01       	movw	r30, r24
 17e:	80 81       	ld	r24, Z
 180:	91 81       	ldd	r25, Z+1	; 0x01
}
 182:	0f 90       	pop	r0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <adc_conversion>:

void adc_conversion(unsigned int adc_out,unsigned char position)  
{
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	cd b7       	in	r28, 0x3d	; 61
 190:	de b7       	in	r29, 0x3e	; 62
 192:	27 97       	sbiw	r28, 0x07	; 7
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	f8 94       	cli
 198:	de bf       	out	0x3e, r29	; 62
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	cd bf       	out	0x3d, r28	; 61
 19e:	9e 83       	std	Y+6, r25	; 0x06
 1a0:	8d 83       	std	Y+5, r24	; 0x05
 1a2:	6f 83       	std	Y+7, r22	; 0x07
	unsigned int adc_out1;
	int i=0;
 1a4:	1a 82       	std	Y+2, r1	; 0x02
 1a6:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<=1;i++)
 1a8:	1a 82       	std	Y+2, r1	; 0x02
 1aa:	19 82       	std	Y+1, r1	; 0x01
 1ac:	22 c0       	rjmp	.+68     	; 0x1f2 <adc_conversion+0x68>
	{
		adc_out1=adc_out%10;
 1ae:	8d 81       	ldd	r24, Y+5	; 0x05
 1b0:	9e 81       	ldd	r25, Y+6	; 0x06
 1b2:	2a e0       	ldi	r18, 0x0A	; 10
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	b9 01       	movw	r22, r18
 1b8:	0e 94 96 04 	call	0x92c	; 0x92c <__udivmodhi4>
 1bc:	9c 83       	std	Y+4, r25	; 0x04
 1be:	8b 83       	std	Y+3, r24	; 0x03
		adc_out=adc_out/10;
 1c0:	8d 81       	ldd	r24, Y+5	; 0x05
 1c2:	9e 81       	ldd	r25, Y+6	; 0x06
 1c4:	2a e0       	ldi	r18, 0x0A	; 10
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	b9 01       	movw	r22, r18
 1ca:	0e 94 96 04 	call	0x92c	; 0x92c <__udivmodhi4>
 1ce:	9b 01       	movw	r18, r22
 1d0:	3e 83       	std	Y+6, r19	; 0x06
 1d2:	2d 83       	std	Y+5, r18	; 0x05
		lcd_cmd1(position);
 1d4:	8f 81       	ldd	r24, Y+7	; 0x07
 1d6:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <lcd_cmd1>
		lcd_data1(48+adc_out1);
 1da:	8b 81       	ldd	r24, Y+3	; 0x03
 1dc:	80 5d       	subi	r24, 0xD0	; 208
 1de:	0e 94 c0 02 	call	0x580	; 0x580 <lcd_data1>
		position--;
 1e2:	8f 81       	ldd	r24, Y+7	; 0x07
 1e4:	81 50       	subi	r24, 0x01	; 1
 1e6:	8f 83       	std	Y+7, r24	; 0x07

void adc_conversion(unsigned int adc_out,unsigned char position)  
{
	unsigned int adc_out1;
	int i=0;
	for(i=0;i<=1;i++)
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
 1ea:	9a 81       	ldd	r25, Y+2	; 0x02
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	9a 83       	std	Y+2, r25	; 0x02
 1f0:	89 83       	std	Y+1, r24	; 0x01
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	9a 81       	ldd	r25, Y+2	; 0x02
 1f6:	82 30       	cpi	r24, 0x02	; 2
 1f8:	91 05       	cpc	r25, r1
 1fa:	cc f2       	brlt	.-78     	; 0x1ae <adc_conversion+0x24>
		adc_out=adc_out/10;
		lcd_cmd1(position);
		lcd_data1(48+adc_out1);
		position--;
	}
}
 1fc:	27 96       	adiw	r28, 0x07	; 7
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	de bf       	out	0x3e, r29	; 62
 204:	0f be       	out	0x3f, r0	; 63
 206:	cd bf       	out	0x3d, r28	; 61
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <lcd_init>:

void lcd_init(void)
{
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
	lcd_cmd1(0x02);
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <lcd_cmd1>
	lcd_cmd1(0x28);
 21c:	88 e2       	ldi	r24, 0x28	; 40
 21e:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <lcd_cmd1>
	lcd_cmd1(0x01);
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <lcd_cmd1>
	lcd_cmd1(0x06);
 228:	86 e0       	ldi	r24, 0x06	; 6
 22a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <lcd_cmd1>
	lcd_cmd1(0x0e);
 22e:	8e e0       	ldi	r24, 0x0E	; 14
 230:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <lcd_cmd1>
	lcd_cmd1(0x80);
 234:	80 e8       	ldi	r24, 0x80	; 128
 236:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <lcd_cmd1>
	}
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <lcd_cmd>:
void lcd_cmd(unsigned char value)
{
 240:	0f 93       	push	r16
 242:	1f 93       	push	r17
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
 24c:	2f 97       	sbiw	r28, 0x0f	; 15
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	f8 94       	cli
 252:	de bf       	out	0x3e, r29	; 62
 254:	0f be       	out	0x3f, r0	; 63
 256:	cd bf       	out	0x3d, r28	; 61
 258:	8f 87       	std	Y+15, r24	; 0x0f
	LCD=value;
 25a:	82 e3       	ldi	r24, 0x32	; 50
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	2f 85       	ldd	r18, Y+15	; 0x0f
 260:	fc 01       	movw	r30, r24
 262:	20 83       	st	Z, r18
	LCD&=~(1<<rs);
 264:	82 e3       	ldi	r24, 0x32	; 50
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	22 e3       	ldi	r18, 0x32	; 50
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	f9 01       	movw	r30, r18
 26e:	20 81       	ld	r18, Z
 270:	2e 7f       	andi	r18, 0xFE	; 254
 272:	fc 01       	movw	r30, r24
 274:	20 83       	st	Z, r18
	LCD&=~(1<<rw);
 276:	82 e3       	ldi	r24, 0x32	; 50
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	22 e3       	ldi	r18, 0x32	; 50
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	f9 01       	movw	r30, r18
 280:	20 81       	ld	r18, Z
 282:	2d 7f       	andi	r18, 0xFD	; 253
 284:	fc 01       	movw	r30, r24
 286:	20 83       	st	Z, r18
	LCD|=(1<<en);
 288:	82 e3       	ldi	r24, 0x32	; 50
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	22 e3       	ldi	r18, 0x32	; 50
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	f9 01       	movw	r30, r18
 292:	20 81       	ld	r18, Z
 294:	24 60       	ori	r18, 0x04	; 4
 296:	fc 01       	movw	r30, r24
 298:	20 83       	st	Z, r18
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	a0 e2       	ldi	r26, 0x20	; 32
 2a0:	b1 e4       	ldi	r27, 0x41	; 65
 2a2:	89 83       	std	Y+1, r24	; 0x01
 2a4:	9a 83       	std	Y+2, r25	; 0x02
 2a6:	ab 83       	std	Y+3, r26	; 0x03
 2a8:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 2aa:	69 81       	ldd	r22, Y+1	; 0x01
 2ac:	7a 81       	ldd	r23, Y+2	; 0x02
 2ae:	8b 81       	ldd	r24, Y+3	; 0x03
 2b0:	9c 81       	ldd	r25, Y+4	; 0x04
 2b2:	20 e0       	ldi	r18, 0x00	; 0
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	4a e7       	ldi	r20, 0x7A	; 122
 2b8:	53 e4       	ldi	r21, 0x43	; 67
 2ba:	0e 94 0b 04 	call	0x816	; 0x816 <__mulsf3>
 2be:	dc 01       	movw	r26, r24
 2c0:	cb 01       	movw	r24, r22
 2c2:	8d 83       	std	Y+5, r24	; 0x05
 2c4:	9e 83       	std	Y+6, r25	; 0x06
 2c6:	af 83       	std	Y+7, r26	; 0x07
 2c8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 2ca:	11 e0       	ldi	r17, 0x01	; 1
 2cc:	6d 81       	ldd	r22, Y+5	; 0x05
 2ce:	7e 81       	ldd	r23, Y+6	; 0x06
 2d0:	8f 81       	ldd	r24, Y+7	; 0x07
 2d2:	98 85       	ldd	r25, Y+8	; 0x08
 2d4:	20 e0       	ldi	r18, 0x00	; 0
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	40 e8       	ldi	r20, 0x80	; 128
 2da:	5f e3       	ldi	r21, 0x3F	; 63
 2dc:	0e 94 8a 03 	call	0x714	; 0x714 <__cmpsf2>
 2e0:	88 23       	and	r24, r24
 2e2:	0c f0       	brlt	.+2      	; 0x2e6 <lcd_cmd+0xa6>
 2e4:	10 e0       	ldi	r17, 0x00	; 0
 2e6:	11 23       	and	r17, r17
 2e8:	29 f0       	breq	.+10     	; 0x2f4 <lcd_cmd+0xb4>
		__ticks = 1;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	9a 87       	std	Y+10, r25	; 0x0a
 2f0:	89 87       	std	Y+9, r24	; 0x09
 2f2:	46 c0       	rjmp	.+140    	; 0x380 <lcd_cmd+0x140>
	else if (__tmp > 65535)
 2f4:	11 e0       	ldi	r17, 0x01	; 1
 2f6:	6d 81       	ldd	r22, Y+5	; 0x05
 2f8:	7e 81       	ldd	r23, Y+6	; 0x06
 2fa:	8f 81       	ldd	r24, Y+7	; 0x07
 2fc:	98 85       	ldd	r25, Y+8	; 0x08
 2fe:	20 e0       	ldi	r18, 0x00	; 0
 300:	3f ef       	ldi	r19, 0xFF	; 255
 302:	4f e7       	ldi	r20, 0x7F	; 127
 304:	57 e4       	ldi	r21, 0x47	; 71
 306:	0e 94 07 04 	call	0x80e	; 0x80e <__gesf2>
 30a:	18 16       	cp	r1, r24
 30c:	0c f0       	brlt	.+2      	; 0x310 <lcd_cmd+0xd0>
 30e:	10 e0       	ldi	r17, 0x00	; 0
 310:	11 23       	and	r17, r17
 312:	61 f1       	breq	.+88     	; 0x36c <lcd_cmd+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 314:	69 81       	ldd	r22, Y+1	; 0x01
 316:	7a 81       	ldd	r23, Y+2	; 0x02
 318:	8b 81       	ldd	r24, Y+3	; 0x03
 31a:	9c 81       	ldd	r25, Y+4	; 0x04
 31c:	20 e0       	ldi	r18, 0x00	; 0
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	40 e2       	ldi	r20, 0x20	; 32
 322:	51 e4       	ldi	r21, 0x41	; 65
 324:	0e 94 0b 04 	call	0x816	; 0x816 <__mulsf3>
 328:	dc 01       	movw	r26, r24
 32a:	cb 01       	movw	r24, r22
 32c:	bc 01       	movw	r22, r24
 32e:	cd 01       	movw	r24, r26
 330:	0e 94 8e 03 	call	0x71c	; 0x71c <__fixunssfsi>
 334:	dc 01       	movw	r26, r24
 336:	cb 01       	movw	r24, r22
 338:	9a 87       	std	Y+10, r25	; 0x0a
 33a:	89 87       	std	Y+9, r24	; 0x09
 33c:	12 c0       	rjmp	.+36     	; 0x362 <lcd_cmd+0x122>
 33e:	89 e1       	ldi	r24, 0x19	; 25
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	9c 87       	std	Y+12, r25	; 0x0c
 344:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 346:	8b 85       	ldd	r24, Y+11	; 0x0b
 348:	9c 85       	ldd	r25, Y+12	; 0x0c
 34a:	8c 01       	movw	r16, r24
 34c:	c8 01       	movw	r24, r16
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <lcd_cmd+0x10e>
 352:	8c 01       	movw	r16, r24
 354:	1c 87       	std	Y+12, r17	; 0x0c
 356:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 358:	89 85       	ldd	r24, Y+9	; 0x09
 35a:	9a 85       	ldd	r25, Y+10	; 0x0a
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	9a 87       	std	Y+10, r25	; 0x0a
 360:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 362:	89 85       	ldd	r24, Y+9	; 0x09
 364:	9a 85       	ldd	r25, Y+10	; 0x0a
 366:	00 97       	sbiw	r24, 0x00	; 0
 368:	51 f7       	brne	.-44     	; 0x33e <lcd_cmd+0xfe>
 36a:	17 c0       	rjmp	.+46     	; 0x39a <lcd_cmd+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 36c:	6d 81       	ldd	r22, Y+5	; 0x05
 36e:	7e 81       	ldd	r23, Y+6	; 0x06
 370:	8f 81       	ldd	r24, Y+7	; 0x07
 372:	98 85       	ldd	r25, Y+8	; 0x08
 374:	0e 94 8e 03 	call	0x71c	; 0x71c <__fixunssfsi>
 378:	dc 01       	movw	r26, r24
 37a:	cb 01       	movw	r24, r22
 37c:	9a 87       	std	Y+10, r25	; 0x0a
 37e:	89 87       	std	Y+9, r24	; 0x09
 380:	89 85       	ldd	r24, Y+9	; 0x09
 382:	9a 85       	ldd	r25, Y+10	; 0x0a
 384:	9e 87       	std	Y+14, r25	; 0x0e
 386:	8d 87       	std	Y+13, r24	; 0x0d
 388:	8d 85       	ldd	r24, Y+13	; 0x0d
 38a:	9e 85       	ldd	r25, Y+14	; 0x0e
 38c:	8c 01       	movw	r16, r24
 38e:	f8 01       	movw	r30, r16
 390:	31 97       	sbiw	r30, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <lcd_cmd+0x150>
 394:	8f 01       	movw	r16, r30
 396:	1e 87       	std	Y+14, r17	; 0x0e
 398:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(10);
	LCD&=~(1<<en);
 39a:	82 e3       	ldi	r24, 0x32	; 50
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	22 e3       	ldi	r18, 0x32	; 50
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	f9 01       	movw	r30, r18
 3a4:	20 81       	ld	r18, Z
 3a6:	2b 7f       	andi	r18, 0xFB	; 251
 3a8:	fc 01       	movw	r30, r24
 3aa:	20 83       	st	Z, r18
}
 3ac:	2f 96       	adiw	r28, 0x0f	; 15
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	f8 94       	cli
 3b2:	de bf       	out	0x3e, r29	; 62
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	cd bf       	out	0x3d, r28	; 61
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	1f 91       	pop	r17
 3be:	0f 91       	pop	r16
 3c0:	08 95       	ret

000003c2 <lcd_cmd1>:
void lcd_cmd1(unsigned char value)
{
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	00 d0       	rcall	.+0      	; 0x3c8 <lcd_cmd1+0x6>
 3c8:	cd b7       	in	r28, 0x3d	; 61
 3ca:	de b7       	in	r29, 0x3e	; 62
 3cc:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char cd1;
	cd1=value & 0xf0;
 3ce:	8a 81       	ldd	r24, Y+2	; 0x02
 3d0:	80 7f       	andi	r24, 0xF0	; 240
 3d2:	89 83       	std	Y+1, r24	; 0x01
	lcd_cmd(cd1);
 3d4:	89 81       	ldd	r24, Y+1	; 0x01
 3d6:	0e 94 20 01 	call	0x240	; 0x240 <lcd_cmd>
	cd1=(value<<4) & 0xf0;
 3da:	8a 81       	ldd	r24, Y+2	; 0x02
 3dc:	88 2f       	mov	r24, r24
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	82 95       	swap	r24
 3e2:	92 95       	swap	r25
 3e4:	90 7f       	andi	r25, 0xF0	; 240
 3e6:	98 27       	eor	r25, r24
 3e8:	80 7f       	andi	r24, 0xF0	; 240
 3ea:	98 27       	eor	r25, r24
 3ec:	89 83       	std	Y+1, r24	; 0x01
	lcd_cmd(cd1);
 3ee:	89 81       	ldd	r24, Y+1	; 0x01
 3f0:	0e 94 20 01 	call	0x240	; 0x240 <lcd_cmd>
}
 3f4:	0f 90       	pop	r0
 3f6:	0f 90       	pop	r0
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	08 95       	ret

000003fe <lcd_data>:

void lcd_data(unsigned char value)
{
 3fe:	0f 93       	push	r16
 400:	1f 93       	push	r17
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	cd b7       	in	r28, 0x3d	; 61
 408:	de b7       	in	r29, 0x3e	; 62
 40a:	2f 97       	sbiw	r28, 0x0f	; 15
 40c:	0f b6       	in	r0, 0x3f	; 63
 40e:	f8 94       	cli
 410:	de bf       	out	0x3e, r29	; 62
 412:	0f be       	out	0x3f, r0	; 63
 414:	cd bf       	out	0x3d, r28	; 61
 416:	8f 87       	std	Y+15, r24	; 0x0f
	LCD=value;
 418:	82 e3       	ldi	r24, 0x32	; 50
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	2f 85       	ldd	r18, Y+15	; 0x0f
 41e:	fc 01       	movw	r30, r24
 420:	20 83       	st	Z, r18
	LCD|=(1<<rs);
 422:	82 e3       	ldi	r24, 0x32	; 50
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	22 e3       	ldi	r18, 0x32	; 50
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	f9 01       	movw	r30, r18
 42c:	20 81       	ld	r18, Z
 42e:	21 60       	ori	r18, 0x01	; 1
 430:	fc 01       	movw	r30, r24
 432:	20 83       	st	Z, r18
	LCD&=~(1<<rw);
 434:	82 e3       	ldi	r24, 0x32	; 50
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	22 e3       	ldi	r18, 0x32	; 50
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	f9 01       	movw	r30, r18
 43e:	20 81       	ld	r18, Z
 440:	2d 7f       	andi	r18, 0xFD	; 253
 442:	fc 01       	movw	r30, r24
 444:	20 83       	st	Z, r18
	LCD|=(1<<en);
 446:	82 e3       	ldi	r24, 0x32	; 50
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	22 e3       	ldi	r18, 0x32	; 50
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	f9 01       	movw	r30, r18
 450:	20 81       	ld	r18, Z
 452:	24 60       	ori	r18, 0x04	; 4
 454:	fc 01       	movw	r30, r24
 456:	20 83       	st	Z, r18
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	a0 e2       	ldi	r26, 0x20	; 32
 45e:	b1 e4       	ldi	r27, 0x41	; 65
 460:	89 83       	std	Y+1, r24	; 0x01
 462:	9a 83       	std	Y+2, r25	; 0x02
 464:	ab 83       	std	Y+3, r26	; 0x03
 466:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 468:	69 81       	ldd	r22, Y+1	; 0x01
 46a:	7a 81       	ldd	r23, Y+2	; 0x02
 46c:	8b 81       	ldd	r24, Y+3	; 0x03
 46e:	9c 81       	ldd	r25, Y+4	; 0x04
 470:	20 e0       	ldi	r18, 0x00	; 0
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	4a e7       	ldi	r20, 0x7A	; 122
 476:	53 e4       	ldi	r21, 0x43	; 67
 478:	0e 94 0b 04 	call	0x816	; 0x816 <__mulsf3>
 47c:	dc 01       	movw	r26, r24
 47e:	cb 01       	movw	r24, r22
 480:	8d 83       	std	Y+5, r24	; 0x05
 482:	9e 83       	std	Y+6, r25	; 0x06
 484:	af 83       	std	Y+7, r26	; 0x07
 486:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 488:	11 e0       	ldi	r17, 0x01	; 1
 48a:	6d 81       	ldd	r22, Y+5	; 0x05
 48c:	7e 81       	ldd	r23, Y+6	; 0x06
 48e:	8f 81       	ldd	r24, Y+7	; 0x07
 490:	98 85       	ldd	r25, Y+8	; 0x08
 492:	20 e0       	ldi	r18, 0x00	; 0
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	40 e8       	ldi	r20, 0x80	; 128
 498:	5f e3       	ldi	r21, 0x3F	; 63
 49a:	0e 94 8a 03 	call	0x714	; 0x714 <__cmpsf2>
 49e:	88 23       	and	r24, r24
 4a0:	0c f0       	brlt	.+2      	; 0x4a4 <__stack+0x45>
 4a2:	10 e0       	ldi	r17, 0x00	; 0
 4a4:	11 23       	and	r17, r17
 4a6:	29 f0       	breq	.+10     	; 0x4b2 <__stack+0x53>
		__ticks = 1;
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	9a 87       	std	Y+10, r25	; 0x0a
 4ae:	89 87       	std	Y+9, r24	; 0x09
 4b0:	46 c0       	rjmp	.+140    	; 0x53e <__stack+0xdf>
	else if (__tmp > 65535)
 4b2:	11 e0       	ldi	r17, 0x01	; 1
 4b4:	6d 81       	ldd	r22, Y+5	; 0x05
 4b6:	7e 81       	ldd	r23, Y+6	; 0x06
 4b8:	8f 81       	ldd	r24, Y+7	; 0x07
 4ba:	98 85       	ldd	r25, Y+8	; 0x08
 4bc:	20 e0       	ldi	r18, 0x00	; 0
 4be:	3f ef       	ldi	r19, 0xFF	; 255
 4c0:	4f e7       	ldi	r20, 0x7F	; 127
 4c2:	57 e4       	ldi	r21, 0x47	; 71
 4c4:	0e 94 07 04 	call	0x80e	; 0x80e <__gesf2>
 4c8:	18 16       	cp	r1, r24
 4ca:	0c f0       	brlt	.+2      	; 0x4ce <__stack+0x6f>
 4cc:	10 e0       	ldi	r17, 0x00	; 0
 4ce:	11 23       	and	r17, r17
 4d0:	61 f1       	breq	.+88     	; 0x52a <__stack+0xcb>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4d2:	69 81       	ldd	r22, Y+1	; 0x01
 4d4:	7a 81       	ldd	r23, Y+2	; 0x02
 4d6:	8b 81       	ldd	r24, Y+3	; 0x03
 4d8:	9c 81       	ldd	r25, Y+4	; 0x04
 4da:	20 e0       	ldi	r18, 0x00	; 0
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	40 e2       	ldi	r20, 0x20	; 32
 4e0:	51 e4       	ldi	r21, 0x41	; 65
 4e2:	0e 94 0b 04 	call	0x816	; 0x816 <__mulsf3>
 4e6:	dc 01       	movw	r26, r24
 4e8:	cb 01       	movw	r24, r22
 4ea:	bc 01       	movw	r22, r24
 4ec:	cd 01       	movw	r24, r26
 4ee:	0e 94 8e 03 	call	0x71c	; 0x71c <__fixunssfsi>
 4f2:	dc 01       	movw	r26, r24
 4f4:	cb 01       	movw	r24, r22
 4f6:	9a 87       	std	Y+10, r25	; 0x0a
 4f8:	89 87       	std	Y+9, r24	; 0x09
 4fa:	12 c0       	rjmp	.+36     	; 0x520 <__stack+0xc1>
 4fc:	89 e1       	ldi	r24, 0x19	; 25
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	9c 87       	std	Y+12, r25	; 0x0c
 502:	8b 87       	std	Y+11, r24	; 0x0b
 504:	8b 85       	ldd	r24, Y+11	; 0x0b
 506:	9c 85       	ldd	r25, Y+12	; 0x0c
 508:	8c 01       	movw	r16, r24
 50a:	c8 01       	movw	r24, r16
 50c:	01 97       	sbiw	r24, 0x01	; 1
 50e:	f1 f7       	brne	.-4      	; 0x50c <__stack+0xad>
 510:	8c 01       	movw	r16, r24
 512:	1c 87       	std	Y+12, r17	; 0x0c
 514:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 516:	89 85       	ldd	r24, Y+9	; 0x09
 518:	9a 85       	ldd	r25, Y+10	; 0x0a
 51a:	01 97       	sbiw	r24, 0x01	; 1
 51c:	9a 87       	std	Y+10, r25	; 0x0a
 51e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 520:	89 85       	ldd	r24, Y+9	; 0x09
 522:	9a 85       	ldd	r25, Y+10	; 0x0a
 524:	00 97       	sbiw	r24, 0x00	; 0
 526:	51 f7       	brne	.-44     	; 0x4fc <__stack+0x9d>
 528:	17 c0       	rjmp	.+46     	; 0x558 <__stack+0xf9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 52a:	6d 81       	ldd	r22, Y+5	; 0x05
 52c:	7e 81       	ldd	r23, Y+6	; 0x06
 52e:	8f 81       	ldd	r24, Y+7	; 0x07
 530:	98 85       	ldd	r25, Y+8	; 0x08
 532:	0e 94 8e 03 	call	0x71c	; 0x71c <__fixunssfsi>
 536:	dc 01       	movw	r26, r24
 538:	cb 01       	movw	r24, r22
 53a:	9a 87       	std	Y+10, r25	; 0x0a
 53c:	89 87       	std	Y+9, r24	; 0x09
 53e:	89 85       	ldd	r24, Y+9	; 0x09
 540:	9a 85       	ldd	r25, Y+10	; 0x0a
 542:	9e 87       	std	Y+14, r25	; 0x0e
 544:	8d 87       	std	Y+13, r24	; 0x0d
 546:	8d 85       	ldd	r24, Y+13	; 0x0d
 548:	9e 85       	ldd	r25, Y+14	; 0x0e
 54a:	8c 01       	movw	r16, r24
 54c:	f8 01       	movw	r30, r16
 54e:	31 97       	sbiw	r30, 0x01	; 1
 550:	f1 f7       	brne	.-4      	; 0x54e <__stack+0xef>
 552:	8f 01       	movw	r16, r30
 554:	1e 87       	std	Y+14, r17	; 0x0e
 556:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(10);
	LCD&=~(1<<en);
 558:	82 e3       	ldi	r24, 0x32	; 50
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	22 e3       	ldi	r18, 0x32	; 50
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	f9 01       	movw	r30, r18
 562:	20 81       	ld	r18, Z
 564:	2b 7f       	andi	r18, 0xFB	; 251
 566:	fc 01       	movw	r30, r24
 568:	20 83       	st	Z, r18

}
 56a:	2f 96       	adiw	r28, 0x0f	; 15
 56c:	0f b6       	in	r0, 0x3f	; 63
 56e:	f8 94       	cli
 570:	de bf       	out	0x3e, r29	; 62
 572:	0f be       	out	0x3f, r0	; 63
 574:	cd bf       	out	0x3d, r28	; 61
 576:	df 91       	pop	r29
 578:	cf 91       	pop	r28
 57a:	1f 91       	pop	r17
 57c:	0f 91       	pop	r16
 57e:	08 95       	ret

00000580 <lcd_data1>:
void lcd_data1(unsigned char value)
{
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
 584:	00 d0       	rcall	.+0      	; 0x586 <lcd_data1+0x6>
 586:	cd b7       	in	r28, 0x3d	; 61
 588:	de b7       	in	r29, 0x3e	; 62
 58a:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char cd1;
	cd1=value & 0xf0;
 58c:	8a 81       	ldd	r24, Y+2	; 0x02
 58e:	80 7f       	andi	r24, 0xF0	; 240
 590:	89 83       	std	Y+1, r24	; 0x01
	lcd_data(cd1);
 592:	89 81       	ldd	r24, Y+1	; 0x01
 594:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_data>
		cd1=(value<<4) & 0xf0;
 598:	8a 81       	ldd	r24, Y+2	; 0x02
 59a:	88 2f       	mov	r24, r24
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	82 95       	swap	r24
 5a0:	92 95       	swap	r25
 5a2:	90 7f       	andi	r25, 0xF0	; 240
 5a4:	98 27       	eor	r25, r24
 5a6:	80 7f       	andi	r24, 0xF0	; 240
 5a8:	98 27       	eor	r25, r24
 5aa:	89 83       	std	Y+1, r24	; 0x01
	lcd_data(cd1);
 5ac:	89 81       	ldd	r24, Y+1	; 0x01
 5ae:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_data>
}
 5b2:	0f 90       	pop	r0
 5b4:	0f 90       	pop	r0
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	08 95       	ret

000005bc <lcd_str>:

void lcd_str(unsigned char *s)
{
 5bc:	0f 93       	push	r16
 5be:	1f 93       	push	r17
 5c0:	cf 93       	push	r28
 5c2:	df 93       	push	r29
 5c4:	cd b7       	in	r28, 0x3d	; 61
 5c6:	de b7       	in	r29, 0x3e	; 62
 5c8:	60 97       	sbiw	r28, 0x10	; 16
 5ca:	0f b6       	in	r0, 0x3f	; 63
 5cc:	f8 94       	cli
 5ce:	de bf       	out	0x3e, r29	; 62
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	cd bf       	out	0x3d, r28	; 61
 5d4:	98 8b       	std	Y+16, r25	; 0x10
 5d6:	8f 87       	std	Y+15, r24	; 0x0f
	while(*s)
 5d8:	8b c0       	rjmp	.+278    	; 0x6f0 <lcd_str+0x134>
	{
		lcd_data1(*s);
 5da:	8f 85       	ldd	r24, Y+15	; 0x0f
 5dc:	98 89       	ldd	r25, Y+16	; 0x10
 5de:	fc 01       	movw	r30, r24
 5e0:	80 81       	ld	r24, Z
 5e2:	0e 94 c0 02 	call	0x580	; 0x580 <lcd_data1>
		s++;
 5e6:	8f 85       	ldd	r24, Y+15	; 0x0f
 5e8:	98 89       	ldd	r25, Y+16	; 0x10
 5ea:	01 96       	adiw	r24, 0x01	; 1
 5ec:	98 8b       	std	Y+16, r25	; 0x10
 5ee:	8f 87       	std	Y+15, r24	; 0x0f
 5f0:	80 e0       	ldi	r24, 0x00	; 0
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	a0 e2       	ldi	r26, 0x20	; 32
 5f6:	b1 e4       	ldi	r27, 0x41	; 65
 5f8:	89 83       	std	Y+1, r24	; 0x01
 5fa:	9a 83       	std	Y+2, r25	; 0x02
 5fc:	ab 83       	std	Y+3, r26	; 0x03
 5fe:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 600:	69 81       	ldd	r22, Y+1	; 0x01
 602:	7a 81       	ldd	r23, Y+2	; 0x02
 604:	8b 81       	ldd	r24, Y+3	; 0x03
 606:	9c 81       	ldd	r25, Y+4	; 0x04
 608:	20 e0       	ldi	r18, 0x00	; 0
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	4a e7       	ldi	r20, 0x7A	; 122
 60e:	53 e4       	ldi	r21, 0x43	; 67
 610:	0e 94 0b 04 	call	0x816	; 0x816 <__mulsf3>
 614:	dc 01       	movw	r26, r24
 616:	cb 01       	movw	r24, r22
 618:	8d 83       	std	Y+5, r24	; 0x05
 61a:	9e 83       	std	Y+6, r25	; 0x06
 61c:	af 83       	std	Y+7, r26	; 0x07
 61e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 620:	11 e0       	ldi	r17, 0x01	; 1
 622:	6d 81       	ldd	r22, Y+5	; 0x05
 624:	7e 81       	ldd	r23, Y+6	; 0x06
 626:	8f 81       	ldd	r24, Y+7	; 0x07
 628:	98 85       	ldd	r25, Y+8	; 0x08
 62a:	20 e0       	ldi	r18, 0x00	; 0
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	40 e8       	ldi	r20, 0x80	; 128
 630:	5f e3       	ldi	r21, 0x3F	; 63
 632:	0e 94 8a 03 	call	0x714	; 0x714 <__cmpsf2>
 636:	88 23       	and	r24, r24
 638:	0c f0       	brlt	.+2      	; 0x63c <lcd_str+0x80>
 63a:	10 e0       	ldi	r17, 0x00	; 0
 63c:	11 23       	and	r17, r17
 63e:	29 f0       	breq	.+10     	; 0x64a <lcd_str+0x8e>
		__ticks = 1;
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	9a 87       	std	Y+10, r25	; 0x0a
 646:	89 87       	std	Y+9, r24	; 0x09
 648:	46 c0       	rjmp	.+140    	; 0x6d6 <lcd_str+0x11a>
	else if (__tmp > 65535)
 64a:	11 e0       	ldi	r17, 0x01	; 1
 64c:	6d 81       	ldd	r22, Y+5	; 0x05
 64e:	7e 81       	ldd	r23, Y+6	; 0x06
 650:	8f 81       	ldd	r24, Y+7	; 0x07
 652:	98 85       	ldd	r25, Y+8	; 0x08
 654:	20 e0       	ldi	r18, 0x00	; 0
 656:	3f ef       	ldi	r19, 0xFF	; 255
 658:	4f e7       	ldi	r20, 0x7F	; 127
 65a:	57 e4       	ldi	r21, 0x47	; 71
 65c:	0e 94 07 04 	call	0x80e	; 0x80e <__gesf2>
 660:	18 16       	cp	r1, r24
 662:	0c f0       	brlt	.+2      	; 0x666 <lcd_str+0xaa>
 664:	10 e0       	ldi	r17, 0x00	; 0
 666:	11 23       	and	r17, r17
 668:	61 f1       	breq	.+88     	; 0x6c2 <lcd_str+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 66a:	69 81       	ldd	r22, Y+1	; 0x01
 66c:	7a 81       	ldd	r23, Y+2	; 0x02
 66e:	8b 81       	ldd	r24, Y+3	; 0x03
 670:	9c 81       	ldd	r25, Y+4	; 0x04
 672:	20 e0       	ldi	r18, 0x00	; 0
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	40 e2       	ldi	r20, 0x20	; 32
 678:	51 e4       	ldi	r21, 0x41	; 65
 67a:	0e 94 0b 04 	call	0x816	; 0x816 <__mulsf3>
 67e:	dc 01       	movw	r26, r24
 680:	cb 01       	movw	r24, r22
 682:	bc 01       	movw	r22, r24
 684:	cd 01       	movw	r24, r26
 686:	0e 94 8e 03 	call	0x71c	; 0x71c <__fixunssfsi>
 68a:	dc 01       	movw	r26, r24
 68c:	cb 01       	movw	r24, r22
 68e:	9a 87       	std	Y+10, r25	; 0x0a
 690:	89 87       	std	Y+9, r24	; 0x09
 692:	12 c0       	rjmp	.+36     	; 0x6b8 <lcd_str+0xfc>
 694:	89 e1       	ldi	r24, 0x19	; 25
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	9c 87       	std	Y+12, r25	; 0x0c
 69a:	8b 87       	std	Y+11, r24	; 0x0b
 69c:	8b 85       	ldd	r24, Y+11	; 0x0b
 69e:	9c 85       	ldd	r25, Y+12	; 0x0c
 6a0:	8c 01       	movw	r16, r24
 6a2:	c8 01       	movw	r24, r16
 6a4:	01 97       	sbiw	r24, 0x01	; 1
 6a6:	f1 f7       	brne	.-4      	; 0x6a4 <lcd_str+0xe8>
 6a8:	8c 01       	movw	r16, r24
 6aa:	1c 87       	std	Y+12, r17	; 0x0c
 6ac:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6ae:	89 85       	ldd	r24, Y+9	; 0x09
 6b0:	9a 85       	ldd	r25, Y+10	; 0x0a
 6b2:	01 97       	sbiw	r24, 0x01	; 1
 6b4:	9a 87       	std	Y+10, r25	; 0x0a
 6b6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6b8:	89 85       	ldd	r24, Y+9	; 0x09
 6ba:	9a 85       	ldd	r25, Y+10	; 0x0a
 6bc:	00 97       	sbiw	r24, 0x00	; 0
 6be:	51 f7       	brne	.-44     	; 0x694 <lcd_str+0xd8>
 6c0:	17 c0       	rjmp	.+46     	; 0x6f0 <lcd_str+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 6c2:	6d 81       	ldd	r22, Y+5	; 0x05
 6c4:	7e 81       	ldd	r23, Y+6	; 0x06
 6c6:	8f 81       	ldd	r24, Y+7	; 0x07
 6c8:	98 85       	ldd	r25, Y+8	; 0x08
 6ca:	0e 94 8e 03 	call	0x71c	; 0x71c <__fixunssfsi>
 6ce:	dc 01       	movw	r26, r24
 6d0:	cb 01       	movw	r24, r22
 6d2:	9a 87       	std	Y+10, r25	; 0x0a
 6d4:	89 87       	std	Y+9, r24	; 0x09
 6d6:	89 85       	ldd	r24, Y+9	; 0x09
 6d8:	9a 85       	ldd	r25, Y+10	; 0x0a
 6da:	9e 87       	std	Y+14, r25	; 0x0e
 6dc:	8d 87       	std	Y+13, r24	; 0x0d
 6de:	8d 85       	ldd	r24, Y+13	; 0x0d
 6e0:	9e 85       	ldd	r25, Y+14	; 0x0e
 6e2:	8c 01       	movw	r16, r24
 6e4:	f8 01       	movw	r30, r16
 6e6:	31 97       	sbiw	r30, 0x01	; 1
 6e8:	f1 f7       	brne	.-4      	; 0x6e6 <lcd_str+0x12a>
 6ea:	8f 01       	movw	r16, r30
 6ec:	1e 87       	std	Y+14, r17	; 0x0e
 6ee:	0d 87       	std	Y+13, r16	; 0x0d
	lcd_data(cd1);
}

void lcd_str(unsigned char *s)
{
	while(*s)
 6f0:	8f 85       	ldd	r24, Y+15	; 0x0f
 6f2:	98 89       	ldd	r25, Y+16	; 0x10
 6f4:	fc 01       	movw	r30, r24
 6f6:	80 81       	ld	r24, Z
 6f8:	88 23       	and	r24, r24
 6fa:	09 f0       	breq	.+2      	; 0x6fe <lcd_str+0x142>
 6fc:	6e cf       	rjmp	.-292    	; 0x5da <lcd_str+0x1e>
	{
		lcd_data1(*s);
		s++;
		_delay_ms(10);
	}
}
 6fe:	60 96       	adiw	r28, 0x10	; 16
 700:	0f b6       	in	r0, 0x3f	; 63
 702:	f8 94       	cli
 704:	de bf       	out	0x3e, r29	; 62
 706:	0f be       	out	0x3f, r0	; 63
 708:	cd bf       	out	0x3d, r28	; 61
 70a:	df 91       	pop	r29
 70c:	cf 91       	pop	r28
 70e:	1f 91       	pop	r17
 710:	0f 91       	pop	r16
 712:	08 95       	ret

00000714 <__cmpsf2>:
 714:	2f d0       	rcall	.+94     	; 0x774 <__fp_cmp>
 716:	08 f4       	brcc	.+2      	; 0x71a <__cmpsf2+0x6>
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	08 95       	ret

0000071c <__fixunssfsi>:
 71c:	57 d0       	rcall	.+174    	; 0x7cc <__fp_splitA>
 71e:	88 f0       	brcs	.+34     	; 0x742 <__fixunssfsi+0x26>
 720:	9f 57       	subi	r25, 0x7F	; 127
 722:	90 f0       	brcs	.+36     	; 0x748 <__fixunssfsi+0x2c>
 724:	b9 2f       	mov	r27, r25
 726:	99 27       	eor	r25, r25
 728:	b7 51       	subi	r27, 0x17	; 23
 72a:	a0 f0       	brcs	.+40     	; 0x754 <__fixunssfsi+0x38>
 72c:	d1 f0       	breq	.+52     	; 0x762 <__fixunssfsi+0x46>
 72e:	66 0f       	add	r22, r22
 730:	77 1f       	adc	r23, r23
 732:	88 1f       	adc	r24, r24
 734:	99 1f       	adc	r25, r25
 736:	1a f0       	brmi	.+6      	; 0x73e <__fixunssfsi+0x22>
 738:	ba 95       	dec	r27
 73a:	c9 f7       	brne	.-14     	; 0x72e <__fixunssfsi+0x12>
 73c:	12 c0       	rjmp	.+36     	; 0x762 <__fixunssfsi+0x46>
 73e:	b1 30       	cpi	r27, 0x01	; 1
 740:	81 f0       	breq	.+32     	; 0x762 <__fixunssfsi+0x46>
 742:	5e d0       	rcall	.+188    	; 0x800 <__fp_zero>
 744:	b1 e0       	ldi	r27, 0x01	; 1
 746:	08 95       	ret
 748:	5b c0       	rjmp	.+182    	; 0x800 <__fp_zero>
 74a:	67 2f       	mov	r22, r23
 74c:	78 2f       	mov	r23, r24
 74e:	88 27       	eor	r24, r24
 750:	b8 5f       	subi	r27, 0xF8	; 248
 752:	39 f0       	breq	.+14     	; 0x762 <__fixunssfsi+0x46>
 754:	b9 3f       	cpi	r27, 0xF9	; 249
 756:	cc f3       	brlt	.-14     	; 0x74a <__fixunssfsi+0x2e>
 758:	86 95       	lsr	r24
 75a:	77 95       	ror	r23
 75c:	67 95       	ror	r22
 75e:	b3 95       	inc	r27
 760:	d9 f7       	brne	.-10     	; 0x758 <__fixunssfsi+0x3c>
 762:	3e f4       	brtc	.+14     	; 0x772 <__fixunssfsi+0x56>
 764:	90 95       	com	r25
 766:	80 95       	com	r24
 768:	70 95       	com	r23
 76a:	61 95       	neg	r22
 76c:	7f 4f       	sbci	r23, 0xFF	; 255
 76e:	8f 4f       	sbci	r24, 0xFF	; 255
 770:	9f 4f       	sbci	r25, 0xFF	; 255
 772:	08 95       	ret

00000774 <__fp_cmp>:
 774:	99 0f       	add	r25, r25
 776:	00 08       	sbc	r0, r0
 778:	55 0f       	add	r21, r21
 77a:	aa 0b       	sbc	r26, r26
 77c:	e0 e8       	ldi	r30, 0x80	; 128
 77e:	fe ef       	ldi	r31, 0xFE	; 254
 780:	16 16       	cp	r1, r22
 782:	17 06       	cpc	r1, r23
 784:	e8 07       	cpc	r30, r24
 786:	f9 07       	cpc	r31, r25
 788:	c0 f0       	brcs	.+48     	; 0x7ba <__fp_cmp+0x46>
 78a:	12 16       	cp	r1, r18
 78c:	13 06       	cpc	r1, r19
 78e:	e4 07       	cpc	r30, r20
 790:	f5 07       	cpc	r31, r21
 792:	98 f0       	brcs	.+38     	; 0x7ba <__fp_cmp+0x46>
 794:	62 1b       	sub	r22, r18
 796:	73 0b       	sbc	r23, r19
 798:	84 0b       	sbc	r24, r20
 79a:	95 0b       	sbc	r25, r21
 79c:	39 f4       	brne	.+14     	; 0x7ac <__fp_cmp+0x38>
 79e:	0a 26       	eor	r0, r26
 7a0:	61 f0       	breq	.+24     	; 0x7ba <__fp_cmp+0x46>
 7a2:	23 2b       	or	r18, r19
 7a4:	24 2b       	or	r18, r20
 7a6:	25 2b       	or	r18, r21
 7a8:	21 f4       	brne	.+8      	; 0x7b2 <__fp_cmp+0x3e>
 7aa:	08 95       	ret
 7ac:	0a 26       	eor	r0, r26
 7ae:	09 f4       	brne	.+2      	; 0x7b2 <__fp_cmp+0x3e>
 7b0:	a1 40       	sbci	r26, 0x01	; 1
 7b2:	a6 95       	lsr	r26
 7b4:	8f ef       	ldi	r24, 0xFF	; 255
 7b6:	81 1d       	adc	r24, r1
 7b8:	81 1d       	adc	r24, r1
 7ba:	08 95       	ret

000007bc <__fp_split3>:
 7bc:	57 fd       	sbrc	r21, 7
 7be:	90 58       	subi	r25, 0x80	; 128
 7c0:	44 0f       	add	r20, r20
 7c2:	55 1f       	adc	r21, r21
 7c4:	59 f0       	breq	.+22     	; 0x7dc <__fp_splitA+0x10>
 7c6:	5f 3f       	cpi	r21, 0xFF	; 255
 7c8:	71 f0       	breq	.+28     	; 0x7e6 <__fp_splitA+0x1a>
 7ca:	47 95       	ror	r20

000007cc <__fp_splitA>:
 7cc:	88 0f       	add	r24, r24
 7ce:	97 fb       	bst	r25, 7
 7d0:	99 1f       	adc	r25, r25
 7d2:	61 f0       	breq	.+24     	; 0x7ec <__fp_splitA+0x20>
 7d4:	9f 3f       	cpi	r25, 0xFF	; 255
 7d6:	79 f0       	breq	.+30     	; 0x7f6 <__fp_splitA+0x2a>
 7d8:	87 95       	ror	r24
 7da:	08 95       	ret
 7dc:	12 16       	cp	r1, r18
 7de:	13 06       	cpc	r1, r19
 7e0:	14 06       	cpc	r1, r20
 7e2:	55 1f       	adc	r21, r21
 7e4:	f2 cf       	rjmp	.-28     	; 0x7ca <__fp_split3+0xe>
 7e6:	46 95       	lsr	r20
 7e8:	f1 df       	rcall	.-30     	; 0x7cc <__fp_splitA>
 7ea:	08 c0       	rjmp	.+16     	; 0x7fc <__fp_splitA+0x30>
 7ec:	16 16       	cp	r1, r22
 7ee:	17 06       	cpc	r1, r23
 7f0:	18 06       	cpc	r1, r24
 7f2:	99 1f       	adc	r25, r25
 7f4:	f1 cf       	rjmp	.-30     	; 0x7d8 <__fp_splitA+0xc>
 7f6:	86 95       	lsr	r24
 7f8:	71 05       	cpc	r23, r1
 7fa:	61 05       	cpc	r22, r1
 7fc:	08 94       	sec
 7fe:	08 95       	ret

00000800 <__fp_zero>:
 800:	e8 94       	clt

00000802 <__fp_szero>:
 802:	bb 27       	eor	r27, r27
 804:	66 27       	eor	r22, r22
 806:	77 27       	eor	r23, r23
 808:	cb 01       	movw	r24, r22
 80a:	97 f9       	bld	r25, 7
 80c:	08 95       	ret

0000080e <__gesf2>:
 80e:	b2 df       	rcall	.-156    	; 0x774 <__fp_cmp>
 810:	08 f4       	brcc	.+2      	; 0x814 <__gesf2+0x6>
 812:	8f ef       	ldi	r24, 0xFF	; 255
 814:	08 95       	ret

00000816 <__mulsf3>:
 816:	0b d0       	rcall	.+22     	; 0x82e <__mulsf3x>
 818:	78 c0       	rjmp	.+240    	; 0x90a <__fp_round>
 81a:	69 d0       	rcall	.+210    	; 0x8ee <__fp_pscA>
 81c:	28 f0       	brcs	.+10     	; 0x828 <__mulsf3+0x12>
 81e:	6e d0       	rcall	.+220    	; 0x8fc <__fp_pscB>
 820:	18 f0       	brcs	.+6      	; 0x828 <__mulsf3+0x12>
 822:	95 23       	and	r25, r21
 824:	09 f0       	breq	.+2      	; 0x828 <__mulsf3+0x12>
 826:	5a c0       	rjmp	.+180    	; 0x8dc <__fp_inf>
 828:	5f c0       	rjmp	.+190    	; 0x8e8 <__fp_nan>
 82a:	11 24       	eor	r1, r1
 82c:	ea cf       	rjmp	.-44     	; 0x802 <__fp_szero>

0000082e <__mulsf3x>:
 82e:	c6 df       	rcall	.-116    	; 0x7bc <__fp_split3>
 830:	a0 f3       	brcs	.-24     	; 0x81a <__mulsf3+0x4>

00000832 <__mulsf3_pse>:
 832:	95 9f       	mul	r25, r21
 834:	d1 f3       	breq	.-12     	; 0x82a <__mulsf3+0x14>
 836:	95 0f       	add	r25, r21
 838:	50 e0       	ldi	r21, 0x00	; 0
 83a:	55 1f       	adc	r21, r21
 83c:	62 9f       	mul	r22, r18
 83e:	f0 01       	movw	r30, r0
 840:	72 9f       	mul	r23, r18
 842:	bb 27       	eor	r27, r27
 844:	f0 0d       	add	r31, r0
 846:	b1 1d       	adc	r27, r1
 848:	63 9f       	mul	r22, r19
 84a:	aa 27       	eor	r26, r26
 84c:	f0 0d       	add	r31, r0
 84e:	b1 1d       	adc	r27, r1
 850:	aa 1f       	adc	r26, r26
 852:	64 9f       	mul	r22, r20
 854:	66 27       	eor	r22, r22
 856:	b0 0d       	add	r27, r0
 858:	a1 1d       	adc	r26, r1
 85a:	66 1f       	adc	r22, r22
 85c:	82 9f       	mul	r24, r18
 85e:	22 27       	eor	r18, r18
 860:	b0 0d       	add	r27, r0
 862:	a1 1d       	adc	r26, r1
 864:	62 1f       	adc	r22, r18
 866:	73 9f       	mul	r23, r19
 868:	b0 0d       	add	r27, r0
 86a:	a1 1d       	adc	r26, r1
 86c:	62 1f       	adc	r22, r18
 86e:	83 9f       	mul	r24, r19
 870:	a0 0d       	add	r26, r0
 872:	61 1d       	adc	r22, r1
 874:	22 1f       	adc	r18, r18
 876:	74 9f       	mul	r23, r20
 878:	33 27       	eor	r19, r19
 87a:	a0 0d       	add	r26, r0
 87c:	61 1d       	adc	r22, r1
 87e:	23 1f       	adc	r18, r19
 880:	84 9f       	mul	r24, r20
 882:	60 0d       	add	r22, r0
 884:	21 1d       	adc	r18, r1
 886:	82 2f       	mov	r24, r18
 888:	76 2f       	mov	r23, r22
 88a:	6a 2f       	mov	r22, r26
 88c:	11 24       	eor	r1, r1
 88e:	9f 57       	subi	r25, 0x7F	; 127
 890:	50 40       	sbci	r21, 0x00	; 0
 892:	8a f0       	brmi	.+34     	; 0x8b6 <__mulsf3_pse+0x84>
 894:	e1 f0       	breq	.+56     	; 0x8ce <__mulsf3_pse+0x9c>
 896:	88 23       	and	r24, r24
 898:	4a f0       	brmi	.+18     	; 0x8ac <__mulsf3_pse+0x7a>
 89a:	ee 0f       	add	r30, r30
 89c:	ff 1f       	adc	r31, r31
 89e:	bb 1f       	adc	r27, r27
 8a0:	66 1f       	adc	r22, r22
 8a2:	77 1f       	adc	r23, r23
 8a4:	88 1f       	adc	r24, r24
 8a6:	91 50       	subi	r25, 0x01	; 1
 8a8:	50 40       	sbci	r21, 0x00	; 0
 8aa:	a9 f7       	brne	.-22     	; 0x896 <__mulsf3_pse+0x64>
 8ac:	9e 3f       	cpi	r25, 0xFE	; 254
 8ae:	51 05       	cpc	r21, r1
 8b0:	70 f0       	brcs	.+28     	; 0x8ce <__mulsf3_pse+0x9c>
 8b2:	14 c0       	rjmp	.+40     	; 0x8dc <__fp_inf>
 8b4:	a6 cf       	rjmp	.-180    	; 0x802 <__fp_szero>
 8b6:	5f 3f       	cpi	r21, 0xFF	; 255
 8b8:	ec f3       	brlt	.-6      	; 0x8b4 <__mulsf3_pse+0x82>
 8ba:	98 3e       	cpi	r25, 0xE8	; 232
 8bc:	dc f3       	brlt	.-10     	; 0x8b4 <__mulsf3_pse+0x82>
 8be:	86 95       	lsr	r24
 8c0:	77 95       	ror	r23
 8c2:	67 95       	ror	r22
 8c4:	b7 95       	ror	r27
 8c6:	f7 95       	ror	r31
 8c8:	e7 95       	ror	r30
 8ca:	9f 5f       	subi	r25, 0xFF	; 255
 8cc:	c1 f7       	brne	.-16     	; 0x8be <__mulsf3_pse+0x8c>
 8ce:	fe 2b       	or	r31, r30
 8d0:	88 0f       	add	r24, r24
 8d2:	91 1d       	adc	r25, r1
 8d4:	96 95       	lsr	r25
 8d6:	87 95       	ror	r24
 8d8:	97 f9       	bld	r25, 7
 8da:	08 95       	ret

000008dc <__fp_inf>:
 8dc:	97 f9       	bld	r25, 7
 8de:	9f 67       	ori	r25, 0x7F	; 127
 8e0:	80 e8       	ldi	r24, 0x80	; 128
 8e2:	70 e0       	ldi	r23, 0x00	; 0
 8e4:	60 e0       	ldi	r22, 0x00	; 0
 8e6:	08 95       	ret

000008e8 <__fp_nan>:
 8e8:	9f ef       	ldi	r25, 0xFF	; 255
 8ea:	80 ec       	ldi	r24, 0xC0	; 192
 8ec:	08 95       	ret

000008ee <__fp_pscA>:
 8ee:	00 24       	eor	r0, r0
 8f0:	0a 94       	dec	r0
 8f2:	16 16       	cp	r1, r22
 8f4:	17 06       	cpc	r1, r23
 8f6:	18 06       	cpc	r1, r24
 8f8:	09 06       	cpc	r0, r25
 8fa:	08 95       	ret

000008fc <__fp_pscB>:
 8fc:	00 24       	eor	r0, r0
 8fe:	0a 94       	dec	r0
 900:	12 16       	cp	r1, r18
 902:	13 06       	cpc	r1, r19
 904:	14 06       	cpc	r1, r20
 906:	05 06       	cpc	r0, r21
 908:	08 95       	ret

0000090a <__fp_round>:
 90a:	09 2e       	mov	r0, r25
 90c:	03 94       	inc	r0
 90e:	00 0c       	add	r0, r0
 910:	11 f4       	brne	.+4      	; 0x916 <__fp_round+0xc>
 912:	88 23       	and	r24, r24
 914:	52 f0       	brmi	.+20     	; 0x92a <__fp_round+0x20>
 916:	bb 0f       	add	r27, r27
 918:	40 f4       	brcc	.+16     	; 0x92a <__fp_round+0x20>
 91a:	bf 2b       	or	r27, r31
 91c:	11 f4       	brne	.+4      	; 0x922 <__fp_round+0x18>
 91e:	60 ff       	sbrs	r22, 0
 920:	04 c0       	rjmp	.+8      	; 0x92a <__fp_round+0x20>
 922:	6f 5f       	subi	r22, 0xFF	; 255
 924:	7f 4f       	sbci	r23, 0xFF	; 255
 926:	8f 4f       	sbci	r24, 0xFF	; 255
 928:	9f 4f       	sbci	r25, 0xFF	; 255
 92a:	08 95       	ret

0000092c <__udivmodhi4>:
 92c:	aa 1b       	sub	r26, r26
 92e:	bb 1b       	sub	r27, r27
 930:	51 e1       	ldi	r21, 0x11	; 17
 932:	07 c0       	rjmp	.+14     	; 0x942 <__udivmodhi4_ep>

00000934 <__udivmodhi4_loop>:
 934:	aa 1f       	adc	r26, r26
 936:	bb 1f       	adc	r27, r27
 938:	a6 17       	cp	r26, r22
 93a:	b7 07       	cpc	r27, r23
 93c:	10 f0       	brcs	.+4      	; 0x942 <__udivmodhi4_ep>
 93e:	a6 1b       	sub	r26, r22
 940:	b7 0b       	sbc	r27, r23

00000942 <__udivmodhi4_ep>:
 942:	88 1f       	adc	r24, r24
 944:	99 1f       	adc	r25, r25
 946:	5a 95       	dec	r21
 948:	a9 f7       	brne	.-22     	; 0x934 <__udivmodhi4_loop>
 94a:	80 95       	com	r24
 94c:	90 95       	com	r25
 94e:	bc 01       	movw	r22, r24
 950:	cd 01       	movw	r24, r26
 952:	08 95       	ret

00000954 <_exit>:
 954:	f8 94       	cli

00000956 <__stop_program>:
 956:	ff cf       	rjmp	.-2      	; 0x956 <__stop_program>
