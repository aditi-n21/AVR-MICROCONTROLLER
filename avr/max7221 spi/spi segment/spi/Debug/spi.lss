
spi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00000888  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000034d  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000b0  00000000  00000000  00000c55  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000029c  00000000  00000000  00000d05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  00000fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000090  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ed       	ldi	r30, 0xDE	; 222
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  8a:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <execute>:
#define  SCK PB7
#define SS PB4
void execute(unsigned char cmd, unsigned char dat);
void execute(unsigned char cmd, unsigned char dat)
{
	PORTB&=~(1<<SS);
  92:	c4 98       	cbi	0x18, 4	; 24
	SPDR=cmd;
  94:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
  96:	77 9b       	sbis	0x0e, 7	; 14
  98:	fe cf       	rjmp	.-4      	; 0x96 <execute+0x4>
	
	SPDR=dat;
  9a:	6f b9       	out	0x0f, r22	; 15
	while(!(SPSR&(1<<SPIF)));
  9c:	77 9b       	sbis	0x0e, 7	; 14
  9e:	fe cf       	rjmp	.-4      	; 0x9c <execute+0xa>
	PORTB|=(1<<SS);
  a0:	c4 9a       	sbi	0x18, 4	; 24
	
}
  a2:	08 95       	ret

000000a4 <main>:
int main(void)
{
	DDRB|=(1<<MOSI)|(1<<SCK)|(1<<SS);
  a4:	87 b3       	in	r24, 0x17	; 23
  a6:	80 6b       	ori	r24, 0xB0	; 176
  a8:	87 bb       	out	0x17, r24	; 23
SPCR|=(1<<SPE)|(1<<MSTR)|(1<<SPR0);
  aa:	8d b1       	in	r24, 0x0d	; 13
  ac:	81 65       	ori	r24, 0x51	; 81
  ae:	8d b9       	out	0x0d, r24	; 13
	
	while(1)
	{	
		execute(0x09, 0b00000011);
  b0:	89 e0       	ldi	r24, 0x09	; 9
  b2:	63 e0       	ldi	r22, 0x03	; 3
  b4:	0e 94 49 00 	call	0x92	; 0x92 <execute>
		execute(0x0B, 0x02);
  b8:	8b e0       	ldi	r24, 0x0B	; 11
  ba:	62 e0       	ldi	r22, 0x02	; 2
  bc:	0e 94 49 00 	call	0x92	; 0x92 <execute>
		execute(0x0C, 0x01);
  c0:	8c e0       	ldi	r24, 0x0C	; 12
  c2:	61 e0       	ldi	r22, 0x01	; 1
  c4:	0e 94 49 00 	call	0x92	; 0x92 <execute>
		execute(0x01, 0x07);
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	67 e0       	ldi	r22, 0x07	; 7
  cc:	0e 94 49 00 	call	0x92	; 0x92 <execute>
		execute(0x02, 0x05);
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	65 e0       	ldi	r22, 0x05	; 5
  d4:	0e 94 49 00 	call	0x92	; 0x92 <execute>
  d8:	eb cf       	rjmp	.-42     	; 0xb0 <main+0xc>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
