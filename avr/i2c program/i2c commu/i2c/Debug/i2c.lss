
i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00000890  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000381  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000c5  00000000  00000000  00000c91  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000028f  00000000  00000000  00000d56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000064  00000000  00000000  00000fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000b1  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000001f  00000000  00000000  000010fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ee       	ldi	r30, 0xE2	; 226
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  8a:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <i2c_write>:


#include <avr/io.h>
void i2c_write(unsigned char data)
{
	TWDR =data;
  92:	83 b9       	out	0x03, r24	; 3
	TWCR|=((1<<TWINT)|(1<<TWEN));
  94:	86 b7       	in	r24, 0x36	; 54
  96:	84 68       	ori	r24, 0x84	; 132
  98:	86 bf       	out	0x36, r24	; 54
	while((TWCR&(1<<TWINT))==0);
  9a:	06 b6       	in	r0, 0x36	; 54
  9c:	07 fe       	sbrs	r0, 7
  9e:	fd cf       	rjmp	.-6      	; 0x9a <i2c_write+0x8>
}
  a0:	08 95       	ret

000000a2 <i2c_start>:
void i2c_start(void)
{
	TWCR|=((1<<TWINT)|(1<<TWSTA)|(1<<TWEN));
  a2:	86 b7       	in	r24, 0x36	; 54
  a4:	84 6a       	ori	r24, 0xA4	; 164
  a6:	86 bf       	out	0x36, r24	; 54
	while((TWCR&(1<<TWINT))==0);
  a8:	06 b6       	in	r0, 0x36	; 54
  aa:	07 fe       	sbrs	r0, 7
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <i2c_start+0x6>
}
  ae:	08 95       	ret

000000b0 <i2c_stop>:
void i2c_stop(void)
{
	
	TWCR|=((1<<TWINT)|(1<<TWSTO)|(1<<TWEN));
  b0:	86 b7       	in	r24, 0x36	; 54
  b2:	84 69       	ori	r24, 0x94	; 148
  b4:	86 bf       	out	0x36, r24	; 54
}
  b6:	08 95       	ret

000000b8 <i2c_inti>:
void i2c_inti(void)
{
	TWSR=0x00;
  b8:	11 b8       	out	0x01, r1	; 1
	TWBR=0x47;
  ba:	87 e4       	ldi	r24, 0x47	; 71
  bc:	80 b9       	out	0x00, r24	; 0
	TWCR=0x04;
  be:	84 e0       	ldi	r24, 0x04	; 4
  c0:	86 bf       	out	0x36, r24	; 54
}
  c2:	08 95       	ret

000000c4 <main>:
int main(void)
{
	i2c_inti();
  c4:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_inti>
	i2c_start();
  c8:	0e 94 51 00 	call	0xa2	; 0xa2 <i2c_start>
	i2c_write(0b11010000);
  cc:	80 ed       	ldi	r24, 0xD0	; 208
  ce:	0e 94 49 00 	call	0x92	; 0x92 <i2c_write>
	i2c_write(0b00111111);
  d2:	8f e3       	ldi	r24, 0x3F	; 63
  d4:	0e 94 49 00 	call	0x92	; 0x92 <i2c_write>
	i2c_stop();
  d8:	0e 94 58 00 	call	0xb0	; 0xb0 <i2c_stop>
  dc:	ff cf       	rjmp	.-2      	; 0xdc <main+0x18>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
